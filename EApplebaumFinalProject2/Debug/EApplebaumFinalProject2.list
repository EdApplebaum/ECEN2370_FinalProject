
EApplebaumFinalProject2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007648  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001274  080077f8  080077f8  000087f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a6c  08008a6c  0000a0e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008a6c  08008a6c  00009a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a74  08008a74  0000a0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a74  08008a74  00009a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a78  08008a78  00009a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  08008a7c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0e8  2**0
                  CONTENTS
 10 .bss          00025bb0  200000e8  200000e8  0000a0e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025c98  20025c98  0000a0e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fcf0  00000000  00000000  0000a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd4  00000000  00000000  00019e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  0001cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc4  00000000  00000000  0001dd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275fe  00000000  00000000  0001e93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151c1  00000000  00000000  00045f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e255b  00000000  00000000  0005b0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d656  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047c4  00000000  00000000  0013d69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00141e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080077e0 	.word	0x080077e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	080077e0 	.word	0x080077e0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#endif // COMPILE_TOUCH_FUNCTIONS

volatile uint8_t begin_game = 0;

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 fd70 	bl	8003068 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f001 f97a 	bl	8001880 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f001 f937 	bl	8001800 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f001 f9ee 	bl	8001978 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f001 fac4 	bl	8001b28 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <ApplicationInit+0x38>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 f809 	bl	80005bc <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
	Button_Init();
 80005aa:	f000 f8d7 	bl	800075c <Button_Init>
	Timer2_Init();
 80005ae:	f001 fb23 	bl	8001bf8 <Timer2_Init>


}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000104 	.word	0x20000104

080005bc <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005d4:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005d6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005da:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]

    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4619      	mov	r1, r3
 8000604:	4807      	ldr	r0, [pc, #28]	@ (8000624 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000606:	f003 f833 	bl	8003670 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800060a:	2028      	movs	r0, #40	@ 0x28
 800060c:	f002 ffe1 	bl	80035d2 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000612:	4a06      	ldr	r2, [pc, #24]	@ (800062c <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000614:	601a      	str	r2, [r3, #0]

}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000
 8000628:	2000010c 	.word	0x2000010c
 800062c:	0600000f 	.word	0x0600000f

08000630 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 8000636:	2028      	movs	r0, #40	@ 0x28
 8000638:	f002 ffd9 	bl	80035ee <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 800063c:	2300      	movs	r3, #0
 800063e:	71fb      	strb	r3, [r7, #7]
		static uint32_t count;
		count = 0;
 8000640:	4b3e      	ldr	r3, [pc, #248]	@ (800073c <EXTI15_10_IRQHandler+0x10c>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
		while(count == 0){
 8000646:	e006      	b.n	8000656 <EXTI15_10_IRQHandler+0x26>
			count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000648:	204c      	movs	r0, #76	@ 0x4c
 800064a:	f002 fa7c 	bl	8002b46 <STMPE811_Read>
 800064e:	4603      	mov	r3, r0
 8000650:	461a      	mov	r2, r3
 8000652:	4b3a      	ldr	r3, [pc, #232]	@ (800073c <EXTI15_10_IRQHandler+0x10c>)
 8000654:	601a      	str	r2, [r3, #0]
		while(count == 0){
 8000656:	4b39      	ldr	r3, [pc, #228]	@ (800073c <EXTI15_10_IRQHandler+0x10c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f4      	beq.n	8000648 <EXTI15_10_IRQHandler+0x18>
		}

		// Disable touch interrupt bit on the STMPE811
		uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800065e:	200a      	movs	r0, #10
 8000660:	f001 fa78 	bl	8001b54 <ReadRegisterFromTouchModule>
 8000664:	4603      	mov	r3, r0
 8000666:	71bb      	strb	r3, [r7, #6]
		WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000668:	2100      	movs	r1, #0
 800066a:	200a      	movs	r0, #10
 800066c:	f001 fa80 	bl	8001b70 <WriteDataToTouchModule>

		// Clear the interrupt bit in the STMPE811
		statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000670:	200b      	movs	r0, #11
 8000672:	f001 fa6f 	bl	8001b54 <ReadRegisterFromTouchModule>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b31      	ldr	r3, [pc, #196]	@ (8000740 <EXTI15_10_IRQHandler+0x110>)
 800067c:	701a      	strb	r2, [r3, #0]
		uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800067e:	4b30      	ldr	r3, [pc, #192]	@ (8000740 <EXTI15_10_IRQHandler+0x110>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	717b      	strb	r3, [r7, #5]
		WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	4619      	mov	r1, r3
 800068c:	200b      	movs	r0, #11
 800068e:	f001 fa6f 	bl	8001b70 <WriteDataToTouchModule>

		uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000692:	2040      	movs	r0, #64	@ 0x40
 8000694:	f001 fa5e 	bl	8001b54 <ReadRegisterFromTouchModule>
 8000698:	4603      	mov	r3, r0
 800069a:	713b      	strb	r3, [r7, #4]
		if (ctrlReg & 0x80)
 800069c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	da01      	bge.n	80006a8 <EXTI15_10_IRQHandler+0x78>
		{
			isTouchDetected = true;
 80006a4:	2301      	movs	r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
		}

		//Determine if it is pressed or unpressed
		if(isTouchDetected) // Touch has been detected
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d023      	beq.n	80006f6 <EXTI15_10_IRQHandler+0xc6>
		{
			printf("\nPressed");
 80006ae:	4825      	ldr	r0, [pc, #148]	@ (8000744 <EXTI15_10_IRQHandler+0x114>)
 80006b0:	f005 fff4 	bl	800669c <iprintf>
			// May need to do numerous retries?
			DetermineTouchPosition(&StaticTouchData);
 80006b4:	4824      	ldr	r0, [pc, #144]	@ (8000748 <EXTI15_10_IRQHandler+0x118>)
 80006b6:	f001 fa42 	bl	8001b3e <DetermineTouchPosition>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 80006ba:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <EXTI15_10_IRQHandler+0x118>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <EXTI15_10_IRQHandler+0x118>)
 80006c2:	885b      	ldrh	r3, [r3, #2]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4821      	ldr	r0, [pc, #132]	@ (800074c <EXTI15_10_IRQHandler+0x11c>)
 80006c8:	f005 ffe8 	bl	800669c <iprintf>
			//LCD_Clear(0, LCD_COLOR_RED);
			if(begin_game){
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <EXTI15_10_IRQHandler+0x120>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00b      	beq.n	80006ee <EXTI15_10_IRQHandler+0xbe>
				if(StaticTouchData.x <= LCD_PIXEL_WIDTH/2) {
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <EXTI15_10_IRQHandler+0x118>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	2b78      	cmp	r3, #120	@ 0x78
 80006dc:	d803      	bhi.n	80006e6 <EXTI15_10_IRQHandler+0xb6>
					addSchedulerEvent(MOVE_LEFT_EVENT);
 80006de:	2004      	movs	r0, #4
 80006e0:	f001 fa58 	bl	8001b94 <addSchedulerEvent>
 80006e4:	e00a      	b.n	80006fc <EXTI15_10_IRQHandler+0xcc>
				}
				else {
					addSchedulerEvent(MOVE_RIGHT_EVENT);
 80006e6:	2008      	movs	r0, #8
 80006e8:	f001 fa54 	bl	8001b94 <addSchedulerEvent>
 80006ec:	e006      	b.n	80006fc <EXTI15_10_IRQHandler+0xcc>
				}
			}
			else
			{
				begin_game=1;
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <EXTI15_10_IRQHandler+0x120>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e002      	b.n	80006fc <EXTI15_10_IRQHandler+0xcc>
			}

		}else{

			/* Touch not pressed */
			printf("\nNot pressed \n");
 80006f6:	4817      	ldr	r0, [pc, #92]	@ (8000754 <EXTI15_10_IRQHandler+0x124>)
 80006f8:	f006 f838 	bl	800676c <puts>
			//LCD_Clear(0, LCD_COLOR_GREEN);
		}

		STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80006fc:	2101      	movs	r1, #1
 80006fe:	204b      	movs	r0, #75	@ 0x4b
 8000700:	f002 fa32 	bl	8002b68 <STMPE811_Write>
		STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000704:	2100      	movs	r1, #0
 8000706:	204b      	movs	r0, #75	@ 0x4b
 8000708:	f002 fa2e 	bl	8002b68 <STMPE811_Write>

		// Re-enable IRQs
		WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	4619      	mov	r1, r3
 8000710:	200a      	movs	r0, #10
 8000712:	f001 fa2d 	bl	8001b70 <WriteDataToTouchModule>
		HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000716:	2103      	movs	r1, #3
 8000718:	480f      	ldr	r0, [pc, #60]	@ (8000758 <EXTI15_10_IRQHandler+0x128>)
 800071a:	f002 ff91 	bl	8003640 <HAL_EXTI_ClearPending>

		HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800071e:	2028      	movs	r0, #40	@ 0x28
 8000720:	f002 ff7f 	bl	8003622 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000724:	2028      	movs	r0, #40	@ 0x28
 8000726:	f002 ff54 	bl	80035d2 <HAL_NVIC_EnableIRQ>

		//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
		WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800072a:	797b      	ldrb	r3, [r7, #5]
 800072c:	4619      	mov	r1, r3
 800072e:	200b      	movs	r0, #11
 8000730:	f001 fa1e 	bl	8001b70 <WriteDataToTouchModule>

}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000118 	.word	0x20000118
 8000740:	20000115 	.word	0x20000115
 8000744:	0800781c 	.word	0x0800781c
 8000748:	20000104 	.word	0x20000104
 800074c:	08007828 	.word	0x08007828
 8000750:	20000114 	.word	0x20000114
 8000754:	0800783c 	.word	0x0800783c
 8000758:	2000010c 	.word	0x2000010c

0800075c <Button_Init>:
void Button_Init() {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <Button_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a0f      	ldr	r2, [pc, #60]	@ (80007a8 <Button_Init+0x4c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <Button_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStructure;
	  GPIO_InitStructure.Pin = GPIO_PIN_0;
 800077e:	2301      	movs	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
	  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000782:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000786:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <Button_Init+0x50>)
 8000796:	f002 ff6b 	bl	8003670 <HAL_GPIO_Init>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800079a:	2006      	movs	r0, #6
 800079c:	f002 ff19 	bl	80035d2 <HAL_NVIC_EnableIRQ>
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000

080007b0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80007b4:	2006      	movs	r0, #6
 80007b6:	f002 ff1a 	bl	80035ee <HAL_NVIC_DisableIRQ>
	EXTI->PR |= 1;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <EXTI0_IRQHandler+0x2c>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a07      	ldr	r2, [pc, #28]	@ (80007dc <EXTI0_IRQHandler+0x2c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6153      	str	r3, [r2, #20]

	addSchedulerEvent(ROTATE_EVENT);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f001 f9e4 	bl	8001b94 <addSchedulerEvent>

	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80007cc:	2006      	movs	r0, #6
 80007ce:	f002 ff28 	bl	8003622 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007d2:	2006      	movs	r0, #6
 80007d4:	f002 fefd 	bl	80035d2 <HAL_NVIC_EnableIRQ>

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40013c00 	.word	0x40013c00

080007e0 <Check_Start>:

uint8_t Check_Start() {
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	return begin_game;
 80007e4:	4b03      	ldr	r3, [pc, #12]	@ (80007f4 <Check_Start+0x14>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2db      	uxtb	r3, r3
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	20000114 	.word	0x20000114

080007f8 <Display_Start_Screen>:
uint16_t doubles=0;
uint16_t tetris=0;

static RNG_HandleTypeDef HRNG;

void Display_Start_Screen() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	@ 0x38
 80007fc:	af00      	add	r7, sp, #0
	current_type = 0;
 80007fe:	4b9f      	ldr	r3, [pc, #636]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 8000804:	4b9e      	ldr	r3, [pc, #632]	@ (8000a80 <Display_Start_Screen+0x288>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	@ 0x34
 800080e:	e01e      	b.n	800084e <Display_Start_Screen+0x56>
        for (int x = 0; x < 4; x++) {
 8000810:	2300      	movs	r3, #0
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
 8000814:	e015      	b.n	8000842 <Display_Start_Screen+0x4a>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 8000816:	4b99      	ldr	r3, [pc, #612]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	499a      	ldr	r1, [pc, #616]	@ (8000a84 <Display_Start_Screen+0x28c>)
 800081c:	009a      	lsls	r2, r3, #2
 800081e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	18ca      	adds	r2, r1, r3
 8000826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000828:	4413      	add	r3, r2
 800082a:	7819      	ldrb	r1, [r3, #0]
 800082c:	4a96      	ldr	r2, [pc, #600]	@ (8000a88 <Display_Start_Screen+0x290>)
 800082e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	441a      	add	r2, r3
 8000834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000836:	4413      	add	r3, r2
 8000838:	460a      	mov	r2, r1
 800083a:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 800083c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800083e:	3301      	adds	r3, #1
 8000840:	633b      	str	r3, [r7, #48]	@ 0x30
 8000842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000844:	2b03      	cmp	r3, #3
 8000846:	dde6      	ble.n	8000816 <Display_Start_Screen+0x1e>
    for (int y = 0; y < 4; y++) {
 8000848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800084a:	3301      	adds	r3, #1
 800084c:	637b      	str	r3, [r7, #52]	@ 0x34
 800084e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000850:	2b03      	cmp	r3, #3
 8000852:	dddd      	ble.n	8000810 <Display_Start_Screen+0x18>
        }
    }

    current_x = 0;
 8000854:	4b8d      	ldr	r3, [pc, #564]	@ (8000a8c <Display_Start_Screen+0x294>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
    current_y = 0;
 800085a:	4b8d      	ldr	r3, [pc, #564]	@ (8000a90 <Display_Start_Screen+0x298>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 8000860:	f000 fcec 	bl	800123c <place_tetromino>

	current_type = 1;
 8000864:	4b85      	ldr	r3, [pc, #532]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 800086a:	4b85      	ldr	r3, [pc, #532]	@ (8000a80 <Display_Start_Screen+0x288>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000874:	e01e      	b.n	80008b4 <Display_Start_Screen+0xbc>
        for (int x = 0; x < 4; x++) {
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800087a:	e015      	b.n	80008a8 <Display_Start_Screen+0xb0>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 800087c:	4b7f      	ldr	r3, [pc, #508]	@ (8000a7c <Display_Start_Screen+0x284>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4980      	ldr	r1, [pc, #512]	@ (8000a84 <Display_Start_Screen+0x28c>)
 8000882:	009a      	lsls	r2, r3, #2
 8000884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000886:	4413      	add	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	18ca      	adds	r2, r1, r3
 800088c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800088e:	4413      	add	r3, r2
 8000890:	7819      	ldrb	r1, [r3, #0]
 8000892:	4a7d      	ldr	r2, [pc, #500]	@ (8000a88 <Display_Start_Screen+0x290>)
 8000894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	441a      	add	r2, r3
 800089a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089c:	4413      	add	r3, r2
 800089e:	460a      	mov	r2, r1
 80008a0:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 80008a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a4:	3301      	adds	r3, #1
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	dde6      	ble.n	800087c <Display_Start_Screen+0x84>
    for (int y = 0; y < 4; y++) {
 80008ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008b0:	3301      	adds	r3, #1
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	dddd      	ble.n	8000876 <Display_Start_Screen+0x7e>
        }
    }

    current_x = 3;
 80008ba:	4b74      	ldr	r3, [pc, #464]	@ (8000a8c <Display_Start_Screen+0x294>)
 80008bc:	2203      	movs	r2, #3
 80008be:	701a      	strb	r2, [r3, #0]
    current_y = 0;
 80008c0:	4b73      	ldr	r3, [pc, #460]	@ (8000a90 <Display_Start_Screen+0x298>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 80008c6:	f000 fcb9 	bl	800123c <place_tetromino>

	current_type = 2;
 80008ca:	4b6c      	ldr	r3, [pc, #432]	@ (8000a7c <Display_Start_Screen+0x284>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 80008d0:	4b6b      	ldr	r3, [pc, #428]	@ (8000a80 <Display_Start_Screen+0x288>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80008da:	e01e      	b.n	800091a <Display_Start_Screen+0x122>
        for (int x = 0; x < 4; x++) {
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
 80008e0:	e015      	b.n	800090e <Display_Start_Screen+0x116>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 80008e2:	4b66      	ldr	r3, [pc, #408]	@ (8000a7c <Display_Start_Screen+0x284>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4967      	ldr	r1, [pc, #412]	@ (8000a84 <Display_Start_Screen+0x28c>)
 80008e8:	009a      	lsls	r2, r3, #2
 80008ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ec:	4413      	add	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	18ca      	adds	r2, r1, r3
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	4413      	add	r3, r2
 80008f6:	7819      	ldrb	r1, [r3, #0]
 80008f8:	4a63      	ldr	r2, [pc, #396]	@ (8000a88 <Display_Start_Screen+0x290>)
 80008fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	441a      	add	r2, r3
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	4413      	add	r3, r2
 8000904:	460a      	mov	r2, r1
 8000906:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	3301      	adds	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	2b03      	cmp	r3, #3
 8000912:	dde6      	ble.n	80008e2 <Display_Start_Screen+0xea>
    for (int y = 0; y < 4; y++) {
 8000914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000916:	3301      	adds	r3, #1
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
 800091a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091c:	2b03      	cmp	r3, #3
 800091e:	dddd      	ble.n	80008dc <Display_Start_Screen+0xe4>
        }
    }

    current_x = 7;
 8000920:	4b5a      	ldr	r3, [pc, #360]	@ (8000a8c <Display_Start_Screen+0x294>)
 8000922:	2207      	movs	r2, #7
 8000924:	701a      	strb	r2, [r3, #0]
    current_y = 0;
 8000926:	4b5a      	ldr	r3, [pc, #360]	@ (8000a90 <Display_Start_Screen+0x298>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 800092c:	f000 fc86 	bl	800123c <place_tetromino>

	current_type = 3;
 8000930:	4b52      	ldr	r3, [pc, #328]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000932:	2203      	movs	r2, #3
 8000934:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 8000936:	4b52      	ldr	r3, [pc, #328]	@ (8000a80 <Display_Start_Screen+0x288>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	e01e      	b.n	8000980 <Display_Start_Screen+0x188>
        for (int x = 0; x < 4; x++) {
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	e015      	b.n	8000974 <Display_Start_Screen+0x17c>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 8000948:	4b4c      	ldr	r3, [pc, #304]	@ (8000a7c <Display_Start_Screen+0x284>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	494d      	ldr	r1, [pc, #308]	@ (8000a84 <Display_Start_Screen+0x28c>)
 800094e:	009a      	lsls	r2, r3, #2
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	18ca      	adds	r2, r1, r3
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	4413      	add	r3, r2
 800095c:	7819      	ldrb	r1, [r3, #0]
 800095e:	4a4a      	ldr	r2, [pc, #296]	@ (8000a88 <Display_Start_Screen+0x290>)
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	441a      	add	r2, r3
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4413      	add	r3, r2
 800096a:	460a      	mov	r2, r1
 800096c:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	3301      	adds	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2b03      	cmp	r3, #3
 8000978:	dde6      	ble.n	8000948 <Display_Start_Screen+0x150>
    for (int y = 0; y < 4; y++) {
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3301      	adds	r3, #1
 800097e:	61fb      	str	r3, [r7, #28]
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	2b03      	cmp	r3, #3
 8000984:	dddd      	ble.n	8000942 <Display_Start_Screen+0x14a>
        }
    }

    current_x = 0;
 8000986:	4b41      	ldr	r3, [pc, #260]	@ (8000a8c <Display_Start_Screen+0x294>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
    current_y = 4;
 800098c:	4b40      	ldr	r3, [pc, #256]	@ (8000a90 <Display_Start_Screen+0x298>)
 800098e:	2204      	movs	r2, #4
 8000990:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 8000992:	f000 fc53 	bl	800123c <place_tetromino>

	current_type = 4;
 8000996:	4b39      	ldr	r3, [pc, #228]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000998:	2204      	movs	r2, #4
 800099a:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 800099c:	4b38      	ldr	r3, [pc, #224]	@ (8000a80 <Display_Start_Screen+0x288>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	e01e      	b.n	80009e6 <Display_Start_Screen+0x1ee>
        for (int x = 0; x < 4; x++) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	e015      	b.n	80009da <Display_Start_Screen+0x1e2>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 80009ae:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <Display_Start_Screen+0x284>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4934      	ldr	r1, [pc, #208]	@ (8000a84 <Display_Start_Screen+0x28c>)
 80009b4:	009a      	lsls	r2, r3, #2
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	4413      	add	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	18ca      	adds	r2, r1, r3
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	4413      	add	r3, r2
 80009c2:	7819      	ldrb	r1, [r3, #0]
 80009c4:	4a30      	ldr	r2, [pc, #192]	@ (8000a88 <Display_Start_Screen+0x290>)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	441a      	add	r2, r3
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	4413      	add	r3, r2
 80009d0:	460a      	mov	r2, r1
 80009d2:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	3301      	adds	r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	dde6      	ble.n	80009ae <Display_Start_Screen+0x1b6>
    for (int y = 0; y < 4; y++) {
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3301      	adds	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	dddd      	ble.n	80009a8 <Display_Start_Screen+0x1b0>
        }
    }

    current_x = 4;
 80009ec:	4b27      	ldr	r3, [pc, #156]	@ (8000a8c <Display_Start_Screen+0x294>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	701a      	strb	r2, [r3, #0]
    current_y = 4;
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <Display_Start_Screen+0x298>)
 80009f4:	2204      	movs	r2, #4
 80009f6:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 80009f8:	f000 fc20 	bl	800123c <place_tetromino>
	current_type = 5;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <Display_Start_Screen+0x284>)
 80009fe:	2205      	movs	r2, #5
 8000a00:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <Display_Start_Screen+0x288>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	e01e      	b.n	8000a4c <Display_Start_Screen+0x254>
        for (int x = 0; x < 4; x++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	e015      	b.n	8000a40 <Display_Start_Screen+0x248>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	491a      	ldr	r1, [pc, #104]	@ (8000a84 <Display_Start_Screen+0x28c>)
 8000a1a:	009a      	lsls	r2, r3, #2
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4413      	add	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	18ca      	adds	r2, r1, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4413      	add	r3, r2
 8000a28:	7819      	ldrb	r1, [r3, #0]
 8000a2a:	4a17      	ldr	r2, [pc, #92]	@ (8000a88 <Display_Start_Screen+0x290>)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	441a      	add	r2, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	4413      	add	r3, r2
 8000a36:	460a      	mov	r2, r1
 8000a38:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	dde6      	ble.n	8000a14 <Display_Start_Screen+0x21c>
    for (int y = 0; y < 4; y++) {
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	dddd      	ble.n	8000a0e <Display_Start_Screen+0x216>
        }
    }

    current_x = 0;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <Display_Start_Screen+0x294>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
    current_y = 8;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <Display_Start_Screen+0x298>)
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 8000a5e:	f000 fbed 	bl	800123c <place_tetromino>

	current_type = 6;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000a64:	2206      	movs	r2, #6
 8000a66:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <Display_Start_Screen+0x288>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e02b      	b.n	8000acc <Display_Start_Screen+0x2d4>
        for (int x = 0; x < 4; x++) {
 8000a74:	2300      	movs	r3, #0
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	e022      	b.n	8000ac0 <Display_Start_Screen+0x2c8>
 8000a7a:	bf00      	nop
 8000a7c:	20000193 	.word	0x20000193
 8000a80:	20000192 	.word	0x20000192
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000180 	.word	0x20000180
 8000a8c:	20000190 	.word	0x20000190
 8000a90:	20000191 	.word	0x20000191
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <Display_Start_Screen+0x2f4>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4915      	ldr	r1, [pc, #84]	@ (8000af0 <Display_Start_Screen+0x2f8>)
 8000a9a:	009a      	lsls	r2, r3, #2
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	18ca      	adds	r2, r1, r3
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	7819      	ldrb	r1, [r3, #0]
 8000aaa:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <Display_Start_Screen+0x2fc>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	441a      	add	r2, r3
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	dde6      	ble.n	8000a94 <Display_Start_Screen+0x29c>
    for (int y = 0; y < 4; y++) {
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	ddd0      	ble.n	8000a74 <Display_Start_Screen+0x27c>
        }
    }

    current_x = 4;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <Display_Start_Screen+0x300>)
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	701a      	strb	r2, [r3, #0]
    current_y = 8;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <Display_Start_Screen+0x304>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 8000ade:	f000 fbad 	bl	800123c <place_tetromino>
}
 8000ae2:	bf00      	nop
 8000ae4:	3738      	adds	r7, #56	@ 0x38
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000193 	.word	0x20000193
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000180 	.word	0x20000180
 8000af8:	20000190 	.word	0x20000190
 8000afc:	20000191 	.word	0x20000191

08000b00 <initialize_game>:

void initialize_game() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
    Game_RNG_Init();
 8000b06:	f000 fd91 	bl	800162c <Game_RNG_Init>
    for (int y = 0; y < BOARD_HEIGHT; y++) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	e016      	b.n	8000b3e <initialize_game+0x3e>
        for (int x = 0; x < BOARD_WIDTH; x++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	e00d      	b.n	8000b32 <initialize_game+0x32>
            board[y][x] = 0;
 8000b16:	4910      	ldr	r1, [pc, #64]	@ (8000b58 <initialize_game+0x58>)
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	18ca      	adds	r2, r1, r3
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < BOARD_WIDTH; x++) {
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	2b09      	cmp	r3, #9
 8000b36:	ddee      	ble.n	8000b16 <initialize_game+0x16>
    for (int y = 0; y < BOARD_HEIGHT; y++) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b09      	cmp	r3, #9
 8000b42:	dde5      	ble.n	8000b10 <initialize_game+0x10>
        }
    }
    spawn_tetromino();
 8000b44:	f000 f8ac 	bl	8000ca0 <spawn_tetromino>
    Timer2_Reset();
 8000b48:	f001 f908 	bl	8001d5c <Timer2_Reset>
    Timer2_Start();
 8000b4c:	f001 f8e8 	bl	8001d20 <Timer2_Start>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000011c 	.word	0x2000011c

08000b5c <draw_block>:

void draw_block(uint8_t x, uint8_t y, uint16_t color) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
 8000b66:	460b      	mov	r3, r1
 8000b68:	71bb      	strb	r3, [r7, #6]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	80bb      	strh	r3, [r7, #4]
	for(int temp_x = x*LCD_PIXEL_WIDTH/BOARD_WIDTH; temp_x < (x+1)*LCD_PIXEL_WIDTH/BOARD_WIDTH; temp_x++){
 8000b6e:	79fa      	ldrb	r2, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	e017      	b.n	8000bac <draw_block+0x50>
		for(int temp_y = y*LCD_PIXEL_HEIGHT/BOARD_HEIGHT; temp_y < (y+1)*LCD_PIXEL_HEIGHT/BOARD_HEIGHT; temp_y++){
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	015b      	lsls	r3, r3, #5
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	e00a      	b.n	8000b9a <draw_block+0x3e>
			LCD_Draw_Pixel(temp_x,temp_y,color);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	b291      	uxth	r1, r2
 8000b8c:	88ba      	ldrh	r2, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fed4 	bl	800193c <LCD_Draw_Pixel>
		for(int temp_y = y*LCD_PIXEL_HEIGHT/BOARD_HEIGHT; temp_y < (y+1)*LCD_PIXEL_HEIGHT/BOARD_HEIGHT; temp_y++){
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	3301      	adds	r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	015b      	lsls	r3, r3, #5
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	dbee      	blt.n	8000b84 <draw_block+0x28>
	for(int temp_x = x*LCD_PIXEL_WIDTH/BOARD_WIDTH; temp_x < (x+1)*LCD_PIXEL_WIDTH/BOARD_WIDTH; temp_x++){
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	dbdd      	blt.n	8000b7c <draw_block+0x20>
		}
	}


}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <draw_board>:


void draw_board() {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0

    for (int y = 0; y < BOARD_HEIGHT; y++) {
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	e029      	b.n	8000c2c <draw_board+0x60>
        for (int x = 0; x < BOARD_WIDTH; x++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	e020      	b.n	8000c20 <draw_board+0x54>
            if (board[y][x]) {
 8000bde:	492c      	ldr	r1, [pc, #176]	@ (8000c90 <draw_board+0xc4>)
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	18ca      	adds	r2, r1, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d009      	beq.n	8000c0a <draw_board+0x3e>
            	draw_block(x,y,LCD_COLOR_WHITE);
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	b2d1      	uxtb	r1, r2
 8000bfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ffaa 	bl	8000b5c <draw_block>
 8000c08:	e007      	b.n	8000c1a <draw_board+0x4e>
            } else {
            	draw_block(x,y,LCD_COLOR_BLACK);
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	b2d1      	uxtb	r1, r2
 8000c12:	2200      	movs	r2, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ffa1 	bl	8000b5c <draw_block>
        for (int x = 0; x < BOARD_WIDTH; x++) {
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2b09      	cmp	r3, #9
 8000c24:	dddb      	ble.n	8000bde <draw_board+0x12>
    for (int y = 0; y < BOARD_HEIGHT; y++) {
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b09      	cmp	r3, #9
 8000c30:	ddd2      	ble.n	8000bd8 <draw_board+0xc>
            }
        }
    }

    for (uint8_t y = 0; y < 4; y++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	e023      	b.n	8000c80 <draw_board+0xb4>
    	for (uint8_t x = 0; x<4; x++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	71bb      	strb	r3, [r7, #6]
 8000c3c:	e01a      	b.n	8000c74 <draw_board+0xa8>
    		if(current_tetromino[y][x]) {
 8000c3e:	79fa      	ldrb	r2, [r7, #7]
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	4914      	ldr	r1, [pc, #80]	@ (8000c94 <draw_board+0xc8>)
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	440a      	add	r2, r1
 8000c48:	4413      	add	r3, r2
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d00e      	beq.n	8000c6e <draw_board+0xa2>
    			draw_block(x+current_x,(y+current_y),LCD_COLOR_WHITE);
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <draw_board+0xcc>)
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	4413      	add	r3, r2
 8000c58:	b2d8      	uxtb	r0, r3
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <draw_board+0xd0>)
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	4413      	add	r3, r2
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f7ff ff77 	bl	8000b5c <draw_block>
    	for (uint8_t x = 0; x<4; x++) {
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	3301      	adds	r3, #1
 8000c72:	71bb      	strb	r3, [r7, #6]
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d9e1      	bls.n	8000c3e <draw_board+0x72>
    for (uint8_t y = 0; y < 4; y++) {
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d9d8      	bls.n	8000c38 <draw_board+0x6c>
    		}
    	}
    }
}
 8000c86:	bf00      	nop
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	2000011c 	.word	0x2000011c
 8000c94:	20000180 	.word	0x20000180
 8000c98:	20000190 	.word	0x20000190
 8000c9c:	20000191 	.word	0x20000191

08000ca0 <spawn_tetromino>:


void spawn_tetromino() {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	current_type = HAL_RNG_GetRandomNumber(&HRNG)%7;
 8000ca6:	4822      	ldr	r0, [pc, #136]	@ (8000d30 <spawn_tetromino+0x90>)
 8000ca8:	f005 f942 	bl	8005f30 <HAL_RNG_GetRandomNumber>
 8000cac:	4602      	mov	r2, r0
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <spawn_tetromino+0x94>)
 8000cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8000cb4:	1ad1      	subs	r1, r2, r3
 8000cb6:	0849      	lsrs	r1, r1, #1
 8000cb8:	440b      	add	r3, r1
 8000cba:	0899      	lsrs	r1, r3, #2
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	1ad1      	subs	r1, r2, r3
 8000cc4:	b2ca      	uxtb	r2, r1
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <spawn_tetromino+0x98>)
 8000cc8:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <spawn_tetromino+0x9c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	e01e      	b.n	8000d14 <spawn_tetromino+0x74>
        for (int x = 0; x < 4; x++) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	e015      	b.n	8000d08 <spawn_tetromino+0x68>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 8000cdc:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <spawn_tetromino+0x98>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4917      	ldr	r1, [pc, #92]	@ (8000d40 <spawn_tetromino+0xa0>)
 8000ce2:	009a      	lsls	r2, r3, #2
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	18ca      	adds	r2, r1, r3
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	7819      	ldrb	r1, [r3, #0]
 8000cf2:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <spawn_tetromino+0xa4>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	441a      	add	r2, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	460a      	mov	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	dde6      	ble.n	8000cdc <spawn_tetromino+0x3c>
    for (int y = 0; y < 4; y++) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3301      	adds	r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	dddd      	ble.n	8000cd6 <spawn_tetromino+0x36>
        }
    }

    current_x = BOARD_WIDTH / 2 - 2;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <spawn_tetromino+0xa8>)
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	701a      	strb	r2, [r3, #0]
    current_y = 0;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <spawn_tetromino+0xac>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000019c 	.word	0x2000019c
 8000d34:	24924925 	.word	0x24924925
 8000d38:	20000193 	.word	0x20000193
 8000d3c:	20000192 	.word	0x20000192
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000180 	.word	0x20000180
 8000d48:	20000190 	.word	0x20000190
 8000d4c:	20000191 	.word	0x20000191

08000d50 <rotate_tetromino>:


void rotate_tetromino() {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b094      	sub	sp, #80	@ 0x50
 8000d54:	af00      	add	r7, sp, #0
    int temp[4][4];
    for (int y = 0; y < 4; y++) {
 8000d56:	2300      	movs	r3, #0
 8000d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d5a:	e01e      	b.n	8000d9a <rotate_tetromino+0x4a>
        for (int x = 0; x < 4; x++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d60:	e015      	b.n	8000d8e <rotate_tetromino+0x3e>
            temp[y][x] = current_tetromino[3 - x][y];
 8000d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d64:	f1c3 0303 	rsb	r3, r3, #3
 8000d68:	4a72      	ldr	r2, [pc, #456]	@ (8000f34 <rotate_tetromino+0x1e4>)
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	441a      	add	r2, r3
 8000d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d70:	4413      	add	r3, r2
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d78:	009a      	lsls	r2, r3, #2
 8000d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	3350      	adds	r3, #80	@ 0x50
 8000d82:	443b      	add	r3, r7
 8000d84:	f843 1c50 	str.w	r1, [r3, #-80]
        for (int x = 0; x < 4; x++) {
 8000d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	dde6      	ble.n	8000d62 <rotate_tetromino+0x12>
    for (int y = 0; y < 4; y++) {
 8000d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d96:	3301      	adds	r3, #1
 8000d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	dddd      	ble.n	8000d5c <rotate_tetromino+0xc>
        }
    }

    switch(current_rotation) {
 8000da0:	4b65      	ldr	r3, [pc, #404]	@ (8000f38 <rotate_tetromino+0x1e8>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d83f      	bhi.n	8000e28 <rotate_tetromino+0xd8>
 8000da8:	a201      	add	r2, pc, #4	@ (adr r2, 8000db0 <rotate_tetromino+0x60>)
 8000daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dae:	bf00      	nop
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000ddb 	.word	0x08000ddb
 8000db8:	08000df5 	.word	0x08000df5
 8000dbc:	08000e0f 	.word	0x08000e0f
    case 0:
    	current_x--;
 8000dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b5c      	ldr	r3, [pc, #368]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000dca:	701a      	strb	r2, [r3, #0]
    	current_x--;
 8000dcc:	4b5b      	ldr	r3, [pc, #364]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b59      	ldr	r3, [pc, #356]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000dd6:	701a      	strb	r2, [r3, #0]
    	break;
 8000dd8:	e026      	b.n	8000e28 <rotate_tetromino+0xd8>
    case 1:
    	current_y--;
 8000dda:	4b59      	ldr	r3, [pc, #356]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b57      	ldr	r3, [pc, #348]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000de4:	701a      	strb	r2, [r3, #0]
    	current_y--;
 8000de6:	4b56      	ldr	r3, [pc, #344]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b54      	ldr	r3, [pc, #336]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000df0:	701a      	strb	r2, [r3, #0]
    	break;
 8000df2:	e019      	b.n	8000e28 <rotate_tetromino+0xd8>
    case 2:
    	current_x++;
 8000df4:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000dfe:	701a      	strb	r2, [r3, #0]
    	current_x++;
 8000e00:	4b4e      	ldr	r3, [pc, #312]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b4c      	ldr	r3, [pc, #304]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000e0a:	701a      	strb	r2, [r3, #0]
    	break;
 8000e0c:	e00c      	b.n	8000e28 <rotate_tetromino+0xd8>
    case 3:
        current_y++;
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b4a      	ldr	r3, [pc, #296]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000e18:	701a      	strb	r2, [r3, #0]
        current_y++;
 8000e1a:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b47      	ldr	r3, [pc, #284]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000e24:	701a      	strb	r2, [r3, #0]
        break;
 8000e26:	bf00      	nop
    }

    for (int y = 0; y < 4; y++) {
 8000e28:	2300      	movs	r3, #0
 8000e2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e2c:	e01d      	b.n	8000e6a <rotate_tetromino+0x11a>
        for (int x = 0; x < 4; x++) {
 8000e2e:	2300      	movs	r3, #0
 8000e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8000e32:	e014      	b.n	8000e5e <rotate_tetromino+0x10e>
            current_tetromino[y][x] = temp[y][x];
 8000e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e36:	009a      	lsls	r2, r3, #2
 8000e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e3a:	4413      	add	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	3350      	adds	r3, #80	@ 0x50
 8000e40:	443b      	add	r3, r7
 8000e42:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8000e46:	b2d9      	uxtb	r1, r3
 8000e48:	4a3a      	ldr	r2, [pc, #232]	@ (8000f34 <rotate_tetromino+0x1e4>)
 8000e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	441a      	add	r2, r3
 8000e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e52:	4413      	add	r3, r2
 8000e54:	460a      	mov	r2, r1
 8000e56:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 8000e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	dde7      	ble.n	8000e34 <rotate_tetromino+0xe4>
    for (int y = 0; y < 4; y++) {
 8000e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e66:	3301      	adds	r3, #1
 8000e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	ddde      	ble.n	8000e2e <rotate_tetromino+0xde>
        }
    }

    if (check_collision(current_x, current_y)) {
 8000e70:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b32      	ldr	r3, [pc, #200]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	f000 f861 	bl	8000f44 <check_collision>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d043      	beq.n	8000f10 <rotate_tetromino+0x1c0>
        switch(current_rotation) {
 8000e88:	4b2b      	ldr	r3, [pc, #172]	@ (8000f38 <rotate_tetromino+0x1e8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d84d      	bhi.n	8000f2c <rotate_tetromino+0x1dc>
 8000e90:	a201      	add	r2, pc, #4	@ (adr r2, 8000e98 <rotate_tetromino+0x148>)
 8000e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e96:	bf00      	nop
 8000e98:	08000ea9 	.word	0x08000ea9
 8000e9c:	08000ec3 	.word	0x08000ec3
 8000ea0:	08000edd 	.word	0x08000edd
 8000ea4:	08000ef7 	.word	0x08000ef7
        case 0:
        	current_x++;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000eb2:	701a      	strb	r2, [r3, #0]
        	current_x++;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000ebe:	701a      	strb	r2, [r3, #0]
        	break;
 8000ec0:	e034      	b.n	8000f2c <rotate_tetromino+0x1dc>
        case 1:
        	current_y++;
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000ecc:	701a      	strb	r2, [r3, #0]
        	current_y++;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000ed8:	701a      	strb	r2, [r3, #0]
        	break;
 8000eda:	e027      	b.n	8000f2c <rotate_tetromino+0x1dc>
        case 2:
        	current_x--;
 8000edc:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000ee6:	701a      	strb	r2, [r3, #0]
        	current_x--;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <rotate_tetromino+0x1ec>)
 8000ef2:	701a      	strb	r2, [r3, #0]
        	break;
 8000ef4:	e01a      	b.n	8000f2c <rotate_tetromino+0x1dc>
        case 3:
            current_y--;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000f00:	701a      	strb	r2, [r3, #0]
            current_y--;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <rotate_tetromino+0x1f0>)
 8000f0c:	701a      	strb	r2, [r3, #0]
            break;
 8000f0e:	e00d      	b.n	8000f2c <rotate_tetromino+0x1dc>
                }
            }
        }
    }
    else {
    	current_rotation = (current_rotation+1)%4;
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <rotate_tetromino+0x1e8>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	425a      	negs	r2, r3
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	f002 0203 	and.w	r2, r2, #3
 8000f20:	bf58      	it	pl
 8000f22:	4253      	negpl	r3, r2
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <rotate_tetromino+0x1e8>)
 8000f28:	701a      	strb	r2, [r3, #0]
    }


}
 8000f2a:	e7ff      	b.n	8000f2c <rotate_tetromino+0x1dc>
 8000f2c:	bf00      	nop
 8000f2e:	3750      	adds	r7, #80	@ 0x50
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000180 	.word	0x20000180
 8000f38:	20000192 	.word	0x20000192
 8000f3c:	20000190 	.word	0x20000190
 8000f40:	20000191 	.word	0x20000191

08000f44 <check_collision>:


int check_collision(int x, int y) {
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e036      	b.n	8000fc2 <check_collision+0x7e>
        for (int j = 0; j < 4; j++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	e02d      	b.n	8000fb6 <check_collision+0x72>
            if (current_tetromino[i][j]) {
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd8 <check_collision+0x94>)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	441a      	add	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4413      	add	r3, r2
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d021      	beq.n	8000fb0 <check_collision+0x6c>
                int board_x = x + j;
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4413      	add	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
                int board_y = y + i;
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	4413      	add	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
                if (board_x < 0 || board_x >= BOARD_WIDTH || board_y >= BOARD_HEIGHT || (board_y >= 0 && board[board_y][board_x])) {
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db14      	blt.n	8000fac <check_collision+0x68>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b09      	cmp	r3, #9
 8000f86:	dc11      	bgt.n	8000fac <check_collision+0x68>
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b09      	cmp	r3, #9
 8000f8c:	dc0e      	bgt.n	8000fac <check_collision+0x68>
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0d      	blt.n	8000fb0 <check_collision+0x6c>
 8000f94:	4911      	ldr	r1, [pc, #68]	@ (8000fdc <check_collision+0x98>)
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	18ca      	adds	r2, r1, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <check_collision+0x6c>
                    return 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e00c      	b.n	8000fca <check_collision+0x86>
        for (int j = 0; j < 4; j++) {
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	ddce      	ble.n	8000f5a <check_collision+0x16>
    for (int i = 0; i < 4; i++) {
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	ddc5      	ble.n	8000f54 <check_collision+0x10>
                }
            }
        }
    }
    return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000180 	.word	0x20000180
 8000fdc:	2000011c 	.word	0x2000011c

08000fe0 <move_down>:


void move_down() {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
    if (!check_collision(current_x, current_y + 1)) {
 8000fe6:	4b28      	ldr	r3, [pc, #160]	@ (8001088 <move_down+0xa8>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <move_down+0xac>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	f7ff ffa5 	bl	8000f44 <check_collision>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d106      	bne.n	800100e <move_down+0x2e>
        current_y++;
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <move_down+0xac>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b20      	ldr	r3, [pc, #128]	@ (800108c <move_down+0xac>)
 800100a:	701a      	strb	r2, [r3, #0]
        }
        else {
        spawn_tetromino();
        }
    }
}
 800100c:	e038      	b.n	8001080 <move_down+0xa0>
        for (int i = 0; i < 4; i++) {
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	e027      	b.n	8001064 <move_down+0x84>
            for (int j = 0; j < 4; j++) {
 8001014:	2300      	movs	r3, #0
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	e01e      	b.n	8001058 <move_down+0x78>
                if (current_tetromino[i][j]) {
 800101a:	4a1d      	ldr	r2, [pc, #116]	@ (8001090 <move_down+0xb0>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	441a      	add	r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d012      	beq.n	8001052 <move_down+0x72>
                    board[current_y + i][current_x + j] = 1;
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <move_down+0xac>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	441a      	add	r2, r3
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <move_down+0xa8>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	4619      	mov	r1, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	4419      	add	r1, r3
 8001040:	4814      	ldr	r0, [pc, #80]	@ (8001094 <move_down+0xb4>)
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4403      	add	r3, r0
 800104c:	440b      	add	r3, r1
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < 4; j++) {
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b03      	cmp	r3, #3
 800105c:	dddd      	ble.n	800101a <move_down+0x3a>
        for (int i = 0; i < 4; i++) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3301      	adds	r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b03      	cmp	r3, #3
 8001068:	ddd4      	ble.n	8001014 <move_down+0x34>
        clear_lines();
 800106a:	f000 f849 	bl	8001100 <clear_lines>
        if(current_y==0) {
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <move_down+0xac>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d102      	bne.n	800107c <move_down+0x9c>
        	game_over();
 8001076:	f000 f923 	bl	80012c0 <game_over>
}
 800107a:	e001      	b.n	8001080 <move_down+0xa0>
        spawn_tetromino();
 800107c:	f7ff fe10 	bl	8000ca0 <spawn_tetromino>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000190 	.word	0x20000190
 800108c:	20000191 	.word	0x20000191
 8001090:	20000180 	.word	0x20000180
 8001094:	2000011c 	.word	0x2000011c

08001098 <move_left>:
    while (!check_collision(current_x, current_y + 1)) {
        current_y++;
    }
}

void move_left() {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    if (!check_collision(current_x - 1, current_y)) {
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <move_left+0x2c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	4a09      	ldr	r2, [pc, #36]	@ (80010c8 <move_left+0x30>)
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff4b 	bl	8000f44 <check_collision>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <move_left+0x28>
        current_x--;
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <move_left+0x2c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <move_left+0x2c>)
 80010be:	701a      	strb	r2, [r3, #0]
    }
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000190 	.word	0x20000190
 80010c8:	20000191 	.word	0x20000191

080010cc <move_right>:


void move_right() {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
    if (!check_collision(current_x + 1, current_y)) {
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <move_right+0x2c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	4a09      	ldr	r2, [pc, #36]	@ (80010fc <move_right+0x30>)
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff31 	bl	8000f44 <check_collision>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d105      	bne.n	80010f4 <move_right+0x28>
        current_x++;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <move_right+0x2c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b01      	ldr	r3, [pc, #4]	@ (80010f8 <move_right+0x2c>)
 80010f2:	701a      	strb	r2, [r3, #0]
    }
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000190 	.word	0x20000190
 80010fc:	20000191 	.word	0x20000191

08001100 <clear_lines>:

void clear_lines() {
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
	uint8_t LinesCleared=0;
 8001106:	2300      	movs	r3, #0
 8001108:	77fb      	strb	r3, [r7, #31]
    for (int y = BOARD_HEIGHT - 1; y >= 0; y--) {
 800110a:	2309      	movs	r3, #9
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	e05b      	b.n	80011c8 <clear_lines+0xc8>
        int full = 1;
 8001110:	2301      	movs	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
        for (int x = 0; x < BOARD_WIDTH; x++) {
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	e011      	b.n	800113e <clear_lines+0x3e>
            if (board[y][x] == 0) {
 800111a:	4944      	ldr	r1, [pc, #272]	@ (800122c <clear_lines+0x12c>)
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	18ca      	adds	r2, r1, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <clear_lines+0x38>
                full = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
                break;
 8001136:	e005      	b.n	8001144 <clear_lines+0x44>
        for (int x = 0; x < BOARD_WIDTH; x++) {
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	3301      	adds	r3, #1
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2b09      	cmp	r3, #9
 8001142:	ddea      	ble.n	800111a <clear_lines+0x1a>
            }
        }

        if (full) {
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d03b      	beq.n	80011c2 <clear_lines+0xc2>
            for (int i = y; i > 0; i--) {
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e021      	b.n	8001194 <clear_lines+0x94>
                for (int x = 0; x < BOARD_WIDTH; x++) {
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	e018      	b.n	8001188 <clear_lines+0x88>
                    board[i][x] = board[i - 1][x];
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1e5a      	subs	r2, r3, #1
 800115a:	4934      	ldr	r1, [pc, #208]	@ (800122c <clear_lines+0x12c>)
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	18ca      	adds	r2, r1, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	4413      	add	r3, r2
 800116a:	7818      	ldrb	r0, [r3, #0]
 800116c:	492f      	ldr	r1, [pc, #188]	@ (800122c <clear_lines+0x12c>)
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	18ca      	adds	r2, r1, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	4413      	add	r3, r2
 800117e:	4602      	mov	r2, r0
 8001180:	701a      	strb	r2, [r3, #0]
                for (int x = 0; x < BOARD_WIDTH; x++) {
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	3301      	adds	r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b09      	cmp	r3, #9
 800118c:	dde3      	ble.n	8001156 <clear_lines+0x56>
            for (int i = y; i > 0; i--) {
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3b01      	subs	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dcda      	bgt.n	8001150 <clear_lines+0x50>
                }
            }
            for (int x = 0; x < BOARD_WIDTH; x++) {
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	e007      	b.n	80011b0 <clear_lines+0xb0>
                board[0][x] = 0;
 80011a0:	4a22      	ldr	r2, [pc, #136]	@ (800122c <clear_lines+0x12c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
            for (int x = 0; x < BOARD_WIDTH; x++) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3301      	adds	r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b09      	cmp	r3, #9
 80011b4:	ddf4      	ble.n	80011a0 <clear_lines+0xa0>
            }
            y++;
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
            LinesCleared++;
 80011bc:	7ffb      	ldrb	r3, [r7, #31]
 80011be:	3301      	adds	r3, #1
 80011c0:	77fb      	strb	r3, [r7, #31]
    for (int y = BOARD_HEIGHT - 1; y >= 0; y--) {
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	daa0      	bge.n	8001110 <clear_lines+0x10>
        }
    }
    if(LinesCleared){
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d024      	beq.n	800121e <clear_lines+0x11e>
    	if(LinesCleared%2) {
 80011d4:	7ffb      	ldrb	r3, [r7, #31]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d012      	beq.n	8001206 <clear_lines+0x106>
    		LinesCleared--;
 80011e0:	7ffb      	ldrb	r3, [r7, #31]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	77fb      	strb	r3, [r7, #31]
    		singles++;
 80011e6:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <clear_lines+0x130>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <clear_lines+0x130>)
 80011f0:	801a      	strh	r2, [r3, #0]
    	}

    	while(LinesCleared>=4) {
 80011f2:	e008      	b.n	8001206 <clear_lines+0x106>
    		LinesCleared -= 4;
 80011f4:	7ffb      	ldrb	r3, [r7, #31]
 80011f6:	3b04      	subs	r3, #4
 80011f8:	77fb      	strb	r3, [r7, #31]
    		tetris++;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <clear_lines+0x134>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <clear_lines+0x134>)
 8001204:	801a      	strh	r2, [r3, #0]
    	while(LinesCleared>=4) {
 8001206:	7ffb      	ldrb	r3, [r7, #31]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d8f3      	bhi.n	80011f4 <clear_lines+0xf4>
    	}
    	if(LinesCleared) {
 800120c:	7ffb      	ldrb	r3, [r7, #31]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <clear_lines+0x11e>
    		doubles++;
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <clear_lines+0x138>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <clear_lines+0x138>)
 800121c:	801a      	strh	r2, [r3, #0]
    	}
    }

}
 800121e:	bf00      	nop
 8001220:	3724      	adds	r7, #36	@ 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	2000011c 	.word	0x2000011c
 8001230:	20000194 	.word	0x20000194
 8001234:	20000198 	.word	0x20000198
 8001238:	20000196 	.word	0x20000196

0800123c <place_tetromino>:

void place_tetromino() {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; i++) {
 8001242:	2300      	movs	r3, #0
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	e029      	b.n	800129c <place_tetromino+0x60>
        for (uint8_t j = 0; j < 4; j++) {
 8001248:	2300      	movs	r3, #0
 800124a:	71bb      	strb	r3, [r7, #6]
 800124c:	e020      	b.n	8001290 <place_tetromino+0x54>
            if (current_tetromino[i][j]) {
 800124e:	79fa      	ldrb	r2, [r7, #7]
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	4917      	ldr	r1, [pc, #92]	@ (80012b0 <place_tetromino+0x74>)
 8001254:	0092      	lsls	r2, r2, #2
 8001256:	440a      	add	r2, r1
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d014      	beq.n	800128a <place_tetromino+0x4e>
                uint8_t x = current_x + j;
 8001260:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <place_tetromino+0x78>)
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	4413      	add	r3, r2
 8001268:	717b      	strb	r3, [r7, #5]
                uint8_t y = current_y + i;
 800126a:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <place_tetromino+0x7c>)
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4413      	add	r3, r2
 8001272:	713b      	strb	r3, [r7, #4]
                if (y >= 0) {
                    board[y][x] = 1;
 8001274:	793a      	ldrb	r2, [r7, #4]
 8001276:	7979      	ldrb	r1, [r7, #5]
 8001278:	4810      	ldr	r0, [pc, #64]	@ (80012bc <place_tetromino+0x80>)
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4403      	add	r3, r0
 8001284:	440b      	add	r3, r1
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 4; j++) {
 800128a:	79bb      	ldrb	r3, [r7, #6]
 800128c:	3301      	adds	r3, #1
 800128e:	71bb      	strb	r3, [r7, #6]
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d9db      	bls.n	800124e <place_tetromino+0x12>
    for (uint8_t i = 0; i < 4; i++) {
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	3301      	adds	r3, #1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d9d2      	bls.n	8001248 <place_tetromino+0xc>
                }
            }
        }
    }
    clear_lines();
 80012a2:	f7ff ff2d 	bl	8001100 <clear_lines>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000180 	.word	0x20000180
 80012b4:	20000190 	.word	0x20000190
 80012b8:	20000191 	.word	0x20000191
 80012bc:	2000011c 	.word	0x2000011c

080012c0 <game_over>:

void game_over() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	@ 0x30
 80012c4:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_RED);
 80012c6:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 fb54 	bl	8001978 <LCD_Clear>
	Timer2_Stop();
 80012d0:	f000 fd35 	bl	8001d3e <Timer2_Stop>
	int Time_Played = (int) GetGameTime();
 80012d4:	f000 fd4e 	bl	8001d74 <GetGameTime>
 80012d8:	4603      	mov	r3, r0
 80012da:	613b      	str	r3, [r7, #16]

	LCD_SetTextColor(LCD_COLOR_BLACK);
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 fb6d 	bl	80019bc <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80012e2:	48ba      	ldr	r0, [pc, #744]	@ (80015cc <game_over+0x30c>)
 80012e4:	f000 fb7a 	bl	80019dc <LCD_SetFont>

	LCD_DisplayChar(60,40,'T');
 80012e8:	2254      	movs	r2, #84	@ 0x54
 80012ea:	2128      	movs	r1, #40	@ 0x28
 80012ec:	203c      	movs	r0, #60	@ 0x3c
 80012ee:	f000 fbf3 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(70,40,'I');
 80012f2:	2249      	movs	r2, #73	@ 0x49
 80012f4:	2128      	movs	r1, #40	@ 0x28
 80012f6:	2046      	movs	r0, #70	@ 0x46
 80012f8:	f000 fbee 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(80,40,'M');
 80012fc:	224d      	movs	r2, #77	@ 0x4d
 80012fe:	2128      	movs	r1, #40	@ 0x28
 8001300:	2050      	movs	r0, #80	@ 0x50
 8001302:	f000 fbe9 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(95,40,'E');
 8001306:	2245      	movs	r2, #69	@ 0x45
 8001308:	2128      	movs	r1, #40	@ 0x28
 800130a:	205f      	movs	r0, #95	@ 0x5f
 800130c:	f000 fbe4 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(105,40,' ');
 8001310:	2220      	movs	r2, #32
 8001312:	2128      	movs	r1, #40	@ 0x28
 8001314:	2069      	movs	r0, #105	@ 0x69
 8001316:	f000 fbdf 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(115,40,'P');
 800131a:	2250      	movs	r2, #80	@ 0x50
 800131c:	2128      	movs	r1, #40	@ 0x28
 800131e:	2073      	movs	r0, #115	@ 0x73
 8001320:	f000 fbda 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(130,40,'L');
 8001324:	224c      	movs	r2, #76	@ 0x4c
 8001326:	2128      	movs	r1, #40	@ 0x28
 8001328:	2082      	movs	r0, #130	@ 0x82
 800132a:	f000 fbd5 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(145,40,'A');
 800132e:	2241      	movs	r2, #65	@ 0x41
 8001330:	2128      	movs	r1, #40	@ 0x28
 8001332:	2091      	movs	r0, #145	@ 0x91
 8001334:	f000 fbd0 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(160,40,'Y');
 8001338:	2259      	movs	r2, #89	@ 0x59
 800133a:	2128      	movs	r1, #40	@ 0x28
 800133c:	20a0      	movs	r0, #160	@ 0xa0
 800133e:	f000 fbcb 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(175,40,'E');
 8001342:	2245      	movs	r2, #69	@ 0x45
 8001344:	2128      	movs	r1, #40	@ 0x28
 8001346:	20af      	movs	r0, #175	@ 0xaf
 8001348:	f000 fbc6 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(190,40,'D');
 800134c:	2244      	movs	r2, #68	@ 0x44
 800134e:	2128      	movs	r1, #40	@ 0x28
 8001350:	20be      	movs	r0, #190	@ 0xbe
 8001352:	f000 fbc1 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(205,40,':');
 8001356:	223a      	movs	r2, #58	@ 0x3a
 8001358:	2128      	movs	r1, #40	@ 0x28
 800135a:	20cd      	movs	r0, #205	@ 0xcd
 800135c:	f000 fbbc 	bl	8001ad8 <LCD_DisplayChar>

	LCD_DisplayChar(60,80,'S');
 8001360:	2253      	movs	r2, #83	@ 0x53
 8001362:	2150      	movs	r1, #80	@ 0x50
 8001364:	203c      	movs	r0, #60	@ 0x3c
 8001366:	f000 fbb7 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'I');
 800136a:	2249      	movs	r2, #73	@ 0x49
 800136c:	2150      	movs	r1, #80	@ 0x50
 800136e:	2046      	movs	r0, #70	@ 0x46
 8001370:	f000 fbb2 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(82,80,'N');
 8001374:	224e      	movs	r2, #78	@ 0x4e
 8001376:	2150      	movs	r1, #80	@ 0x50
 8001378:	2052      	movs	r0, #82	@ 0x52
 800137a:	f000 fbad 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(96,80,'G');
 800137e:	2247      	movs	r2, #71	@ 0x47
 8001380:	2150      	movs	r1, #80	@ 0x50
 8001382:	2060      	movs	r0, #96	@ 0x60
 8001384:	f000 fba8 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(110,80,'L');
 8001388:	224c      	movs	r2, #76	@ 0x4c
 800138a:	2150      	movs	r1, #80	@ 0x50
 800138c:	206e      	movs	r0, #110	@ 0x6e
 800138e:	f000 fba3 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(123,80,'E');
 8001392:	2245      	movs	r2, #69	@ 0x45
 8001394:	2150      	movs	r1, #80	@ 0x50
 8001396:	207b      	movs	r0, #123	@ 0x7b
 8001398:	f000 fb9e 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(136,80,'S');
 800139c:	2253      	movs	r2, #83	@ 0x53
 800139e:	2150      	movs	r1, #80	@ 0x50
 80013a0:	2088      	movs	r0, #136	@ 0x88
 80013a2:	f000 fb99 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(147,80,':');
 80013a6:	223a      	movs	r2, #58	@ 0x3a
 80013a8:	2150      	movs	r1, #80	@ 0x50
 80013aa:	2093      	movs	r0, #147	@ 0x93
 80013ac:	f000 fb94 	bl	8001ad8 <LCD_DisplayChar>

	LCD_DisplayChar(60,120,'D');
 80013b0:	2244      	movs	r2, #68	@ 0x44
 80013b2:	2178      	movs	r1, #120	@ 0x78
 80013b4:	203c      	movs	r0, #60	@ 0x3c
 80013b6:	f000 fb8f 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(75,120,'O');
 80013ba:	224f      	movs	r2, #79	@ 0x4f
 80013bc:	2178      	movs	r1, #120	@ 0x78
 80013be:	204b      	movs	r0, #75	@ 0x4b
 80013c0:	f000 fb8a 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(90,120,'U');
 80013c4:	2255      	movs	r2, #85	@ 0x55
 80013c6:	2178      	movs	r1, #120	@ 0x78
 80013c8:	205a      	movs	r0, #90	@ 0x5a
 80013ca:	f000 fb85 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(105,120,'B');
 80013ce:	2242      	movs	r2, #66	@ 0x42
 80013d0:	2178      	movs	r1, #120	@ 0x78
 80013d2:	2069      	movs	r0, #105	@ 0x69
 80013d4:	f000 fb80 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(120,120,'L');
 80013d8:	224c      	movs	r2, #76	@ 0x4c
 80013da:	2178      	movs	r1, #120	@ 0x78
 80013dc:	2078      	movs	r0, #120	@ 0x78
 80013de:	f000 fb7b 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(135,120,'E');
 80013e2:	2245      	movs	r2, #69	@ 0x45
 80013e4:	2178      	movs	r1, #120	@ 0x78
 80013e6:	2087      	movs	r0, #135	@ 0x87
 80013e8:	f000 fb76 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(150,120,'S');
 80013ec:	2253      	movs	r2, #83	@ 0x53
 80013ee:	2178      	movs	r1, #120	@ 0x78
 80013f0:	2096      	movs	r0, #150	@ 0x96
 80013f2:	f000 fb71 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(160,120,':');
 80013f6:	223a      	movs	r2, #58	@ 0x3a
 80013f8:	2178      	movs	r1, #120	@ 0x78
 80013fa:	20a0      	movs	r0, #160	@ 0xa0
 80013fc:	f000 fb6c 	bl	8001ad8 <LCD_DisplayChar>

	LCD_DisplayChar(60,160,'T');
 8001400:	2254      	movs	r2, #84	@ 0x54
 8001402:	21a0      	movs	r1, #160	@ 0xa0
 8001404:	203c      	movs	r0, #60	@ 0x3c
 8001406:	f000 fb67 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(75,160,'E');
 800140a:	2245      	movs	r2, #69	@ 0x45
 800140c:	21a0      	movs	r1, #160	@ 0xa0
 800140e:	204b      	movs	r0, #75	@ 0x4b
 8001410:	f000 fb62 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(90,160,'T');
 8001414:	2254      	movs	r2, #84	@ 0x54
 8001416:	21a0      	movs	r1, #160	@ 0xa0
 8001418:	205a      	movs	r0, #90	@ 0x5a
 800141a:	f000 fb5d 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(105,160,'R');
 800141e:	2252      	movs	r2, #82	@ 0x52
 8001420:	21a0      	movs	r1, #160	@ 0xa0
 8001422:	2069      	movs	r0, #105	@ 0x69
 8001424:	f000 fb58 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(115,160,'I');
 8001428:	2249      	movs	r2, #73	@ 0x49
 800142a:	21a0      	movs	r1, #160	@ 0xa0
 800142c:	2073      	movs	r0, #115	@ 0x73
 800142e:	f000 fb53 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'S');
 8001432:	2253      	movs	r2, #83	@ 0x53
 8001434:	21a0      	movs	r1, #160	@ 0xa0
 8001436:	207d      	movs	r0, #125	@ 0x7d
 8001438:	f000 fb4e 	bl	8001ad8 <LCD_DisplayChar>
	LCD_DisplayChar(135,160,':');
 800143c:	223a      	movs	r2, #58	@ 0x3a
 800143e:	21a0      	movs	r1, #160	@ 0xa0
 8001440:	2087      	movs	r0, #135	@ 0x87
 8001442:	f000 fb49 	bl	8001ad8 <LCD_DisplayChar>


	char time_string[10];
	sprintf(time_string, "%d", Time_Played);
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4961      	ldr	r1, [pc, #388]	@ (80015d0 <game_over+0x310>)
 800144c:	4618      	mov	r0, r3
 800144e:	f005 f995 	bl	800677c <siprintf>

	for(int i=0; i < 10; i++) {
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001456:	e01f      	b.n	8001498 <game_over+0x1d8>
		if(time_string[i]>=0x30 && time_string[i]<=0x39) LCD_DisplayChar(90 + 12*i,60,time_string[i]);
 8001458:	1d3a      	adds	r2, r7, #4
 800145a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b2f      	cmp	r3, #47	@ 0x2f
 8001462:	d916      	bls.n	8001492 <game_over+0x1d2>
 8001464:	1d3a      	adds	r2, r7, #4
 8001466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001468:	4413      	add	r3, r2
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b39      	cmp	r3, #57	@ 0x39
 800146e:	d810      	bhi.n	8001492 <game_over+0x1d2>
 8001470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001472:	b29b      	uxth	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	0052      	lsls	r2, r2, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	b29b      	uxth	r3, r3
 800147e:	335a      	adds	r3, #90	@ 0x5a
 8001480:	b298      	uxth	r0, r3
 8001482:	1d3a      	adds	r2, r7, #4
 8001484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	213c      	movs	r1, #60	@ 0x3c
 800148e:	f000 fb23 	bl	8001ad8 <LCD_DisplayChar>
	for(int i=0; i < 10; i++) {
 8001492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001494:	3301      	adds	r3, #1
 8001496:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149a:	2b09      	cmp	r3, #9
 800149c:	dddc      	ble.n	8001458 <game_over+0x198>
	}

	LCD_DisplayChar(210 ,60,'s');
 800149e:	2273      	movs	r2, #115	@ 0x73
 80014a0:	213c      	movs	r1, #60	@ 0x3c
 80014a2:	20d2      	movs	r0, #210	@ 0xd2
 80014a4:	f000 fb18 	bl	8001ad8 <LCD_DisplayChar>

	for(int i=0; i < 10; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ac:	e007      	b.n	80014be <game_over+0x1fe>
		time_string[i]='\0';
 80014ae:	1d3a      	adds	r2, r7, #4
 80014b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b2:	4413      	add	r3, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 10; i++) {
 80014b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ba:	3301      	adds	r3, #1
 80014bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c0:	2b09      	cmp	r3, #9
 80014c2:	ddf4      	ble.n	80014ae <game_over+0x1ee>
	}

	sprintf(time_string, "%d", singles);
 80014c4:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <game_over+0x314>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4940      	ldr	r1, [pc, #256]	@ (80015d0 <game_over+0x310>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 f954 	bl	800677c <siprintf>

	for(int i=0; i < 10; i++) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d8:	e01f      	b.n	800151a <game_over+0x25a>
		if(time_string[i]>=0x30 && time_string[i]<=0x39) LCD_DisplayChar(90 + 12*i,100,time_string[i]);
 80014da:	1d3a      	adds	r2, r7, #4
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80014e4:	d916      	bls.n	8001514 <game_over+0x254>
 80014e6:	1d3a      	adds	r2, r7, #4
 80014e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b39      	cmp	r3, #57	@ 0x39
 80014f0:	d810      	bhi.n	8001514 <game_over+0x254>
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	0052      	lsls	r2, r2, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	b29b      	uxth	r3, r3
 8001500:	335a      	adds	r3, #90	@ 0x5a
 8001502:	b298      	uxth	r0, r3
 8001504:	1d3a      	adds	r2, r7, #4
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	2164      	movs	r1, #100	@ 0x64
 8001510:	f000 fae2 	bl	8001ad8 <LCD_DisplayChar>
	for(int i=0; i < 10; i++) {
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	3301      	adds	r3, #1
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	2b09      	cmp	r3, #9
 800151e:	dddc      	ble.n	80014da <game_over+0x21a>
	}

	for(int i=0; i < 10; i++) {
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
 8001524:	e007      	b.n	8001536 <game_over+0x276>
		time_string[i]='\0';
 8001526:	1d3a      	adds	r2, r7, #4
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	4413      	add	r3, r2
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 10; i++) {
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	3301      	adds	r3, #1
 8001534:	623b      	str	r3, [r7, #32]
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	2b09      	cmp	r3, #9
 800153a:	ddf4      	ble.n	8001526 <game_over+0x266>
	}

	sprintf(time_string, "%d", doubles);
 800153c:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <game_over+0x318>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4922      	ldr	r1, [pc, #136]	@ (80015d0 <game_over+0x310>)
 8001546:	4618      	mov	r0, r3
 8001548:	f005 f918 	bl	800677c <siprintf>

	for(int i=0; i < 10; i++) {
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	e01f      	b.n	8001592 <game_over+0x2d2>
		if(time_string[i]>=0x30 && time_string[i]<=0x39) LCD_DisplayChar(90 + 12*i,140,time_string[i]);
 8001552:	1d3a      	adds	r2, r7, #4
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b2f      	cmp	r3, #47	@ 0x2f
 800155c:	d916      	bls.n	800158c <game_over+0x2cc>
 800155e:	1d3a      	adds	r2, r7, #4
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4413      	add	r3, r2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b39      	cmp	r3, #57	@ 0x39
 8001568:	d810      	bhi.n	800158c <game_over+0x2cc>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	b29b      	uxth	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	0052      	lsls	r2, r2, #1
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	b29b      	uxth	r3, r3
 8001578:	335a      	adds	r3, #90	@ 0x5a
 800157a:	b298      	uxth	r0, r3
 800157c:	1d3a      	adds	r2, r7, #4
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	218c      	movs	r1, #140	@ 0x8c
 8001588:	f000 faa6 	bl	8001ad8 <LCD_DisplayChar>
	for(int i=0; i < 10; i++) {
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	3301      	adds	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	2b09      	cmp	r3, #9
 8001596:	dddc      	ble.n	8001552 <game_over+0x292>
	}

	for(int i=0; i < 10; i++) {
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	e007      	b.n	80015ae <game_over+0x2ee>
		time_string[i]='\0';
 800159e:	1d3a      	adds	r2, r7, #4
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	4413      	add	r3, r2
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 10; i++) {
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	3301      	adds	r3, #1
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b09      	cmp	r3, #9
 80015b2:	ddf4      	ble.n	800159e <game_over+0x2de>
	}

	sprintf(time_string, "%d", tetris);
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <game_over+0x31c>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4904      	ldr	r1, [pc, #16]	@ (80015d0 <game_over+0x310>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f005 f8dc 	bl	800677c <siprintf>

	for(int i=0; i < 10; i++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e02a      	b.n	8001620 <game_over+0x360>
 80015ca:	bf00      	nop
 80015cc:	20000074 	.word	0x20000074
 80015d0:	0800784c 	.word	0x0800784c
 80015d4:	20000194 	.word	0x20000194
 80015d8:	20000196 	.word	0x20000196
 80015dc:	20000198 	.word	0x20000198
		if(time_string[i]>=0x30 && time_string[i]<=0x39) LCD_DisplayChar(90 + 12*i,180,time_string[i]);
 80015e0:	1d3a      	adds	r2, r7, #4
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	4413      	add	r3, r2
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80015ea:	d916      	bls.n	800161a <game_over+0x35a>
 80015ec:	1d3a      	adds	r2, r7, #4
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	4413      	add	r3, r2
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b39      	cmp	r3, #57	@ 0x39
 80015f6:	d810      	bhi.n	800161a <game_over+0x35a>
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	0052      	lsls	r2, r2, #1
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	b29b      	uxth	r3, r3
 8001606:	335a      	adds	r3, #90	@ 0x5a
 8001608:	b298      	uxth	r0, r3
 800160a:	1d3a      	adds	r2, r7, #4
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	21b4      	movs	r1, #180	@ 0xb4
 8001616:	f000 fa5f 	bl	8001ad8 <LCD_DisplayChar>
	for(int i=0; i < 10; i++) {
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2b09      	cmp	r3, #9
 8001624:	dddc      	ble.n	80015e0 <game_over+0x320>
	}

	while(1);
 8001626:	bf00      	nop
 8001628:	e7fd      	b.n	8001626 <game_over+0x366>
 800162a:	bf00      	nop

0800162c <Game_RNG_Init>:
}

void Game_RNG_Init() {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
	HRNG.Instance = RNG;
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <Game_RNG_Init+0x38>)
 8001634:	4a0c      	ldr	r2, [pc, #48]	@ (8001668 <Game_RNG_Init+0x3c>)
 8001636:	601a      	str	r2, [r3, #0]
	__HAL_RCC_RNG_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <Game_RNG_Init+0x40>)
 800163e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001640:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <Game_RNG_Init+0x40>)
 8001642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001646:	6353      	str	r3, [r2, #52]	@ 0x34
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <Game_RNG_Init+0x40>)
 800164a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800164c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
	HAL_RNG_Init(&HRNG);
 8001654:	4803      	ldr	r0, [pc, #12]	@ (8001664 <Game_RNG_Init+0x38>)
 8001656:	f004 fbeb 	bl	8005e30 <HAL_RNG_Init>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000019c 	.word	0x2000019c
 8001668:	50060800 	.word	0x50060800
 800166c:	40023800 	.word	0x40023800

08001670 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	@ 0x30
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	4b5a      	ldr	r3, [pc, #360]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	4a59      	ldr	r2, [pc, #356]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 8001680:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001684:	6453      	str	r3, [r2, #68]	@ 0x44
 8001686:	4b57      	ldr	r3, [pc, #348]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	4b53      	ldr	r3, [pc, #332]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a52      	ldr	r2, [pc, #328]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b50      	ldr	r3, [pc, #320]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b4c      	ldr	r3, [pc, #304]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a4b      	ldr	r2, [pc, #300]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b49      	ldr	r3, [pc, #292]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b45      	ldr	r3, [pc, #276]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a44      	ldr	r2, [pc, #272]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b42      	ldr	r3, [pc, #264]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a3d      	ldr	r2, [pc, #244]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b3b      	ldr	r3, [pc, #236]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b37      	ldr	r3, [pc, #220]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a36      	ldr	r2, [pc, #216]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 800170c:	f043 0320 	orr.w	r3, r3, #32
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b34      	ldr	r3, [pc, #208]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4b30      	ldr	r3, [pc, #192]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a2f      	ldr	r2, [pc, #188]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 8001728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b2d      	ldr	r3, [pc, #180]	@ (80017e4 <LCD_GPIO_Init+0x174>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800173a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800173e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001748:	2302      	movs	r3, #2
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800174c:	230e      	movs	r3, #14
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4824      	ldr	r0, [pc, #144]	@ (80017e8 <LCD_GPIO_Init+0x178>)
 8001758:	f001 ff8a 	bl	8003670 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800175c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001760:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	4820      	ldr	r0, [pc, #128]	@ (80017ec <LCD_GPIO_Init+0x17c>)
 800176a:	f001 ff81 	bl	8003670 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800176e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	481d      	ldr	r0, [pc, #116]	@ (80017f0 <LCD_GPIO_Init+0x180>)
 800177c:	f001 ff78 	bl	8003670 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001780:	2348      	movs	r3, #72	@ 0x48
 8001782:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	481a      	ldr	r0, [pc, #104]	@ (80017f4 <LCD_GPIO_Init+0x184>)
 800178c:	f001 ff70 	bl	8003670 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001790:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4816      	ldr	r0, [pc, #88]	@ (80017f8 <LCD_GPIO_Init+0x188>)
 800179e:	f001 ff67 	bl	8003670 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80017a2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80017a6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4813      	ldr	r0, [pc, #76]	@ (80017fc <LCD_GPIO_Init+0x18c>)
 80017b0:	f001 ff5e 	bl	8003670 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80017b4:	2303      	movs	r3, #3
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80017b8:	2309      	movs	r3, #9
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	480a      	ldr	r0, [pc, #40]	@ (80017ec <LCD_GPIO_Init+0x17c>)
 80017c4:	f001 ff54 	bl	8003670 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80017c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	4809      	ldr	r0, [pc, #36]	@ (80017fc <LCD_GPIO_Init+0x18c>)
 80017d6:	f001 ff4b 	bl	8003670 <HAL_GPIO_Init>
}
 80017da:	bf00      	nop
 80017dc:	3730      	adds	r7, #48	@ 0x30
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40021400 	.word	0x40021400
 80017fc:	40021800 	.word	0x40021800

08001800 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b090      	sub	sp, #64	@ 0x40
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800180e:	23f0      	movs	r3, #240	@ 0xf0
 8001810:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001816:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800181a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 800181c:	2302      	movs	r3, #2
 800181e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001820:	23ff      	movs	r3, #255	@ 0xff
 8001822:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001828:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800182e:	2305      	movs	r3, #5
 8001830:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001838:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <LTCD_Layer_Init+0x78>)
 800183a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800183c:	23f0      	movs	r3, #240	@ 0xf0
 800183e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001840:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001844:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4619      	mov	r1, r3
 8001860:	4806      	ldr	r0, [pc, #24]	@ (800187c <LTCD_Layer_Init+0x7c>)
 8001862:	f003 facb 	bl	8004dfc <HAL_LTDC_ConfigLayer>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800186c:	f000 f956 	bl	8001b1c <LCD_Error_Handler>
	}
}
 8001870:	bf00      	nop
 8001872:	3740      	adds	r7, #64	@ 0x40
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000288 	.word	0x20000288
 800187c:	200001ac 	.word	0x200001ac

08001880 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001884:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <LTCD__Init+0xb0>)
 8001886:	4a2b      	ldr	r2, [pc, #172]	@ (8001934 <LTCD__Init+0xb4>)
 8001888:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800188a:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <LTCD__Init+0xb0>)
 800188c:	2209      	movs	r2, #9
 800188e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001890:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <LTCD__Init+0xb0>)
 8001892:	2201      	movs	r2, #1
 8001894:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001896:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <LTCD__Init+0xb0>)
 8001898:	221d      	movs	r2, #29
 800189a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800189c:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <LTCD__Init+0xb0>)
 800189e:	2203      	movs	r2, #3
 80018a0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80018a2:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <LTCD__Init+0xb0>)
 80018a4:	f240 120d 	movw	r2, #269	@ 0x10d
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <LTCD__Init+0xb0>)
 80018ac:	f240 1243 	movw	r2, #323	@ 0x143
 80018b0:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <LTCD__Init+0xb0>)
 80018b4:	f240 1217 	movw	r2, #279	@ 0x117
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <LTCD__Init+0xb0>)
 80018bc:	f240 1247 	movw	r2, #327	@ 0x147
 80018c0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80018c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <LTCD__Init+0xb0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <LTCD__Init+0xb0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80018d2:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <LTCD__Init+0xb0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <LTCD__Init+0xb8>)
 80018dc:	2208      	movs	r2, #8
 80018de:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <LTCD__Init+0xb8>)
 80018e2:	22c0      	movs	r2, #192	@ 0xc0
 80018e4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <LTCD__Init+0xb8>)
 80018e8:	2204      	movs	r2, #4
 80018ea:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <LTCD__Init+0xb8>)
 80018ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80018f4:	4810      	ldr	r0, [pc, #64]	@ (8001938 <LTCD__Init+0xb8>)
 80018f6:	f004 f8db 	bl	8005ab0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <LTCD__Init+0xb0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <LTCD__Init+0xb0>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <LTCD__Init+0xb0>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <LTCD__Init+0xb0>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001912:	f7ff fead 	bl	8001670 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001916:	4806      	ldr	r0, [pc, #24]	@ (8001930 <LTCD__Init+0xb0>)
 8001918:	f003 f9a0 	bl	8004c5c <HAL_LTDC_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001922:	f000 f8fb 	bl	8001b1c <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001926:	f000 fa5b 	bl	8001de0 <ili9341_Init>
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200001ac 	.word	0x200001ac
 8001934:	40016800 	.word	0x40016800
 8001938:	20000254 	.word	0x20000254

0800193c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
 8001946:	460b      	mov	r3, r1
 8001948:	80bb      	strh	r3, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800194e:	88ba      	ldrh	r2, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	461a      	mov	r2, r3
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	4413      	add	r3, r2
 800195e:	4905      	ldr	r1, [pc, #20]	@ (8001974 <LCD_Draw_Pixel+0x38>)
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000288 	.word	0x20000288

08001978 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	460a      	mov	r2, r1
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	4613      	mov	r3, r2
 8001986:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10e      	bne.n	80019ac <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e007      	b.n	80019a4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001994:	4908      	ldr	r1, [pc, #32]	@ (80019b8 <LCD_Clear+0x40>)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	88ba      	ldrh	r2, [r7, #4]
 800199a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80019aa:	d3f3      	bcc.n	8001994 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000288 	.word	0x20000288

080019bc <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80019c6:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <LCD_SetTextColor+0x1c>)
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	8013      	strh	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	20000070 	.word	0x20000070

080019dc <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80019e4:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <LCD_SetFont+0x1c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000284 	.word	0x20000284

080019fc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	603a      	str	r2, [r7, #0]
 8001a06:	80fb      	strh	r3, [r7, #6]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e04c      	b.n	8001ab4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	e03f      	b.n	8001aa0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <LCD_Draw_Char+0xd0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	889b      	ldrh	r3, [r3, #4]
 8001a32:	4a27      	ldr	r2, [pc, #156]	@ (8001ad0 <LCD_Draw_Char+0xd4>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	2280      	movs	r2, #128	@ 0x80
 8001a40:	409a      	lsls	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	fa42 f303 	asr.w	r3, r2, r3
 8001a48:	400b      	ands	r3, r1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d104      	bne.n	8001a58 <LCD_Draw_Char+0x5c>
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <LCD_Draw_Char+0xd0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	889b      	ldrh	r3, [r3, #4]
 8001a54:	2b0c      	cmp	r3, #12
 8001a56:	d920      	bls.n	8001a9a <LCD_Draw_Char+0x9e>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	fa42 f303 	asr.w	r3, r2, r3
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d104      	bne.n	8001a7c <LCD_Draw_Char+0x80>
 8001a72:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <LCD_Draw_Char+0xd0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	889b      	ldrh	r3, [r3, #4]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d80e      	bhi.n	8001a9a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	4413      	add	r3, r2
 8001a84:	b298      	uxth	r0, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	88bb      	ldrh	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4a10      	ldr	r2, [pc, #64]	@ (8001ad4 <LCD_Draw_Char+0xd8>)
 8001a92:	8812      	ldrh	r2, [r2, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff ff51 	bl	800193c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <LCD_Draw_Char+0xd0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	889b      	ldrh	r3, [r3, #4]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d3b8      	bcc.n	8001a20 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <LCD_Draw_Char+0xd0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	88db      	ldrh	r3, [r3, #6]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d3ab      	bcc.n	8001a1a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000284 	.word	0x20000284
 8001ad0:	aaaaaaab 	.word	0xaaaaaaab
 8001ad4:	20000070 	.word	0x20000070

08001ad8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	80bb      	strh	r3, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	3b20      	subs	r3, #32
 8001aee:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <LCD_DisplayChar+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	4907      	ldr	r1, [pc, #28]	@ (8001b18 <LCD_DisplayChar+0x40>)
 8001afa:	6809      	ldr	r1, [r1, #0]
 8001afc:	88c9      	ldrh	r1, [r1, #6]
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	441a      	add	r2, r3
 8001b06:	88b9      	ldrh	r1, [r7, #4]
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff76 	bl	80019fc <LCD_Draw_Char>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000284 	.word	0x20000284

08001b1c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b20:	b672      	cpsid	i
}
 8001b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <LCD_Error_Handler+0x8>

08001b28 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001b2c:	f000 ff44 	bl	80029b8 <STMPE811_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d001      	beq.n	8001b3a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001b36:	bf00      	nop
 8001b38:	e7fd      	b.n	8001b36 <InitializeLCDTouch+0xe>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f001 f820 	bl	8002b8c <STMPE811_DetermineTouchPosition>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fff0 	bl	8002b46 <STMPE811_Read>
 8001b66:	4603      	mov	r3, r0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	460a      	mov	r2, r1
 8001b7a:	71fb      	strb	r3, [r7, #7]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8001b80:	79ba      	ldrb	r2, [r7, #6]
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 ffee 	bl	8002b68 <STMPE811_Write>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <addSchedulerEvent>:
 */

#include "Scheduler.h"
static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t event){
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
scheduledEvents |= event;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <addSchedulerEvent+0x20>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	4a03      	ldr	r2, [pc, #12]	@ (8001bb4 <addSchedulerEvent+0x20>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	20025a88 	.word	0x20025a88

08001bb8 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <removeSchedulerEvent+0x24>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <removeSchedulerEvent+0x24>)
 8001bcc:	6013      	str	r3, [r2, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20025a88 	.word	0x20025a88

08001be0 <getScheduledEvents>:

uint32_t getScheduledEvents() {
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <getScheduledEvents+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20025a88 	.word	0x20025a88

08001bf8 <Timer2_Init>:
 *      Author: 14408
 */
#include "Timer_Driver.h"
volatile uint32_t Game_Time = 0;

void Timer2_Init(void) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001bfc:	4b46      	ldr	r3, [pc, #280]	@ (8001d18 <Timer2_Init+0x120>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	4a45      	ldr	r2, [pc, #276]	@ (8001d18 <Timer2_Init+0x120>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->CR1 &= ~(0x3 << CKD_OFFSET);
 8001c08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c16:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(0x1 << ARPE_OFFSET);
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c26:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(0x3 << CMS_OFFSET);
 8001c28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c32:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001c36:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(0x1 << DIR_OFFSET);
 8001c38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c42:	f023 0310 	bic.w	r3, r3, #16
 8001c46:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(0x1 << OPM_OFFSET);
 8001c48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c52:	f023 0308 	bic.w	r3, r3, #8
 8001c56:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(0x1 << UDIS_OFFSET);
 8001c58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c62:	f023 0302 	bic.w	r3, r3, #2
 8001c66:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= TIM_CKD_1 << CKD_OFFSET;
 8001c68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_ARPE_NO << ARPE_OFFSET;
 8001c74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CMS_UP << CMS_OFFSET;
 8001c80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c8e:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CD_NO << DIR_OFFSET;
 8001c90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_OPM_NO << OPM_OFFSET;
 8001c9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ca0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_UDIS_ENABLE << UDIS_OFFSET;
 8001ca8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6013      	str	r3, [r2, #0]

	TIM2->CR2 &= ~(0x7 << MMS_OFFSET);
 8001cb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cc2:	6053      	str	r3, [r2, #4]
	TIM2->CR2 |= TIM_MMS_EN << MMS_OFFSET;
 8001cc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cce:	f043 0310 	orr.w	r3, r3, #16
 8001cd2:	6053      	str	r3, [r2, #4]

	TIM2-> DIER &= ~(0x1 << UIE_OFFSET);
 8001cd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	60d3      	str	r3, [r2, #12]
	TIM2-> DIER |= TIM_UIE_ENABLE << UIE_OFFSET;
 8001ce4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	60d3      	str	r3, [r2, #12]

    TIM2->ARR = 82900000;
 8001cf4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cf8:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <Timer2_Init+0x124>)
 8001cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->DIER |= TIM_DIER_UIE;
 8001cfc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	60d3      	str	r3, [r2, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d0c:	201c      	movs	r0, #28
 8001d0e:	f001 fc60 	bl	80035d2 <HAL_NVIC_EnableIRQ>

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	04f0f420 	.word	0x04f0f420

08001d20 <Timer2_Start>:
void Timer2_Start(void) {
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
    TIM2->CR1 |= TIM_CR1_CEN;
 8001d24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <Timer2_Stop>:

void Timer2_Stop(void) {
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
    TIM2->CR1 &= ~TIM_CR1_CEN;
 8001d42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	6013      	str	r3, [r2, #0]
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <Timer2_Reset>:

void Timer2_Reset(void) {
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
    TIM2->CNT = 0;
 8001d60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <GetGameTime>:

uint32_t GetGameTime() {
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	return Game_Time;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <GetGameTime+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20025a8c 	.word	0x20025a8c

08001d8c <TIM2_IRQHandler>:
void TIM2_IRQHandler() {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8001d90:	201c      	movs	r0, #28
 8001d92:	f001 fc2c 	bl	80035ee <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 8001d96:	201c      	movs	r0, #28
 8001d98:	f001 fc43 	bl	8003622 <HAL_NVIC_ClearPendingIRQ>
    TIM2->SR &= ~(0x1);
 8001d9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	6113      	str	r3, [r2, #16]

    Game_Time++;
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <TIM2_IRQHandler+0x50>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <TIM2_IRQHandler+0x50>)
 8001db4:	6013      	str	r3, [r2, #0]
    TIM2->SR &= ~(0x1);
 8001db6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6113      	str	r3, [r2, #16]
    TIM2->CNT =0;
 8001dc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    Timer2_Start();
 8001dce:	f7ff ffa7 	bl	8001d20 <Timer2_Start>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dd2:	201c      	movs	r0, #28
 8001dd4:	f001 fbfd 	bl	80035d2 <HAL_NVIC_EnableIRQ>
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20025a8c 	.word	0x20025a8c

08001de0 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001de4:	f000 f9fe 	bl	80021e4 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001de8:	20ca      	movs	r0, #202	@ 0xca
 8001dea:	f000 f943 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001dee:	20c3      	movs	r0, #195	@ 0xc3
 8001df0:	f000 f94d 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001df4:	2008      	movs	r0, #8
 8001df6:	f000 f94a 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001dfa:	2050      	movs	r0, #80	@ 0x50
 8001dfc:	f000 f947 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001e00:	20cf      	movs	r0, #207	@ 0xcf
 8001e02:	f000 f937 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001e06:	2000      	movs	r0, #0
 8001e08:	f000 f941 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001e0c:	20c1      	movs	r0, #193	@ 0xc1
 8001e0e:	f000 f93e 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001e12:	2030      	movs	r0, #48	@ 0x30
 8001e14:	f000 f93b 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001e18:	20ed      	movs	r0, #237	@ 0xed
 8001e1a:	f000 f92b 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001e1e:	2064      	movs	r0, #100	@ 0x64
 8001e20:	f000 f935 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f000 f932 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001e2a:	2012      	movs	r0, #18
 8001e2c:	f000 f92f 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001e30:	2081      	movs	r0, #129	@ 0x81
 8001e32:	f000 f92c 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001e36:	20e8      	movs	r0, #232	@ 0xe8
 8001e38:	f000 f91c 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001e3c:	2085      	movs	r0, #133	@ 0x85
 8001e3e:	f000 f926 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f923 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001e48:	2078      	movs	r0, #120	@ 0x78
 8001e4a:	f000 f920 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001e4e:	20cb      	movs	r0, #203	@ 0xcb
 8001e50:	f000 f910 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001e54:	2039      	movs	r0, #57	@ 0x39
 8001e56:	f000 f91a 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001e5a:	202c      	movs	r0, #44	@ 0x2c
 8001e5c:	f000 f917 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f000 f914 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001e66:	2034      	movs	r0, #52	@ 0x34
 8001e68:	f000 f911 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f000 f90e 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001e72:	20f7      	movs	r0, #247	@ 0xf7
 8001e74:	f000 f8fe 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001e78:	2020      	movs	r0, #32
 8001e7a:	f000 f908 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001e7e:	20ea      	movs	r0, #234	@ 0xea
 8001e80:	f000 f8f8 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f000 f902 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f000 f8ff 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001e90:	20b1      	movs	r0, #177	@ 0xb1
 8001e92:	f000 f8ef 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 f8f9 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001e9c:	201b      	movs	r0, #27
 8001e9e:	f000 f8f6 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001ea2:	20b6      	movs	r0, #182	@ 0xb6
 8001ea4:	f000 f8e6 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001ea8:	200a      	movs	r0, #10
 8001eaa:	f000 f8f0 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001eae:	20a2      	movs	r0, #162	@ 0xa2
 8001eb0:	f000 f8ed 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001eb4:	20c0      	movs	r0, #192	@ 0xc0
 8001eb6:	f000 f8dd 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001eba:	2010      	movs	r0, #16
 8001ebc:	f000 f8e7 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001ec0:	20c1      	movs	r0, #193	@ 0xc1
 8001ec2:	f000 f8d7 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001ec6:	2010      	movs	r0, #16
 8001ec8:	f000 f8e1 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001ecc:	20c5      	movs	r0, #197	@ 0xc5
 8001ece:	f000 f8d1 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001ed2:	2045      	movs	r0, #69	@ 0x45
 8001ed4:	f000 f8db 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001ed8:	2015      	movs	r0, #21
 8001eda:	f000 f8d8 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001ede:	20c7      	movs	r0, #199	@ 0xc7
 8001ee0:	f000 f8c8 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001ee4:	2090      	movs	r0, #144	@ 0x90
 8001ee6:	f000 f8d2 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001eea:	2036      	movs	r0, #54	@ 0x36
 8001eec:	f000 f8c2 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001ef0:	20c8      	movs	r0, #200	@ 0xc8
 8001ef2:	f000 f8cc 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001ef6:	20f2      	movs	r0, #242	@ 0xf2
 8001ef8:	f000 f8bc 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f000 f8c6 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001f02:	20b0      	movs	r0, #176	@ 0xb0
 8001f04:	f000 f8b6 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001f08:	20c2      	movs	r0, #194	@ 0xc2
 8001f0a:	f000 f8c0 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001f0e:	20b6      	movs	r0, #182	@ 0xb6
 8001f10:	f000 f8b0 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001f14:	200a      	movs	r0, #10
 8001f16:	f000 f8ba 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001f1a:	20a7      	movs	r0, #167	@ 0xa7
 8001f1c:	f000 f8b7 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001f20:	2027      	movs	r0, #39	@ 0x27
 8001f22:	f000 f8b4 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001f26:	2004      	movs	r0, #4
 8001f28:	f000 f8b1 	bl	800208e <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001f2c:	202a      	movs	r0, #42	@ 0x2a
 8001f2e:	f000 f8a1 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f000 f8ab 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f000 f8a8 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 f8a5 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001f44:	20ef      	movs	r0, #239	@ 0xef
 8001f46:	f000 f8a2 	bl	800208e <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001f4a:	202b      	movs	r0, #43	@ 0x2b
 8001f4c:	f000 f892 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f50:	2000      	movs	r0, #0
 8001f52:	f000 f89c 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 f899 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f000 f896 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001f62:	203f      	movs	r0, #63	@ 0x3f
 8001f64:	f000 f893 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001f68:	20f6      	movs	r0, #246	@ 0xf6
 8001f6a:	f000 f883 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f000 f88d 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f74:	2000      	movs	r0, #0
 8001f76:	f000 f88a 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001f7a:	2006      	movs	r0, #6
 8001f7c:	f000 f887 	bl	800208e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001f80:	202c      	movs	r0, #44	@ 0x2c
 8001f82:	f000 f877 	bl	8002074 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001f86:	20c8      	movs	r0, #200	@ 0xc8
 8001f88:	f000 f9e8 	bl	800235c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001f8c:	2026      	movs	r0, #38	@ 0x26
 8001f8e:	f000 f871 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f000 f87b 	bl	800208e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001f98:	20e0      	movs	r0, #224	@ 0xe0
 8001f9a:	f000 f86b 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f000 f875 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001fa4:	2029      	movs	r0, #41	@ 0x29
 8001fa6:	f000 f872 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001faa:	2024      	movs	r0, #36	@ 0x24
 8001fac:	f000 f86f 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001fb0:	200c      	movs	r0, #12
 8001fb2:	f000 f86c 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001fb6:	200e      	movs	r0, #14
 8001fb8:	f000 f869 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001fbc:	2009      	movs	r0, #9
 8001fbe:	f000 f866 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001fc2:	204e      	movs	r0, #78	@ 0x4e
 8001fc4:	f000 f863 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001fc8:	2078      	movs	r0, #120	@ 0x78
 8001fca:	f000 f860 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001fce:	203c      	movs	r0, #60	@ 0x3c
 8001fd0:	f000 f85d 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001fd4:	2009      	movs	r0, #9
 8001fd6:	f000 f85a 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001fda:	2013      	movs	r0, #19
 8001fdc:	f000 f857 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001fe0:	2005      	movs	r0, #5
 8001fe2:	f000 f854 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001fe6:	2017      	movs	r0, #23
 8001fe8:	f000 f851 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001fec:	2011      	movs	r0, #17
 8001fee:	f000 f84e 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 f84b 	bl	800208e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001ff8:	20e1      	movs	r0, #225	@ 0xe1
 8001ffa:	f000 f83b 	bl	8002074 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f845 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002004:	2016      	movs	r0, #22
 8002006:	f000 f842 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800200a:	201b      	movs	r0, #27
 800200c:	f000 f83f 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002010:	2004      	movs	r0, #4
 8002012:	f000 f83c 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002016:	2011      	movs	r0, #17
 8002018:	f000 f839 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800201c:	2007      	movs	r0, #7
 800201e:	f000 f836 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002022:	2031      	movs	r0, #49	@ 0x31
 8002024:	f000 f833 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002028:	2033      	movs	r0, #51	@ 0x33
 800202a:	f000 f830 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800202e:	2042      	movs	r0, #66	@ 0x42
 8002030:	f000 f82d 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002034:	2005      	movs	r0, #5
 8002036:	f000 f82a 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800203a:	200c      	movs	r0, #12
 800203c:	f000 f827 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002040:	200a      	movs	r0, #10
 8002042:	f000 f824 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002046:	2028      	movs	r0, #40	@ 0x28
 8002048:	f000 f821 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800204c:	202f      	movs	r0, #47	@ 0x2f
 800204e:	f000 f81e 	bl	800208e <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002052:	200f      	movs	r0, #15
 8002054:	f000 f81b 	bl	800208e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002058:	2011      	movs	r0, #17
 800205a:	f000 f80b 	bl	8002074 <ili9341_Write_Reg>
  LCD_Delay(200);
 800205e:	20c8      	movs	r0, #200	@ 0xc8
 8002060:	f000 f97c 	bl	800235c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002064:	2029      	movs	r0, #41	@ 0x29
 8002066:	f000 f805 	bl	8002074 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800206a:	202c      	movs	r0, #44	@ 0x2c
 800206c:	f000 f802 	bl	8002074 <ili9341_Write_Reg>
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}

08002074 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f949 	bl	8002318 <LCD_IO_WriteReg>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f91a 	bl	80022d4 <LCD_IO_WriteData>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80020ac:	4819      	ldr	r0, [pc, #100]	@ (8002114 <SPI_Init+0x6c>)
 80020ae:	f004 f949 	bl	8006344 <HAL_SPI_GetState>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d12b      	bne.n	8002110 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80020b8:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <SPI_Init+0x6c>)
 80020ba:	4a17      	ldr	r2, [pc, #92]	@ (8002118 <SPI_Init+0x70>)
 80020bc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <SPI_Init+0x6c>)
 80020c0:	2218      	movs	r2, #24
 80020c2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80020c4:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <SPI_Init+0x6c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80020ca:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <SPI_Init+0x6c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80020d0:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <SPI_Init+0x6c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80020d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <SPI_Init+0x6c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80020dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002114 <SPI_Init+0x6c>)
 80020de:	2207      	movs	r2, #7
 80020e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80020e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <SPI_Init+0x6c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <SPI_Init+0x6c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <SPI_Init+0x6c>)
 80020f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020f4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <SPI_Init+0x6c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <SPI_Init+0x6c>)
 80020fe:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002102:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002104:	4803      	ldr	r0, [pc, #12]	@ (8002114 <SPI_Init+0x6c>)
 8002106:	f000 f833 	bl	8002170 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800210a:	4802      	ldr	r0, [pc, #8]	@ (8002114 <SPI_Init+0x6c>)
 800210c:	f003 ff25 	bl	8005f5a <HAL_SPI_Init>
  }
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20025a90 	.word	0x20025a90
 8002118:	40015000 	.word	0x40015000

0800211c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <SPI_Write+0x34>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	1db9      	adds	r1, r7, #6
 8002130:	2201      	movs	r2, #1
 8002132:	4808      	ldr	r0, [pc, #32]	@ (8002154 <SPI_Write+0x38>)
 8002134:	f003 ffc2 	bl	80060bc <HAL_SPI_Transmit>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002142:	f000 f809 	bl	8002158 <SPI_Error>
  }
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000007c 	.word	0x2000007c
 8002154:	20025a90 	.word	0x20025a90

08002158 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800215c:	4803      	ldr	r0, [pc, #12]	@ (800216c <SPI_Error+0x14>)
 800215e:	f003 ff85 	bl	800606c <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002162:	f7ff ffa1 	bl	80020a8 <SPI_Init>
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20025a90 	.word	0x20025a90

08002170 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <SPI_MspInit+0x6c>)
 800217e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002180:	4a16      	ldr	r2, [pc, #88]	@ (80021dc <SPI_MspInit+0x6c>)
 8002182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002186:	6453      	str	r3, [r2, #68]	@ 0x44
 8002188:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <SPI_MspInit+0x6c>)
 800218a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <SPI_MspInit+0x6c>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219c:	4a0f      	ldr	r2, [pc, #60]	@ (80021dc <SPI_MspInit+0x6c>)
 800219e:	f043 0320 	orr.w	r3, r3, #32
 80021a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a4:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <SPI_MspInit+0x6c>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80021b0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80021b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80021be:	2301      	movs	r3, #1
 80021c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80021c2:	2305      	movs	r3, #5
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4804      	ldr	r0, [pc, #16]	@ (80021e0 <SPI_MspInit+0x70>)
 80021ce:	f001 fa4f 	bl	8003670 <HAL_GPIO_Init>
}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	@ 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40021400 	.word	0x40021400

080021e4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80021ea:	4b36      	ldr	r3, [pc, #216]	@ (80022c4 <LCD_IO_Init+0xe0>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d164      	bne.n	80022bc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80021f2:	4b34      	ldr	r3, [pc, #208]	@ (80022c4 <LCD_IO_Init+0xe0>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	4b32      	ldr	r3, [pc, #200]	@ (80022c8 <LCD_IO_Init+0xe4>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	4a31      	ldr	r2, [pc, #196]	@ (80022c8 <LCD_IO_Init+0xe4>)
 8002202:	f043 0308 	orr.w	r3, r3, #8
 8002206:	6313      	str	r3, [r2, #48]	@ 0x30
 8002208:	4b2f      	ldr	r3, [pc, #188]	@ (80022c8 <LCD_IO_Init+0xe4>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002214:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002218:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800221a:	2301      	movs	r3, #1
 800221c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002226:	f107 030c 	add.w	r3, r7, #12
 800222a:	4619      	mov	r1, r3
 800222c:	4827      	ldr	r0, [pc, #156]	@ (80022cc <LCD_IO_Init+0xe8>)
 800222e:	f001 fa1f 	bl	8003670 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <LCD_IO_Init+0xe4>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	4a23      	ldr	r2, [pc, #140]	@ (80022c8 <LCD_IO_Init+0xe4>)
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	6313      	str	r3, [r2, #48]	@ 0x30
 8002242:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <LCD_IO_Init+0xe4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800224e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002252:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800225c:	2302      	movs	r3, #2
 800225e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4619      	mov	r1, r3
 8002266:	4819      	ldr	r0, [pc, #100]	@ (80022cc <LCD_IO_Init+0xe8>)
 8002268:	f001 fa02 	bl	8003670 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <LCD_IO_Init+0xe4>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	4a14      	ldr	r2, [pc, #80]	@ (80022c8 <LCD_IO_Init+0xe4>)
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	6313      	str	r3, [r2, #48]	@ 0x30
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <LCD_IO_Init+0xe4>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002288:	2304      	movs	r3, #4
 800228a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002294:	2302      	movs	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	4619      	mov	r1, r3
 800229e:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <LCD_IO_Init+0xec>)
 80022a0:	f001 f9e6 	bl	8003670 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80022a4:	2200      	movs	r2, #0
 80022a6:	2104      	movs	r1, #4
 80022a8:	4809      	ldr	r0, [pc, #36]	@ (80022d0 <LCD_IO_Init+0xec>)
 80022aa:	f001 fc99 	bl	8003be0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80022ae:	2201      	movs	r2, #1
 80022b0:	2104      	movs	r1, #4
 80022b2:	4807      	ldr	r0, [pc, #28]	@ (80022d0 <LCD_IO_Init+0xec>)
 80022b4:	f001 fc94 	bl	8003be0 <HAL_GPIO_WritePin>

    SPI_Init();
 80022b8:	f7ff fef6 	bl	80020a8 <SPI_Init>
  }
}
 80022bc:	bf00      	nop
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20025ae8 	.word	0x20025ae8
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40020c00 	.word	0x40020c00
 80022d0:	40020800 	.word	0x40020800

080022d4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80022de:	2201      	movs	r2, #1
 80022e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022e4:	480a      	ldr	r0, [pc, #40]	@ (8002310 <LCD_IO_WriteData+0x3c>)
 80022e6:	f001 fc7b 	bl	8003be0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80022ea:	2200      	movs	r2, #0
 80022ec:	2104      	movs	r1, #4
 80022ee:	4809      	ldr	r0, [pc, #36]	@ (8002314 <LCD_IO_WriteData+0x40>)
 80022f0:	f001 fc76 	bl	8003be0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff10 	bl	800211c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022fc:	2201      	movs	r2, #1
 80022fe:	2104      	movs	r1, #4
 8002300:	4804      	ldr	r0, [pc, #16]	@ (8002314 <LCD_IO_WriteData+0x40>)
 8002302:	f001 fc6d 	bl	8003be0 <HAL_GPIO_WritePin>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40020c00 	.word	0x40020c00
 8002314:	40020800 	.word	0x40020800

08002318 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002328:	480a      	ldr	r0, [pc, #40]	@ (8002354 <LCD_IO_WriteReg+0x3c>)
 800232a:	f001 fc59 	bl	8003be0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800232e:	2200      	movs	r2, #0
 8002330:	2104      	movs	r1, #4
 8002332:	4809      	ldr	r0, [pc, #36]	@ (8002358 <LCD_IO_WriteReg+0x40>)
 8002334:	f001 fc54 	bl	8003be0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff feed 	bl	800211c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002342:	2201      	movs	r2, #1
 8002344:	2104      	movs	r1, #4
 8002346:	4804      	ldr	r0, [pc, #16]	@ (8002358 <LCD_IO_WriteReg+0x40>)
 8002348:	f001 fc4a 	bl	8003be0 <HAL_GPIO_WritePin>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40020c00 	.word	0x40020c00
 8002358:	40020800 	.word	0x40020800

0800235c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 ffd7 	bl	8003318 <HAL_Delay>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002378:	f000 ff5c 	bl	8003234 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 800237c:	f000 f83e 	bl	80023fc <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8002380:	f7fe f8fe 	bl	8000580 <ApplicationInit>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return
  Display_Start_Screen();
 8002384:	f7fe fa38 	bl	80007f8 <Display_Start_Screen>
  draw_board();
 8002388:	f7fe fc20 	bl	8000bcc <draw_board>
  while(Check_Start()==0) {
 800238c:	e002      	b.n	8002394 <main+0x22>
	  HAL_Delay(10);
 800238e:	200a      	movs	r0, #10
 8002390:	f000 ffc2 	bl	8003318 <HAL_Delay>
  while(Check_Start()==0) {
 8002394:	f7fe fa24 	bl	80007e0 <Check_Start>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f7      	beq.n	800238e <main+0x1c>
  }
  initialize_game();
 800239e:	f7fe fbaf 	bl	8000b00 <initialize_game>
  draw_board();
 80023a2:	f7fe fc13 	bl	8000bcc <draw_board>
  uint32_t events;

  while (1)
  {
	  move_down();
 80023a6:	f7fe fe1b 	bl	8000fe0 <move_down>
	  events = getScheduledEvents();
 80023aa:	f7ff fc19 	bl	8001be0 <getScheduledEvents>
 80023ae:	6078      	str	r0, [r7, #4]
	  if(events & ROTATE_EVENT) {
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <main+0x52>
		  rotate_tetromino();
 80023ba:	f7fe fcc9 	bl	8000d50 <rotate_tetromino>
		  removeSchedulerEvent(ROTATE_EVENT);
 80023be:	2002      	movs	r0, #2
 80023c0:	f7ff fbfa 	bl	8001bb8 <removeSchedulerEvent>
	  }
	  if(events & MOVE_LEFT_EVENT){
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d004      	beq.n	80023d8 <main+0x66>
		  move_left();
 80023ce:	f7fe fe63 	bl	8001098 <move_left>
		  removeSchedulerEvent(MOVE_LEFT_EVENT);
 80023d2:	2004      	movs	r0, #4
 80023d4:	f7ff fbf0 	bl	8001bb8 <removeSchedulerEvent>
	  }
	  if(events & MOVE_RIGHT_EVENT){
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <main+0x7a>
		  move_right();
 80023e2:	f7fe fe73 	bl	80010cc <move_right>
		  removeSchedulerEvent(MOVE_RIGHT_EVENT);
 80023e6:	2008      	movs	r0, #8
 80023e8:	f7ff fbe6 	bl	8001bb8 <removeSchedulerEvent>
	  }

	  draw_board();
 80023ec:	f7fe fbee 	bl	8000bcc <draw_board>
	  HAL_Delay(1000);
 80023f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023f4:	f000 ff90 	bl	8003318 <HAL_Delay>
	  move_down();
 80023f8:	e7d5      	b.n	80023a6 <main+0x34>
	...

080023fc <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b092      	sub	sp, #72	@ 0x48
 8002400:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	4b1c      	ldr	r3, [pc, #112]	@ (8002478 <SystemClockOverride+0x7c>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	4a1b      	ldr	r2, [pc, #108]	@ (8002478 <SystemClockOverride+0x7c>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	@ 0x40
 8002412:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <SystemClockOverride+0x7c>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800241e:	2301      	movs	r3, #1
 8002420:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002422:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002426:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002428:	2302      	movs	r3, #2
 800242a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800242c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002430:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002432:	2308      	movs	r3, #8
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002436:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800243a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800243c:	2302      	movs	r3, #2
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002440:	2307      	movs	r3, #7
 8002442:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	4618      	mov	r0, r3
 8002448:	f002 feae 	bl	80051a8 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800244c:	230f      	movs	r3, #15
 800244e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002450:	2302      	movs	r3, #2
 8002452:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002454:	2300      	movs	r3, #0
 8002456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002458:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800245c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800245e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002462:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002464:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002468:	2105      	movs	r1, #5
 800246a:	4618      	mov	r0, r3
 800246c:	f003 f914 	bl	8005698 <HAL_RCC_ClockConfig>
}
 8002470:	bf00      	nop
 8002472:	3748      	adds	r7, #72	@ 0x48
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800

0800247c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002480:	b672      	cpsid	i
}
 8002482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <Error_Handler+0x8>

08002488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <HAL_MspInit+0x4c>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	4a0f      	ldr	r2, [pc, #60]	@ (80024d4 <HAL_MspInit+0x4c>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800249c:	6453      	str	r3, [r2, #68]	@ 0x44
 800249e:	4b0d      	ldr	r3, [pc, #52]	@ (80024d4 <HAL_MspInit+0x4c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <HAL_MspInit+0x4c>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a08      	ldr	r2, [pc, #32]	@ (80024d4 <HAL_MspInit+0x4c>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_MspInit+0x4c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024c6:	2007      	movs	r0, #7
 80024c8:	f001 f85c 	bl	8003584 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800

080024d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	@ 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a29      	ldr	r2, [pc, #164]	@ (800259c <HAL_I2C_MspInit+0xc4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d14b      	bne.n	8002592 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b28      	ldr	r3, [pc, #160]	@ (80025a0 <HAL_I2C_MspInit+0xc8>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4a27      	ldr	r2, [pc, #156]	@ (80025a0 <HAL_I2C_MspInit+0xc8>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <HAL_I2C_MspInit+0xc8>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <HAL_I2C_MspInit+0xc8>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a20      	ldr	r2, [pc, #128]	@ (80025a0 <HAL_I2C_MspInit+0xc8>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b1e      	ldr	r3, [pc, #120]	@ (80025a0 <HAL_I2C_MspInit+0xc8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002532:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002538:	2312      	movs	r3, #18
 800253a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002544:	2304      	movs	r3, #4
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	4815      	ldr	r0, [pc, #84]	@ (80025a4 <HAL_I2C_MspInit+0xcc>)
 8002550:	f001 f88e 	bl	8003670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800255a:	2312      	movs	r3, #18
 800255c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002566:	2304      	movs	r3, #4
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	480d      	ldr	r0, [pc, #52]	@ (80025a8 <HAL_I2C_MspInit+0xd0>)
 8002572:	f001 f87d 	bl	8003670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <HAL_I2C_MspInit+0xc8>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	4a08      	ldr	r2, [pc, #32]	@ (80025a0 <HAL_I2C_MspInit+0xc8>)
 8002580:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002584:	6413      	str	r3, [r2, #64]	@ 0x40
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_I2C_MspInit+0xc8>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002592:	bf00      	nop
 8002594:	3728      	adds	r7, #40	@ 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40005c00 	.word	0x40005c00
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020800 	.word	0x40020800
 80025a8:	40020000 	.word	0x40020000

080025ac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b09a      	sub	sp, #104	@ 0x68
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c8:	2230      	movs	r2, #48	@ 0x30
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f004 f9cd 	bl	800696c <memset>
  if(hltdc->Instance==LTDC)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a85      	ldr	r2, [pc, #532]	@ (80027ec <HAL_LTDC_MspInit+0x240>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	f040 8102 	bne.w	80027e2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80025de:	2308      	movs	r3, #8
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80025e2:	2332      	movs	r3, #50	@ 0x32
 80025e4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80025e6:	2302      	movs	r3, #2
 80025e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80025ea:	2300      	movs	r3, #0
 80025ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fa5c 	bl	8005ab0 <HAL_RCCEx_PeriphCLKConfig>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80025fe:	f7ff ff3d 	bl	800247c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	4b7a      	ldr	r3, [pc, #488]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	4a79      	ldr	r2, [pc, #484]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 800260c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002610:	6453      	str	r3, [r2, #68]	@ 0x44
 8002612:	4b77      	ldr	r3, [pc, #476]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	4b73      	ldr	r3, [pc, #460]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	4a72      	ldr	r2, [pc, #456]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002628:	f043 0320 	orr.w	r3, r3, #32
 800262c:	6313      	str	r3, [r2, #48]	@ 0x30
 800262e:	4b70      	ldr	r3, [pc, #448]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	4b6c      	ldr	r3, [pc, #432]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	4a6b      	ldr	r2, [pc, #428]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6313      	str	r3, [r2, #48]	@ 0x30
 800264a:	4b69      	ldr	r3, [pc, #420]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	4b65      	ldr	r3, [pc, #404]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a64      	ldr	r2, [pc, #400]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b62      	ldr	r3, [pc, #392]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	4b5e      	ldr	r3, [pc, #376]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	4a5d      	ldr	r2, [pc, #372]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 800267c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002680:	6313      	str	r3, [r2, #48]	@ 0x30
 8002682:	4b5b      	ldr	r3, [pc, #364]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b57      	ldr	r3, [pc, #348]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	4a56      	ldr	r2, [pc, #344]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6313      	str	r3, [r2, #48]	@ 0x30
 800269e:	4b54      	ldr	r3, [pc, #336]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	4b50      	ldr	r3, [pc, #320]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	4a4f      	ldr	r2, [pc, #316]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ba:	4b4d      	ldr	r3, [pc, #308]	@ (80027f0 <HAL_LTDC_MspInit+0x244>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80026c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026ca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026d8:	230e      	movs	r3, #14
 80026da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80026dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026e0:	4619      	mov	r1, r3
 80026e2:	4844      	ldr	r0, [pc, #272]	@ (80027f4 <HAL_LTDC_MspInit+0x248>)
 80026e4:	f000 ffc4 	bl	8003670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80026e8:	f641 0358 	movw	r3, #6232	@ 0x1858
 80026ec:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026fa:	230e      	movs	r3, #14
 80026fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002702:	4619      	mov	r1, r3
 8002704:	483c      	ldr	r0, [pc, #240]	@ (80027f8 <HAL_LTDC_MspInit+0x24c>)
 8002706:	f000 ffb3 	bl	8003670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800270a:	2303      	movs	r3, #3
 800270c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800271a:	2309      	movs	r3, #9
 800271c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002722:	4619      	mov	r1, r3
 8002724:	4835      	ldr	r0, [pc, #212]	@ (80027fc <HAL_LTDC_MspInit+0x250>)
 8002726:	f000 ffa3 	bl	8003670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800272a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800272e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800273c:	230e      	movs	r3, #14
 800273e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002740:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002744:	4619      	mov	r1, r3
 8002746:	482d      	ldr	r0, [pc, #180]	@ (80027fc <HAL_LTDC_MspInit+0x250>)
 8002748:	f000 ff92 	bl	8003670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800274c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002750:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800275e:	230e      	movs	r3, #14
 8002760:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002762:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002766:	4619      	mov	r1, r3
 8002768:	4825      	ldr	r0, [pc, #148]	@ (8002800 <HAL_LTDC_MspInit+0x254>)
 800276a:	f000 ff81 	bl	8003670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800276e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002772:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002780:	230e      	movs	r3, #14
 8002782:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002784:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002788:	4619      	mov	r1, r3
 800278a:	481e      	ldr	r0, [pc, #120]	@ (8002804 <HAL_LTDC_MspInit+0x258>)
 800278c:	f000 ff70 	bl	8003670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002790:	2348      	movs	r3, #72	@ 0x48
 8002792:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027a0:	230e      	movs	r3, #14
 80027a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027a8:	4619      	mov	r1, r3
 80027aa:	4817      	ldr	r0, [pc, #92]	@ (8002808 <HAL_LTDC_MspInit+0x25c>)
 80027ac:	f000 ff60 	bl	8003670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80027b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027b4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80027c2:	2309      	movs	r3, #9
 80027c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027ca:	4619      	mov	r1, r3
 80027cc:	480c      	ldr	r0, [pc, #48]	@ (8002800 <HAL_LTDC_MspInit+0x254>)
 80027ce:	f000 ff4f 	bl	8003670 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	2058      	movs	r0, #88	@ 0x58
 80027d8:	f000 fedf 	bl	800359a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80027dc:	2058      	movs	r0, #88	@ 0x58
 80027de:	f000 fef8 	bl	80035d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80027e2:	bf00      	nop
 80027e4:	3768      	adds	r7, #104	@ 0x68
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40016800 	.word	0x40016800
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40021400 	.word	0x40021400
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40021800 	.word	0x40021800
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00

0800280c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0b      	ldr	r2, [pc, #44]	@ (8002848 <HAL_RNG_MspInit+0x3c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10d      	bne.n	800283a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <HAL_RNG_MspInit+0x40>)
 8002824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002826:	4a09      	ldr	r2, [pc, #36]	@ (800284c <HAL_RNG_MspInit+0x40>)
 8002828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800282c:	6353      	str	r3, [r2, #52]	@ 0x34
 800282e:	4b07      	ldr	r3, [pc, #28]	@ (800284c <HAL_RNG_MspInit+0x40>)
 8002830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	50060800 	.word	0x50060800
 800284c:	40023800 	.word	0x40023800

08002850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	@ 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a19      	ldr	r2, [pc, #100]	@ (80028d4 <HAL_SPI_MspInit+0x84>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d12c      	bne.n	80028cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	4b18      	ldr	r3, [pc, #96]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	4a17      	ldr	r2, [pc, #92]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 800287c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002880:	6453      	str	r3, [r2, #68]	@ 0x44
 8002882:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	4a10      	ldr	r2, [pc, #64]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 8002898:	f043 0320 	orr.w	r3, r3, #32
 800289c:	6313      	str	r3, [r2, #48]	@ 0x30
 800289e:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80028aa:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80028ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80028bc:	2305      	movs	r3, #5
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	4805      	ldr	r0, [pc, #20]	@ (80028dc <HAL_SPI_MspInit+0x8c>)
 80028c8:	f000 fed2 	bl	8003670 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80028cc:	bf00      	nop
 80028ce:	3728      	adds	r7, #40	@ 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40015000 	.word	0x40015000
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40021400 	.word	0x40021400

080028e0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a08      	ldr	r2, [pc, #32]	@ (8002910 <HAL_SPI_MspDeInit+0x30>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10a      	bne.n	8002908 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80028f2:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <HAL_SPI_MspDeInit+0x34>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	4a07      	ldr	r2, [pc, #28]	@ (8002914 <HAL_SPI_MspDeInit+0x34>)
 80028f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80028fc:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80028fe:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002902:	4805      	ldr	r0, [pc, #20]	@ (8002918 <HAL_SPI_MspDeInit+0x38>)
 8002904:	f001 f860 	bl	80039c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40015000 	.word	0x40015000
 8002914:	40023800 	.word	0x40023800
 8002918:	40021400 	.word	0x40021400

0800291c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <NMI_Handler+0x4>

08002924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <HardFault_Handler+0x4>

0800292c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <MemManage_Handler+0x4>

08002934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <BusFault_Handler+0x4>

0800293c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <UsageFault_Handler+0x4>

08002944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002972:	f000 fcb1 	bl	80032d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db0b      	blt.n	80029a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4907      	ldr	r1, [pc, #28]	@ (80029b4 <__NVIC_EnableIRQ+0x38>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f202 	lsl.w	r2, r0, r2
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports
    I2C3_MspInit();
 80029be:	f000 f9dd 	bl	8002d7c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80029c2:	f000 f99d 	bl	8002d00 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80029c6:	2202      	movs	r2, #2
 80029c8:	2103      	movs	r1, #3
 80029ca:	2082      	movs	r0, #130	@ 0x82
 80029cc:	f000 fa2a 	bl	8002e24 <I2C3_Write>
    HAL_Delay(5);
 80029d0:	2005      	movs	r0, #5
 80029d2:	f000 fca1 	bl	8003318 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2103      	movs	r1, #3
 80029da:	2082      	movs	r0, #130	@ 0x82
 80029dc:	f000 fa22 	bl	8002e24 <I2C3_Write>
    HAL_Delay(2);
 80029e0:	2002      	movs	r0, #2
 80029e2:	f000 fc99 	bl	8003318 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80029e6:	1cba      	adds	r2, r7, #2
 80029e8:	2302      	movs	r3, #2
 80029ea:	2100      	movs	r1, #0
 80029ec:	2082      	movs	r0, #130	@ 0x82
 80029ee:	f000 fa69 	bl	8002ec4 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	f640 0211 	movw	r2, #2065	@ 0x811
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d001      	beq.n	8002a12 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e095      	b.n	8002b3e <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002a12:	2202      	movs	r2, #2
 8002a14:	2103      	movs	r1, #3
 8002a16:	2082      	movs	r0, #130	@ 0x82
 8002a18:	f000 fa04 	bl	8002e24 <I2C3_Write>
    HAL_Delay(5);
 8002a1c:	2005      	movs	r0, #5
 8002a1e:	f000 fc7b 	bl	8003318 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2103      	movs	r1, #3
 8002a26:	2082      	movs	r0, #130	@ 0x82
 8002a28:	f000 f9fc 	bl	8002e24 <I2C3_Write>
    HAL_Delay(2);
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	f000 fc73 	bl	8003318 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002a32:	2004      	movs	r0, #4
 8002a34:	f000 f887 	bl	8002b46 <STMPE811_Read>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002a3c:	797b      	ldrb	r3, [r7, #5]
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002a44:	797b      	ldrb	r3, [r7, #5]
 8002a46:	461a      	mov	r2, r3
 8002a48:	2104      	movs	r1, #4
 8002a4a:	2082      	movs	r0, #130	@ 0x82
 8002a4c:	f000 f9ea 	bl	8002e24 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002a50:	2004      	movs	r0, #4
 8002a52:	f000 f878 	bl	8002b46 <STMPE811_Read>
 8002a56:	4603      	mov	r3, r0
 8002a58:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002a5a:	797b      	ldrb	r3, [r7, #5]
 8002a5c:	f023 0302 	bic.w	r3, r3, #2
 8002a60:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002a62:	797b      	ldrb	r3, [r7, #5]
 8002a64:	461a      	mov	r2, r3
 8002a66:	2104      	movs	r1, #4
 8002a68:	2082      	movs	r0, #130	@ 0x82
 8002a6a:	f000 f9db 	bl	8002e24 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002a6e:	2249      	movs	r2, #73	@ 0x49
 8002a70:	2120      	movs	r1, #32
 8002a72:	2082      	movs	r0, #130	@ 0x82
 8002a74:	f000 f9d6 	bl	8002e24 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002a78:	2002      	movs	r0, #2
 8002a7a:	f000 fc4d 	bl	8003318 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002a7e:	2201      	movs	r2, #1
 8002a80:	2121      	movs	r1, #33	@ 0x21
 8002a82:	2082      	movs	r0, #130	@ 0x82
 8002a84:	f000 f9ce 	bl	8002e24 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002a88:	2017      	movs	r0, #23
 8002a8a:	f000 f85c 	bl	8002b46 <STMPE811_Read>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002a92:	797b      	ldrb	r3, [r7, #5]
 8002a94:	f043 031e 	orr.w	r3, r3, #30
 8002a98:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002a9a:	797b      	ldrb	r3, [r7, #5]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2117      	movs	r1, #23
 8002aa0:	2082      	movs	r0, #130	@ 0x82
 8002aa2:	f000 f9bf 	bl	8002e24 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002aa6:	229a      	movs	r2, #154	@ 0x9a
 8002aa8:	2141      	movs	r1, #65	@ 0x41
 8002aaa:	2082      	movs	r0, #130	@ 0x82
 8002aac:	f000 f9ba 	bl	8002e24 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	214a      	movs	r1, #74	@ 0x4a
 8002ab4:	2082      	movs	r0, #130	@ 0x82
 8002ab6:	f000 f9b5 	bl	8002e24 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002aba:	2201      	movs	r2, #1
 8002abc:	214b      	movs	r1, #75	@ 0x4b
 8002abe:	2082      	movs	r0, #130	@ 0x82
 8002ac0:	f000 f9b0 	bl	8002e24 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	214b      	movs	r1, #75	@ 0x4b
 8002ac8:	2082      	movs	r0, #130	@ 0x82
 8002aca:	f000 f9ab 	bl	8002e24 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002ace:	2201      	movs	r2, #1
 8002ad0:	2156      	movs	r1, #86	@ 0x56
 8002ad2:	2082      	movs	r0, #130	@ 0x82
 8002ad4:	f000 f9a6 	bl	8002e24 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2158      	movs	r1, #88	@ 0x58
 8002adc:	2082      	movs	r0, #130	@ 0x82
 8002ade:	f000 f9a1 	bl	8002e24 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	2140      	movs	r1, #64	@ 0x40
 8002ae6:	2082      	movs	r0, #130	@ 0x82
 8002ae8:	f000 f99c 	bl	8002e24 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002aec:	22ff      	movs	r2, #255	@ 0xff
 8002aee:	210b      	movs	r1, #11
 8002af0:	2082      	movs	r0, #130	@ 0x82
 8002af2:	f000 f997 	bl	8002e24 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8002af6:	f000 f8c1 	bl	8002c7c <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8002afa:	2009      	movs	r0, #9
 8002afc:	f000 f823 	bl	8002b46 <STMPE811_Read>
 8002b00:	4603      	mov	r3, r0
 8002b02:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002b04:	797b      	ldrb	r3, [r7, #5]
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8002b0c:	797b      	ldrb	r3, [r7, #5]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	2109      	movs	r1, #9
 8002b12:	2082      	movs	r0, #130	@ 0x82
 8002b14:	f000 f986 	bl	8002e24 <I2C3_Write>

    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8002b18:	200a      	movs	r0, #10
 8002b1a:	f000 f814 	bl	8002b46 <STMPE811_Read>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002b22:	797b      	ldrb	r3, [r7, #5]
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8002b2a:	797b      	ldrb	r3, [r7, #5]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	210a      	movs	r1, #10
 8002b30:	2082      	movs	r0, #130	@ 0x82
 8002b32:	f000 f977 	bl	8002e24 <I2C3_Write>

    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT

    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002b36:	20c8      	movs	r0, #200	@ 0xc8
 8002b38:	f000 fbee 	bl	8003318 <HAL_Delay>

    return STMPE811_State_Ok;
 8002b3c:	2302      	movs	r3, #2

}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002b50:	f107 020f 	add.w	r2, r7, #15
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4619      	mov	r1, r3
 8002b58:	2082      	movs	r0, #130	@ 0x82
 8002b5a:	f000 f98d 	bl	8002e78 <I2C3_Read>

    return readData;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	460a      	mov	r2, r1
 8002b72:	71fb      	strb	r3, [r7, #7]
 8002b74:	4613      	mov	r3, r2
 8002b76:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8002b78:	79ba      	ldrb	r2, [r7, #6]
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	2082      	movs	r0, #130	@ 0x82
 8002b80:	f000 f950 	bl	8002e24 <I2C3_Write>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	799b      	ldrb	r3, [r3, #6]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d117      	bne.n	8002bcc <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f9b1 	bl	8002f08 <TM_STMPE811_ReadX>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	885b      	ldrh	r3, [r3, #2]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fa04 	bl	8002fc4 <TM_STMPE811_ReadY>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	805a      	strh	r2, [r3, #2]
 8002bca:	e048      	b.n	8002c5e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	799b      	ldrb	r3, [r3, #6]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d112      	bne.n	8002bfa <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f995 	bl	8002f08 <TM_STMPE811_ReadX>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	885b      	ldrh	r3, [r3, #2]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f9ea 	bl	8002fc4 <TM_STMPE811_ReadY>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	805a      	strh	r2, [r3, #2]
 8002bf8:	e031      	b.n	8002c5e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	799b      	ldrb	r3, [r3, #6]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d115      	bne.n	8002c2e <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	885b      	ldrh	r3, [r3, #2]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f97e 	bl	8002f08 <TM_STMPE811_ReadX>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f9d3 	bl	8002fc4 <TM_STMPE811_ReadY>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002c24:	3301      	adds	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	801a      	strh	r2, [r3, #0]
 8002c2c:	e017      	b.n	8002c5e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	799b      	ldrb	r3, [r3, #6]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d113      	bne.n	8002c5e <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f964 	bl	8002f08 <TM_STMPE811_ReadX>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f9b7 	bl	8002fc4 <TM_STMPE811_ReadY>
 8002c56:	4603      	mov	r3, r0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002c5e:	2201      	movs	r2, #1
 8002c60:	214b      	movs	r1, #75	@ 0x4b
 8002c62:	2082      	movs	r0, #130	@ 0x82
 8002c64:	f000 f8de 	bl	8002e24 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	214b      	movs	r1, #75	@ 0x4b
 8002c6c:	2082      	movs	r0, #130	@ 0x82
 8002c6e:	f000 f8d9 	bl	8002e24 <I2C3_Write>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <enableInterruptSupportForTouch+0x5c>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	4a13      	ldr	r2, [pc, #76]	@ (8002cd8 <enableInterruptSupportForTouch+0x5c>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c92:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <enableInterruptSupportForTouch+0x5c>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cb0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002cb2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002cb6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4805      	ldr	r0, [pc, #20]	@ (8002cdc <enableInterruptSupportForTouch+0x60>)
 8002cc6:	f000 fcd3 	bl	8003670 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cca:	2028      	movs	r0, #40	@ 0x28
 8002ccc:	f7ff fe56 	bl	800297c <__NVIC_EnableIRQ>

}
 8002cd0:	bf00      	nop
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020000 	.word	0x40020000

08002ce0 <verifyHAL_I2C_IS_OKAY>:

#endif


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002ce4:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20025b40 	.word	0x20025b40

08002d00 <I2C3_Init>:

static void I2C3_Init()
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4b18      	ldr	r3, [pc, #96]	@ (8002d6c <I2C3_Init+0x6c>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	4a17      	ldr	r2, [pc, #92]	@ (8002d6c <I2C3_Init+0x6c>)
 8002d10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d16:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <I2C3_Init+0x6c>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002d22:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <I2C3_Init+0x70>)
 8002d24:	4a13      	ldr	r2, [pc, #76]	@ (8002d74 <I2C3_Init+0x74>)
 8002d26:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002d28:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <I2C3_Init+0x70>)
 8002d2a:	4a13      	ldr	r2, [pc, #76]	@ (8002d78 <I2C3_Init+0x78>)
 8002d2c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d2e:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <I2C3_Init+0x70>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002d34:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <I2C3_Init+0x70>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <I2C3_Init+0x70>)
 8002d3c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d40:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002d42:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <I2C3_Init+0x70>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d48:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <I2C3_Init+0x70>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode?

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002d4e:	4808      	ldr	r0, [pc, #32]	@ (8002d70 <I2C3_Init+0x70>)
 8002d50:	f000 ff60 	bl	8003c14 <HAL_I2C_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002d5e:	bf00      	nop
 8002d60:	e7fd      	b.n	8002d5e <I2C3_Init+0x5e>
    }
    return;
 8002d62:	bf00      	nop
}
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	20025aec 	.word	0x20025aec
 8002d74:	40005c00 	.word	0x40005c00
 8002d78:	000186a0 	.word	0x000186a0

08002d7c <I2C3_MspInit>:

// GPIO Initializations
static void I2C3_MspInit(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d82:	f107 030c 	add.w	r3, r7, #12
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <I2C3_MspInit+0x9c>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002e18 <I2C3_MspInit+0x9c>)
 8002d9c:	f043 0304 	orr.w	r3, r3, #4
 8002da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e18 <I2C3_MspInit+0x9c>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]

    // GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	4b19      	ldr	r3, [pc, #100]	@ (8002e18 <I2C3_MspInit+0x9c>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	4a18      	ldr	r2, [pc, #96]	@ (8002e18 <I2C3_MspInit+0x9c>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dbe:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <I2C3_MspInit+0x9c>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002dca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd0:	2312      	movs	r3, #18
 8002dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ddc:	2304      	movs	r3, #4
 8002dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002de0:	f107 030c 	add.w	r3, r7, #12
 8002de4:	4619      	mov	r1, r3
 8002de6:	480d      	ldr	r0, [pc, #52]	@ (8002e1c <I2C3_MspInit+0xa0>)
 8002de8:	f000 fc42 	bl	8003670 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002dec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002df0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002df2:	2312      	movs	r3, #18
 8002df4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dfe:	2304      	movs	r3, #4
 8002e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e02:	f107 030c 	add.w	r3, r7, #12
 8002e06:	4619      	mov	r1, r3
 8002e08:	4805      	ldr	r0, [pc, #20]	@ (8002e20 <I2C3_MspInit+0xa4>)
 8002e0a:	f000 fc31 	bl	8003670 <HAL_GPIO_Init>

}
 8002e0e:	bf00      	nop
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020000 	.word	0x40020000

08002e24 <I2C3_Write>:

// This function should only be used for single BYTE transfers
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af04      	add	r7, sp, #16
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	717b      	strb	r3, [r7, #5]
 8002e32:	4613      	mov	r3, r2
 8002e34:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002e36:	793b      	ldrb	r3, [r7, #4]
 8002e38:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call?
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002e3a:	797b      	ldrb	r3, [r7, #5]
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	88f9      	ldrh	r1, [r7, #6]
 8002e40:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <I2C3_Write+0x48>)
 8002e42:	9302      	str	r3, [sp, #8]
 8002e44:	2301      	movs	r3, #1
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	f107 030f 	add.w	r3, r7, #15
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4807      	ldr	r0, [pc, #28]	@ (8002e70 <I2C3_Write+0x4c>)
 8002e52:	f001 f823 	bl	8003e9c <HAL_I2C_Mem_Write>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <I2C3_Write+0x50>)
 8002e5c:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002e5e:	f7ff ff3f 	bl	8002ce0 <verifyHAL_I2C_IS_OKAY>
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	0003d090 	.word	0x0003d090
 8002e70:	20025aec 	.word	0x20025aec
 8002e74:	20025b40 	.word	0x20025b40

08002e78 <I2C3_Read>:

// This function should only be used for single BYTE transfers
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af04      	add	r7, sp, #16
 8002e7e:	4603      	mov	r3, r0
 8002e80:	603a      	str	r2, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
 8002e84:	460b      	mov	r3, r1
 8002e86:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	b299      	uxth	r1, r3
 8002e8c:	79bb      	ldrb	r3, [r7, #6]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <I2C3_Read+0x40>)
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	2301      	movs	r3, #1
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	4807      	ldr	r0, [pc, #28]	@ (8002ebc <I2C3_Read+0x44>)
 8002ea0:	f001 f8f6 	bl	8004090 <HAL_I2C_Mem_Read>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <I2C3_Read+0x48>)
 8002eaa:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002eac:	f7ff ff18 	bl	8002ce0 <verifyHAL_I2C_IS_OKAY>
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	0003d090 	.word	0x0003d090
 8002ebc:	20025aec 	.word	0x20025aec
 8002ec0:	20025b40 	.word	0x20025b40

08002ec4 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af04      	add	r7, sp, #16
 8002eca:	603a      	str	r2, [r7, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	71bb      	strb	r3, [r7, #6]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	b299      	uxth	r1, r3
 8002ede:	79bb      	ldrb	r3, [r7, #6]
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <I2C3_MulitByteRead+0x3c>)
 8002ee4:	9302      	str	r3, [sp, #8]
 8002ee6:	88bb      	ldrh	r3, [r7, #4]
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	4804      	ldr	r0, [pc, #16]	@ (8002f04 <I2C3_MulitByteRead+0x40>)
 8002ef2:	f001 f8cd 	bl	8004090 <HAL_I2C_Mem_Read>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	0003d090 	.word	0x0003d090
 8002f04:	20025aec 	.word	0x20025aec

08002f08 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002f12:	204d      	movs	r0, #77	@ 0x4d
 8002f14:	f7ff fe17 	bl	8002b46 <STMPE811_Read>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002f1c:	204e      	movs	r0, #78	@ 0x4e
 8002f1e:	f7ff fe12 	bl	8002b46 <STMPE811_Read>
 8002f22:	4603      	mov	r3, r0
 8002f24:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002f26:	7a7b      	ldrb	r3, [r7, #9]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b21a      	sxth	r2, r3
 8002f2c:	7a3b      	ldrb	r3, [r7, #8]
 8002f2e:	b21b      	sxth	r3, r3
 8002f30:	4313      	orrs	r3, r2
 8002f32:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002f34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f38:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	dc06      	bgt.n	8002f4e <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002f40:	89fb      	ldrh	r3, [r7, #14]
 8002f42:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002f46:	330c      	adds	r3, #12
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	81fb      	strh	r3, [r7, #14]
 8002f4c:	e005      	b.n	8002f5a <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002f54:	3308      	adds	r3, #8
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f5e:	4a18      	ldr	r2, [pc, #96]	@ (8002fc0 <TM_STMPE811_ReadX+0xb8>)
 8002f60:	fb82 1203 	smull	r1, r2, r2, r3
 8002f64:	441a      	add	r2, r3
 8002f66:	10d2      	asrs	r2, r2, #3
 8002f68:	17db      	asrs	r3, r3, #31
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002f6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f72:	2bef      	cmp	r3, #239	@ 0xef
 8002f74:	dd02      	ble.n	8002f7c <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002f76:	23ef      	movs	r3, #239	@ 0xef
 8002f78:	81fb      	strh	r3, [r7, #14]
 8002f7a:	e005      	b.n	8002f88 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002f7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da01      	bge.n	8002f88 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002f88:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	dd05      	ble.n	8002f9e <TM_STMPE811_ReadX+0x96>
 8002f92:	89fa      	ldrh	r2, [r7, #14]
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	b21b      	sxth	r3, r3
 8002f9c:	e004      	b.n	8002fa8 <TM_STMPE811_ReadX+0xa0>
 8002f9e:	89fb      	ldrh	r3, [r7, #14]
 8002fa0:	88fa      	ldrh	r2, [r7, #6]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002faa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	dd01      	ble.n	8002fb6 <TM_STMPE811_ReadX+0xae>
        return val;
 8002fb2:	89fb      	ldrh	r3, [r7, #14]
 8002fb4:	e000      	b.n	8002fb8 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	88888889 	.word	0x88888889

08002fc4 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002fce:	204f      	movs	r0, #79	@ 0x4f
 8002fd0:	f7ff fdb9 	bl	8002b46 <STMPE811_Read>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002fd8:	2050      	movs	r0, #80	@ 0x50
 8002fda:	f7ff fdb4 	bl	8002b46 <STMPE811_Read>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002fe2:	7a7b      	ldrb	r3, [r7, #9]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	b21a      	sxth	r2, r3
 8002fe8:	7a3b      	ldrb	r3, [r7, #8]
 8002fea:	b21b      	sxth	r3, r3
 8002fec:	4313      	orrs	r3, r2
 8002fee:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002ff0:	89fb      	ldrh	r3, [r7, #14]
 8002ff2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002ffa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ffe:	4a19      	ldr	r2, [pc, #100]	@ (8003064 <TM_STMPE811_ReadY+0xa0>)
 8003000:	fb82 1203 	smull	r1, r2, r2, r3
 8003004:	1052      	asrs	r2, r2, #1
 8003006:	17db      	asrs	r3, r3, #31
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800300c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003010:	2b00      	cmp	r3, #0
 8003012:	dc02      	bgt.n	800301a <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	81fb      	strh	r3, [r7, #14]
 8003018:	e007      	b.n	800302a <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800301a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800301e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003022:	db02      	blt.n	800302a <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003024:	f240 133f 	movw	r3, #319	@ 0x13f
 8003028:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800302a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	429a      	cmp	r2, r3
 8003032:	dd05      	ble.n	8003040 <TM_STMPE811_ReadY+0x7c>
 8003034:	89fa      	ldrh	r2, [r7, #14]
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	b29b      	uxth	r3, r3
 800303c:	b21b      	sxth	r3, r3
 800303e:	e004      	b.n	800304a <TM_STMPE811_ReadY+0x86>
 8003040:	89fb      	ldrh	r3, [r7, #14]
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	b29b      	uxth	r3, r3
 8003048:	b21b      	sxth	r3, r3
 800304a:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 800304c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003050:	2b04      	cmp	r3, #4
 8003052:	dd01      	ble.n	8003058 <TM_STMPE811_ReadY+0x94>
        return val;
 8003054:	89fb      	ldrh	r3, [r7, #14]
 8003056:	e000      	b.n	800305a <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003058:	88fb      	ldrh	r3, [r7, #6]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	2e8ba2e9 	.word	0x2e8ba2e9

08003068 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e00a      	b.n	800309e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003088:	f3af 8000 	nop.w
 800308c:	4601      	mov	r1, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	60ba      	str	r2, [r7, #8]
 8003094:	b2ca      	uxtb	r2, r1
 8003096:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3301      	adds	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	dbf0      	blt.n	8003088 <_read+0x12>
  }

  return len;
 80030a6:	687b      	ldr	r3, [r7, #4]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	e009      	b.n	80030d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	60ba      	str	r2, [r7, #8]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3301      	adds	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	429a      	cmp	r2, r3
 80030dc:	dbf1      	blt.n	80030c2 <_write+0x12>
  }
  return len;
 80030de:	687b      	ldr	r3, [r7, #4]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_close>:

int _close(int file)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003110:	605a      	str	r2, [r3, #4]
  return 0;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <_isatty>:

int _isatty(int file)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003128:	2301      	movs	r3, #1
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003136:	b480      	push	{r7}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003158:	4a14      	ldr	r2, [pc, #80]	@ (80031ac <_sbrk+0x5c>)
 800315a:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <_sbrk+0x60>)
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003164:	4b13      	ldr	r3, [pc, #76]	@ (80031b4 <_sbrk+0x64>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800316c:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <_sbrk+0x64>)
 800316e:	4a12      	ldr	r2, [pc, #72]	@ (80031b8 <_sbrk+0x68>)
 8003170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003172:	4b10      	ldr	r3, [pc, #64]	@ (80031b4 <_sbrk+0x64>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	429a      	cmp	r2, r3
 800317e:	d207      	bcs.n	8003190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003180:	f003 fc42 	bl	8006a08 <__errno>
 8003184:	4603      	mov	r3, r0
 8003186:	220c      	movs	r2, #12
 8003188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	e009      	b.n	80031a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003190:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <_sbrk+0x64>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003196:	4b07      	ldr	r3, [pc, #28]	@ (80031b4 <_sbrk+0x64>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	4a05      	ldr	r2, [pc, #20]	@ (80031b4 <_sbrk+0x64>)
 80031a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031a2:	68fb      	ldr	r3, [r7, #12]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20030000 	.word	0x20030000
 80031b0:	00000400 	.word	0x00000400
 80031b4:	20025b44 	.word	0x20025b44
 80031b8:	20025c98 	.word	0x20025c98

080031bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c0:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <SystemInit+0x20>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c6:	4a05      	ldr	r2, [pc, #20]	@ (80031dc <SystemInit+0x20>)
 80031c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80031e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003218 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031e4:	f7ff ffea 	bl	80031bc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031e8:	480c      	ldr	r0, [pc, #48]	@ (800321c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031ea:	490d      	ldr	r1, [pc, #52]	@ (8003220 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003224 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f0:	e002      	b.n	80031f8 <LoopCopyDataInit>

080031f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031f6:	3304      	adds	r3, #4

080031f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031fc:	d3f9      	bcc.n	80031f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003228 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003200:	4c0a      	ldr	r4, [pc, #40]	@ (800322c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003204:	e001      	b.n	800320a <LoopFillZerobss>

08003206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003208:	3204      	adds	r2, #4

0800320a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800320a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800320c:	d3fb      	bcc.n	8003206 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800320e:	f003 fc01 	bl	8006a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003212:	f7ff f8ae 	bl	8002372 <main>
  bx  lr    
 8003216:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003218:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800321c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003220:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8003224:	08008a7c 	.word	0x08008a7c
  ldr r2, =_sbss
 8003228:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 800322c:	20025c98 	.word	0x20025c98

08003230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003230:	e7fe      	b.n	8003230 <ADC_IRQHandler>
	...

08003234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003238:	4b0e      	ldr	r3, [pc, #56]	@ (8003274 <HAL_Init+0x40>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0d      	ldr	r2, [pc, #52]	@ (8003274 <HAL_Init+0x40>)
 800323e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_Init+0x40>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0a      	ldr	r2, [pc, #40]	@ (8003274 <HAL_Init+0x40>)
 800324a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800324e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003250:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a07      	ldr	r2, [pc, #28]	@ (8003274 <HAL_Init+0x40>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800325c:	2003      	movs	r0, #3
 800325e:	f000 f991 	bl	8003584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003262:	2000      	movs	r0, #0
 8003264:	f000 f808 	bl	8003278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003268:	f7ff f90e 	bl	8002488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023c00 	.word	0x40023c00

08003278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003280:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <HAL_InitTick+0x54>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <HAL_InitTick+0x58>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800328e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f9b7 	bl	800360a <HAL_SYSTICK_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00e      	b.n	80032c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b0f      	cmp	r3, #15
 80032aa:	d80a      	bhi.n	80032c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ac:	2200      	movs	r2, #0
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f000 f971 	bl	800359a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032b8:	4a06      	ldr	r2, [pc, #24]	@ (80032d4 <HAL_InitTick+0x5c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000080 	.word	0x20000080
 80032d0:	20000088 	.word	0x20000088
 80032d4:	20000084 	.word	0x20000084

080032d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032dc:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <HAL_IncTick+0x20>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_IncTick+0x24>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	4a04      	ldr	r2, [pc, #16]	@ (80032fc <HAL_IncTick+0x24>)
 80032ea:	6013      	str	r3, [r2, #0]
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000088 	.word	0x20000088
 80032fc:	20025b48 	.word	0x20025b48

08003300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return uwTick;
 8003304:	4b03      	ldr	r3, [pc, #12]	@ (8003314 <HAL_GetTick+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20025b48 	.word	0x20025b48

08003318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff ffee 	bl	8003300 <HAL_GetTick>
 8003324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d005      	beq.n	800333e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003332:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <HAL_Delay+0x44>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800333e:	bf00      	nop
 8003340:	f7ff ffde 	bl	8003300 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	429a      	cmp	r2, r3
 800334e:	d8f7      	bhi.n	8003340 <HAL_Delay+0x28>
  {
  }
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000088 	.word	0x20000088

08003360 <__NVIC_SetPriorityGrouping>:
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_EnableIRQ>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db0b      	blt.n	80033ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4907      	ldr	r1, [pc, #28]	@ (80033fc <__NVIC_EnableIRQ+0x38>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000e100 	.word	0xe000e100

08003400 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	2b00      	cmp	r3, #0
 8003410:	db12      	blt.n	8003438 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	490a      	ldr	r1, [pc, #40]	@ (8003444 <__NVIC_DisableIRQ+0x44>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2001      	movs	r0, #1
 8003422:	fa00 f202 	lsl.w	r2, r0, r2
 8003426:	3320      	adds	r3, #32
 8003428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800342c:	f3bf 8f4f 	dsb	sy
}
 8003430:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003432:	f3bf 8f6f 	isb	sy
}
 8003436:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000e100 	.word	0xe000e100

08003448 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	2b00      	cmp	r3, #0
 8003458:	db0c      	blt.n	8003474 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	f003 021f 	and.w	r2, r3, #31
 8003460:	4907      	ldr	r1, [pc, #28]	@ (8003480 <__NVIC_ClearPendingIRQ+0x38>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2001      	movs	r0, #1
 800346a:	fa00 f202 	lsl.w	r2, r0, r2
 800346e:	3360      	adds	r3, #96	@ 0x60
 8003470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100

08003484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	6039      	str	r1, [r7, #0]
 800348e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003494:	2b00      	cmp	r3, #0
 8003496:	db0a      	blt.n	80034ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	490c      	ldr	r1, [pc, #48]	@ (80034d0 <__NVIC_SetPriority+0x4c>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	0112      	lsls	r2, r2, #4
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	440b      	add	r3, r1
 80034a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034ac:	e00a      	b.n	80034c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4908      	ldr	r1, [pc, #32]	@ (80034d4 <__NVIC_SetPriority+0x50>)
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	3b04      	subs	r3, #4
 80034bc:	0112      	lsls	r2, r2, #4
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	440b      	add	r3, r1
 80034c2:	761a      	strb	r2, [r3, #24]
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000e100 	.word	0xe000e100
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d8:	b480      	push	{r7}
 80034da:	b089      	sub	sp, #36	@ 0x24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f1c3 0307 	rsb	r3, r3, #7
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	bf28      	it	cs
 80034f6:	2304      	movcs	r3, #4
 80034f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d902      	bls.n	8003508 <NVIC_EncodePriority+0x30>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3b03      	subs	r3, #3
 8003506:	e000      	b.n	800350a <NVIC_EncodePriority+0x32>
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	f04f 32ff 	mov.w	r2, #4294967295
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43da      	mvns	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	401a      	ands	r2, r3
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003520:	f04f 31ff 	mov.w	r1, #4294967295
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	43d9      	mvns	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003530:	4313      	orrs	r3, r2
         );
}
 8003532:	4618      	mov	r0, r3
 8003534:	3724      	adds	r7, #36	@ 0x24
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3b01      	subs	r3, #1
 800354c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003550:	d301      	bcc.n	8003556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003552:	2301      	movs	r3, #1
 8003554:	e00f      	b.n	8003576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003556:	4a0a      	ldr	r2, [pc, #40]	@ (8003580 <SysTick_Config+0x40>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800355e:	210f      	movs	r1, #15
 8003560:	f04f 30ff 	mov.w	r0, #4294967295
 8003564:	f7ff ff8e 	bl	8003484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003568:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <SysTick_Config+0x40>)
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800356e:	4b04      	ldr	r3, [pc, #16]	@ (8003580 <SysTick_Config+0x40>)
 8003570:	2207      	movs	r2, #7
 8003572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	e000e010 	.word	0xe000e010

08003584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fee7 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800359a:	b580      	push	{r7, lr}
 800359c:	b086      	sub	sp, #24
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035ac:	f7ff fefc 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 80035b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	6978      	ldr	r0, [r7, #20]
 80035b8:	f7ff ff8e 	bl	80034d8 <NVIC_EncodePriority>
 80035bc:	4602      	mov	r2, r0
 80035be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff5d 	bl	8003484 <__NVIC_SetPriority>
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff feef 	bl	80033c4 <__NVIC_EnableIRQ>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff feff 	bl	8003400 <__NVIC_DisableIRQ>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ff94 	bl	8003540 <SysTick_Config>
 8003618:	4603      	mov	r3, r0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff09 	bl	8003448 <__NVIC_ClearPendingIRQ>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2201      	movs	r2, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800365a:	4a04      	ldr	r2, [pc, #16]	@ (800366c <HAL_EXTI_ClearPending+0x2c>)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6153      	str	r3, [r2, #20]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40013c00 	.word	0x40013c00

08003670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	@ 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e177      	b.n	800397c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800368c:	2201      	movs	r2, #1
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	f040 8166 	bne.w	8003976 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d005      	beq.n	80036c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d130      	bne.n	8003724 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	2203      	movs	r2, #3
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f8:	2201      	movs	r2, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 0201 	and.w	r2, r3, #1
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b03      	cmp	r3, #3
 800372e:	d017      	beq.n	8003760 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d123      	bne.n	80037b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	08da      	lsrs	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3208      	adds	r2, #8
 8003774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	220f      	movs	r2, #15
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	08da      	lsrs	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3208      	adds	r2, #8
 80037ae:	69b9      	ldr	r1, [r7, #24]
 80037b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0203 	and.w	r2, r3, #3
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80c0 	beq.w	8003976 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	4b66      	ldr	r3, [pc, #408]	@ (8003994 <HAL_GPIO_Init+0x324>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fe:	4a65      	ldr	r2, [pc, #404]	@ (8003994 <HAL_GPIO_Init+0x324>)
 8003800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003804:	6453      	str	r3, [r2, #68]	@ 0x44
 8003806:	4b63      	ldr	r3, [pc, #396]	@ (8003994 <HAL_GPIO_Init+0x324>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003812:	4a61      	ldr	r2, [pc, #388]	@ (8003998 <HAL_GPIO_Init+0x328>)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	220f      	movs	r2, #15
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a58      	ldr	r2, [pc, #352]	@ (800399c <HAL_GPIO_Init+0x32c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d037      	beq.n	80038ae <HAL_GPIO_Init+0x23e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a57      	ldr	r2, [pc, #348]	@ (80039a0 <HAL_GPIO_Init+0x330>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d031      	beq.n	80038aa <HAL_GPIO_Init+0x23a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a56      	ldr	r2, [pc, #344]	@ (80039a4 <HAL_GPIO_Init+0x334>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d02b      	beq.n	80038a6 <HAL_GPIO_Init+0x236>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a55      	ldr	r2, [pc, #340]	@ (80039a8 <HAL_GPIO_Init+0x338>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d025      	beq.n	80038a2 <HAL_GPIO_Init+0x232>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a54      	ldr	r2, [pc, #336]	@ (80039ac <HAL_GPIO_Init+0x33c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01f      	beq.n	800389e <HAL_GPIO_Init+0x22e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a53      	ldr	r2, [pc, #332]	@ (80039b0 <HAL_GPIO_Init+0x340>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d019      	beq.n	800389a <HAL_GPIO_Init+0x22a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a52      	ldr	r2, [pc, #328]	@ (80039b4 <HAL_GPIO_Init+0x344>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_GPIO_Init+0x226>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a51      	ldr	r2, [pc, #324]	@ (80039b8 <HAL_GPIO_Init+0x348>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00d      	beq.n	8003892 <HAL_GPIO_Init+0x222>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a50      	ldr	r2, [pc, #320]	@ (80039bc <HAL_GPIO_Init+0x34c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <HAL_GPIO_Init+0x21e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a4f      	ldr	r2, [pc, #316]	@ (80039c0 <HAL_GPIO_Init+0x350>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_GPIO_Init+0x21a>
 8003886:	2309      	movs	r3, #9
 8003888:	e012      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 800388a:	230a      	movs	r3, #10
 800388c:	e010      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 800388e:	2308      	movs	r3, #8
 8003890:	e00e      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 8003892:	2307      	movs	r3, #7
 8003894:	e00c      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 8003896:	2306      	movs	r3, #6
 8003898:	e00a      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 800389a:	2305      	movs	r3, #5
 800389c:	e008      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 800389e:	2304      	movs	r3, #4
 80038a0:	e006      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 80038a2:	2303      	movs	r3, #3
 80038a4:	e004      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e002      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 80038ae:	2300      	movs	r3, #0
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	f002 0203 	and.w	r2, r2, #3
 80038b6:	0092      	lsls	r2, r2, #2
 80038b8:	4093      	lsls	r3, r2
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038c0:	4935      	ldr	r1, [pc, #212]	@ (8003998 <HAL_GPIO_Init+0x328>)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	089b      	lsrs	r3, r3, #2
 80038c6:	3302      	adds	r3, #2
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ce:	4b3d      	ldr	r3, [pc, #244]	@ (80039c4 <HAL_GPIO_Init+0x354>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038f2:	4a34      	ldr	r2, [pc, #208]	@ (80039c4 <HAL_GPIO_Init+0x354>)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f8:	4b32      	ldr	r3, [pc, #200]	@ (80039c4 <HAL_GPIO_Init+0x354>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800391c:	4a29      	ldr	r2, [pc, #164]	@ (80039c4 <HAL_GPIO_Init+0x354>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003922:	4b28      	ldr	r3, [pc, #160]	@ (80039c4 <HAL_GPIO_Init+0x354>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003946:	4a1f      	ldr	r2, [pc, #124]	@ (80039c4 <HAL_GPIO_Init+0x354>)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800394c:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <HAL_GPIO_Init+0x354>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003970:	4a14      	ldr	r2, [pc, #80]	@ (80039c4 <HAL_GPIO_Init+0x354>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3301      	adds	r3, #1
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b0f      	cmp	r3, #15
 8003980:	f67f ae84 	bls.w	800368c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop
 8003988:	3724      	adds	r7, #36	@ 0x24
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40013800 	.word	0x40013800
 800399c:	40020000 	.word	0x40020000
 80039a0:	40020400 	.word	0x40020400
 80039a4:	40020800 	.word	0x40020800
 80039a8:	40020c00 	.word	0x40020c00
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40021400 	.word	0x40021400
 80039b4:	40021800 	.word	0x40021800
 80039b8:	40021c00 	.word	0x40021c00
 80039bc:	40022000 	.word	0x40022000
 80039c0:	40022400 	.word	0x40022400
 80039c4:	40013c00 	.word	0x40013c00

080039c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e0d9      	b.n	8003b98 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e4:	2201      	movs	r2, #1
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	f040 80c9 	bne.w	8003b92 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a00:	4a6b      	ldr	r2, [pc, #428]	@ (8003bb0 <HAL_GPIO_DeInit+0x1e8>)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	3302      	adds	r3, #2
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	220f      	movs	r2, #15
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a63      	ldr	r2, [pc, #396]	@ (8003bb4 <HAL_GPIO_DeInit+0x1ec>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d037      	beq.n	8003a9a <HAL_GPIO_DeInit+0xd2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a62      	ldr	r2, [pc, #392]	@ (8003bb8 <HAL_GPIO_DeInit+0x1f0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d031      	beq.n	8003a96 <HAL_GPIO_DeInit+0xce>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a61      	ldr	r2, [pc, #388]	@ (8003bbc <HAL_GPIO_DeInit+0x1f4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02b      	beq.n	8003a92 <HAL_GPIO_DeInit+0xca>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a60      	ldr	r2, [pc, #384]	@ (8003bc0 <HAL_GPIO_DeInit+0x1f8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d025      	beq.n	8003a8e <HAL_GPIO_DeInit+0xc6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a5f      	ldr	r2, [pc, #380]	@ (8003bc4 <HAL_GPIO_DeInit+0x1fc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01f      	beq.n	8003a8a <HAL_GPIO_DeInit+0xc2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a5e      	ldr	r2, [pc, #376]	@ (8003bc8 <HAL_GPIO_DeInit+0x200>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d019      	beq.n	8003a86 <HAL_GPIO_DeInit+0xbe>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a5d      	ldr	r2, [pc, #372]	@ (8003bcc <HAL_GPIO_DeInit+0x204>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_GPIO_DeInit+0xba>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd0 <HAL_GPIO_DeInit+0x208>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00d      	beq.n	8003a7e <HAL_GPIO_DeInit+0xb6>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a5b      	ldr	r2, [pc, #364]	@ (8003bd4 <HAL_GPIO_DeInit+0x20c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <HAL_GPIO_DeInit+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8003bd8 <HAL_GPIO_DeInit+0x210>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_GPIO_DeInit+0xae>
 8003a72:	2309      	movs	r3, #9
 8003a74:	e012      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a76:	230a      	movs	r3, #10
 8003a78:	e010      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	e00e      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a7e:	2307      	movs	r3, #7
 8003a80:	e00c      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a82:	2306      	movs	r3, #6
 8003a84:	e00a      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a86:	2305      	movs	r3, #5
 8003a88:	e008      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	e006      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e004      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e002      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	f002 0203 	and.w	r2, r2, #3
 8003aa2:	0092      	lsls	r2, r2, #2
 8003aa4:	4093      	lsls	r3, r2
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d132      	bne.n	8003b12 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003aac:	4b4b      	ldr	r3, [pc, #300]	@ (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	4949      	ldr	r1, [pc, #292]	@ (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003aba:	4b48      	ldr	r3, [pc, #288]	@ (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	4946      	ldr	r1, [pc, #280]	@ (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ac8:	4b44      	ldr	r3, [pc, #272]	@ (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	4942      	ldr	r1, [pc, #264]	@ (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ad6:	4b41      	ldr	r3, [pc, #260]	@ (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	493f      	ldr	r1, [pc, #252]	@ (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	220f      	movs	r2, #15
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003af4:	4a2e      	ldr	r2, [pc, #184]	@ (8003bb0 <HAL_GPIO_DeInit+0x1e8>)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	3302      	adds	r3, #2
 8003afc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	43da      	mvns	r2, r3
 8003b04:	482a      	ldr	r0, [pc, #168]	@ (8003bb0 <HAL_GPIO_DeInit+0x1e8>)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2103      	movs	r1, #3
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	401a      	ands	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	08da      	lsrs	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3208      	adds	r2, #8
 8003b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	08d2      	lsrs	r2, r2, #3
 8003b48:	4019      	ands	r1, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3208      	adds	r2, #8
 8003b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2103      	movs	r1, #3
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	401a      	ands	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	401a      	ands	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	2103      	movs	r1, #3
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	3301      	adds	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b0f      	cmp	r3, #15
 8003b9c:	f67f af22 	bls.w	80039e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020800 	.word	0x40020800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	40021800 	.word	0x40021800
 8003bd0:	40021c00 	.word	0x40021c00
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40022400 	.word	0x40022400
 8003bdc:	40013c00 	.word	0x40013c00

08003be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
 8003bec:	4613      	mov	r3, r2
 8003bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf0:	787b      	ldrb	r3, [r7, #1]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bf6:	887a      	ldrh	r2, [r7, #2]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bfc:	e003      	b.n	8003c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bfe:	887b      	ldrh	r3, [r7, #2]
 8003c00:	041a      	lsls	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	619a      	str	r2, [r3, #24]
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e12b      	b.n	8003e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fe fc4c 	bl	80024d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	@ 0x24
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c78:	f001 ff06 	bl	8005a88 <HAL_RCC_GetPCLK1Freq>
 8003c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4a81      	ldr	r2, [pc, #516]	@ (8003e88 <HAL_I2C_Init+0x274>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d807      	bhi.n	8003c98 <HAL_I2C_Init+0x84>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a80      	ldr	r2, [pc, #512]	@ (8003e8c <HAL_I2C_Init+0x278>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	bf94      	ite	ls
 8003c90:	2301      	movls	r3, #1
 8003c92:	2300      	movhi	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e006      	b.n	8003ca6 <HAL_I2C_Init+0x92>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e90 <HAL_I2C_Init+0x27c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	bf94      	ite	ls
 8003ca0:	2301      	movls	r3, #1
 8003ca2:	2300      	movhi	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e0e7      	b.n	8003e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a78      	ldr	r2, [pc, #480]	@ (8003e94 <HAL_I2C_Init+0x280>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	0c9b      	lsrs	r3, r3, #18
 8003cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a6a      	ldr	r2, [pc, #424]	@ (8003e88 <HAL_I2C_Init+0x274>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d802      	bhi.n	8003ce8 <HAL_I2C_Init+0xd4>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	e009      	b.n	8003cfc <HAL_I2C_Init+0xe8>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	4a69      	ldr	r2, [pc, #420]	@ (8003e98 <HAL_I2C_Init+0x284>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	099b      	lsrs	r3, r3, #6
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	495c      	ldr	r1, [pc, #368]	@ (8003e88 <HAL_I2C_Init+0x274>)
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	d819      	bhi.n	8003d50 <HAL_I2C_Init+0x13c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1e59      	subs	r1, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d30:	400b      	ands	r3, r1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_I2C_Init+0x138>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1e59      	subs	r1, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4a:	e051      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	e04f      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d111      	bne.n	8003d7c <HAL_I2C_Init+0x168>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1e58      	subs	r0, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	440b      	add	r3, r1
 8003d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e012      	b.n	8003da2 <HAL_I2C_Init+0x18e>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1e58      	subs	r0, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	0099      	lsls	r1, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d92:	3301      	adds	r3, #1
 8003d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Init+0x196>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e022      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10e      	bne.n	8003dd0 <HAL_I2C_Init+0x1bc>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1e58      	subs	r0, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	440b      	add	r3, r1
 8003dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dce:	e00f      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e58      	subs	r0, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	0099      	lsls	r1, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	6809      	ldr	r1, [r1, #0]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6911      	ldr	r1, [r2, #16]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68d2      	ldr	r2, [r2, #12]
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	000186a0 	.word	0x000186a0
 8003e8c:	001e847f 	.word	0x001e847f
 8003e90:	003d08ff 	.word	0x003d08ff
 8003e94:	431bde83 	.word	0x431bde83
 8003e98:	10624dd3 	.word	0x10624dd3

08003e9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	4608      	mov	r0, r1
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4603      	mov	r3, r0
 8003eac:	817b      	strh	r3, [r7, #10]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	813b      	strh	r3, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eb6:	f7ff fa23 	bl	8003300 <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	f040 80d9 	bne.w	800407c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	2319      	movs	r3, #25
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	496d      	ldr	r1, [pc, #436]	@ (8004088 <HAL_I2C_Mem_Write+0x1ec>)
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fc8b 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e0cc      	b.n	800407e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2C_Mem_Write+0x56>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e0c5      	b.n	800407e <HAL_I2C_Mem_Write+0x1e2>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d007      	beq.n	8003f18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2221      	movs	r2, #33	@ 0x21
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2240      	movs	r2, #64	@ 0x40
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4a4d      	ldr	r2, [pc, #308]	@ (800408c <HAL_I2C_Mem_Write+0x1f0>)
 8003f58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f5a:	88f8      	ldrh	r0, [r7, #6]
 8003f5c:	893a      	ldrh	r2, [r7, #8]
 8003f5e:	8979      	ldrh	r1, [r7, #10]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	4603      	mov	r3, r0
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fac2 	bl	80044f4 <I2C_RequestMemoryWrite>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d052      	beq.n	800401c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e081      	b.n	800407e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fd50 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00d      	beq.n	8003fa6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d107      	bne.n	8003fa2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e06b      	b.n	800407e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	781a      	ldrb	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d11b      	bne.n	800401c <HAL_I2C_Mem_Write+0x180>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d017      	beq.n	800401c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1aa      	bne.n	8003f7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fd43 	bl	8004ab4 <I2C_WaitOnBTFFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004038:	2b04      	cmp	r3, #4
 800403a:	d107      	bne.n	800404c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800404a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e016      	b.n	800407e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	e000      	b.n	800407e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800407c:	2302      	movs	r3, #2
  }
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	00100002 	.word	0x00100002
 800408c:	ffff0000 	.word	0xffff0000

08004090 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08c      	sub	sp, #48	@ 0x30
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	461a      	mov	r2, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	817b      	strh	r3, [r7, #10]
 80040a2:	460b      	mov	r3, r1
 80040a4:	813b      	strh	r3, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040aa:	f7ff f929 	bl	8003300 <HAL_GetTick>
 80040ae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	f040 8214 	bne.w	80044e6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	2319      	movs	r3, #25
 80040c4:	2201      	movs	r2, #1
 80040c6:	497b      	ldr	r1, [pc, #492]	@ (80042b4 <HAL_I2C_Mem_Read+0x224>)
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 fb91 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040d4:	2302      	movs	r3, #2
 80040d6:	e207      	b.n	80044e8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_I2C_Mem_Read+0x56>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e200      	b.n	80044e8 <HAL_I2C_Mem_Read+0x458>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d007      	beq.n	800410c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800411a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2222      	movs	r2, #34	@ 0x22
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2240      	movs	r2, #64	@ 0x40
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004136:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800413c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a5b      	ldr	r2, [pc, #364]	@ (80042b8 <HAL_I2C_Mem_Read+0x228>)
 800414c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800414e:	88f8      	ldrh	r0, [r7, #6]
 8004150:	893a      	ldrh	r2, [r7, #8]
 8004152:	8979      	ldrh	r1, [r7, #10]
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	4603      	mov	r3, r0
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fa5e 	bl	8004620 <I2C_RequestMemoryRead>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e1bc      	b.n	80044e8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d113      	bne.n	800419e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004176:	2300      	movs	r3, #0
 8004178:	623b      	str	r3, [r7, #32]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	623b      	str	r3, [r7, #32]
 800418a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e190      	b.n	80044c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d11b      	bne.n	80041de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e170      	b.n	80044c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d11b      	bne.n	800421e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	e150      	b.n	80044c0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004234:	e144      	b.n	80044c0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423a:	2b03      	cmp	r3, #3
 800423c:	f200 80f1 	bhi.w	8004422 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004244:	2b01      	cmp	r3, #1
 8004246:	d123      	bne.n	8004290 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800424a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fc79 	bl	8004b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e145      	b.n	80044e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800428e:	e117      	b.n	80044c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004294:	2b02      	cmp	r3, #2
 8004296:	d14e      	bne.n	8004336 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429e:	2200      	movs	r2, #0
 80042a0:	4906      	ldr	r1, [pc, #24]	@ (80042bc <HAL_I2C_Mem_Read+0x22c>)
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 faa4 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e11a      	b.n	80044e8 <HAL_I2C_Mem_Read+0x458>
 80042b2:	bf00      	nop
 80042b4:	00100002 	.word	0x00100002
 80042b8:	ffff0000 	.word	0xffff0000
 80042bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004334:	e0c4      	b.n	80044c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433c:	2200      	movs	r2, #0
 800433e:	496c      	ldr	r1, [pc, #432]	@ (80044f0 <HAL_I2C_Mem_Read+0x460>)
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fa55 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0cb      	b.n	80044e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800435e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004398:	2200      	movs	r2, #0
 800439a:	4955      	ldr	r1, [pc, #340]	@ (80044f0 <HAL_I2C_Mem_Read+0x460>)
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fa27 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e09d      	b.n	80044e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004420:	e04e      	b.n	80044c0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004424:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fb8c 	bl	8004b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e058      	b.n	80044e8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b04      	cmp	r3, #4
 8004474:	d124      	bne.n	80044c0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447a:	2b03      	cmp	r3, #3
 800447c:	d107      	bne.n	800448e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800448c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f47f aeb6 	bne.w	8004236 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e000      	b.n	80044e8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80044e6:	2302      	movs	r3, #2
  }
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3728      	adds	r7, #40	@ 0x28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	00010004 	.word	0x00010004

080044f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	4608      	mov	r0, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	4603      	mov	r3, r0
 8004504:	817b      	strh	r3, [r7, #10]
 8004506:	460b      	mov	r3, r1
 8004508:	813b      	strh	r3, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800451c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	2200      	movs	r2, #0
 8004526:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f960 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00d      	beq.n	8004552 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004544:	d103      	bne.n	800454e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e05f      	b.n	8004612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004552:	897b      	ldrh	r3, [r7, #10]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	6a3a      	ldr	r2, [r7, #32]
 8004566:	492d      	ldr	r1, [pc, #180]	@ (800461c <I2C_RequestMemoryWrite+0x128>)
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f9bb 	bl	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e04c      	b.n	8004612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004590:	6a39      	ldr	r1, [r7, #32]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fa46 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d107      	bne.n	80045b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e02b      	b.n	8004612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d105      	bne.n	80045cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c0:	893b      	ldrh	r3, [r7, #8]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	611a      	str	r2, [r3, #16]
 80045ca:	e021      	b.n	8004610 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045cc:	893b      	ldrh	r3, [r7, #8]
 80045ce:	0a1b      	lsrs	r3, r3, #8
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045dc:	6a39      	ldr	r1, [r7, #32]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fa20 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d107      	bne.n	8004602 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e005      	b.n	8004612 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004606:	893b      	ldrh	r3, [r7, #8]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	00010002 	.word	0x00010002

08004620 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	461a      	mov	r2, r3
 800462e:	4603      	mov	r3, r0
 8004630:	817b      	strh	r3, [r7, #10]
 8004632:	460b      	mov	r3, r1
 8004634:	813b      	strh	r3, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004648:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	2200      	movs	r2, #0
 8004662:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f8c2 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00d      	beq.n	800468e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004680:	d103      	bne.n	800468a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004688:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e0aa      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800468e:	897b      	ldrh	r3, [r7, #10]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800469c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	6a3a      	ldr	r2, [r7, #32]
 80046a2:	4952      	ldr	r1, [pc, #328]	@ (80047ec <I2C_RequestMemoryRead+0x1cc>)
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f91d 	bl	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e097      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046cc:	6a39      	ldr	r1, [r7, #32]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f9a8 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d107      	bne.n	80046f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e076      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d105      	bne.n	8004708 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046fc:	893b      	ldrh	r3, [r7, #8]
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]
 8004706:	e021      	b.n	800474c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004708:	893b      	ldrh	r3, [r7, #8]
 800470a:	0a1b      	lsrs	r3, r3, #8
 800470c:	b29b      	uxth	r3, r3
 800470e:	b2da      	uxtb	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004718:	6a39      	ldr	r1, [r7, #32]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f982 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00d      	beq.n	8004742 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	2b04      	cmp	r3, #4
 800472c:	d107      	bne.n	800473e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800473c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e050      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004742:	893b      	ldrh	r3, [r7, #8]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800474c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474e:	6a39      	ldr	r1, [r7, #32]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f967 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00d      	beq.n	8004778 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	2b04      	cmp	r3, #4
 8004762:	d107      	bne.n	8004774 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004772:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e035      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004786:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	2200      	movs	r2, #0
 8004790:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f82b 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00d      	beq.n	80047bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ae:	d103      	bne.n	80047b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e013      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047bc:	897b      	ldrh	r3, [r7, #10]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	6a3a      	ldr	r2, [r7, #32]
 80047d0:	4906      	ldr	r1, [pc, #24]	@ (80047ec <I2C_RequestMemoryRead+0x1cc>)
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f886 	bl	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	00010002 	.word	0x00010002

080047f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004800:	e048      	b.n	8004894 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d044      	beq.n	8004894 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fe fd79 	bl	8003300 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d139      	bne.n	8004894 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10d      	bne.n	8004846 <I2C_WaitOnFlagUntilTimeout+0x56>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	43da      	mvns	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4013      	ands	r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	e00c      	b.n	8004860 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	43da      	mvns	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4013      	ands	r3, r2
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf0c      	ite	eq
 8004858:	2301      	moveq	r3, #1
 800485a:	2300      	movne	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	79fb      	ldrb	r3, [r7, #7]
 8004862:	429a      	cmp	r2, r3
 8004864:	d116      	bne.n	8004894 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e023      	b.n	80048dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	0c1b      	lsrs	r3, r3, #16
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d10d      	bne.n	80048ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	43da      	mvns	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4013      	ands	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	e00c      	b.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	43da      	mvns	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4013      	ands	r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d093      	beq.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048f2:	e071      	b.n	80049d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004902:	d123      	bne.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004912:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800491c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004938:	f043 0204 	orr.w	r2, r3, #4
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e067      	b.n	8004a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004952:	d041      	beq.n	80049d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004954:	f7fe fcd4 	bl	8003300 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	429a      	cmp	r2, r3
 8004962:	d302      	bcc.n	800496a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d136      	bne.n	80049d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	d10c      	bne.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	43da      	mvns	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4013      	ands	r3, r2
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf14      	ite	ne
 8004986:	2301      	movne	r3, #1
 8004988:	2300      	moveq	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	e00b      	b.n	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	43da      	mvns	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4013      	ands	r3, r2
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf14      	ite	ne
 80049a0:	2301      	movne	r3, #1
 80049a2:	2300      	moveq	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d016      	beq.n	80049d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e021      	b.n	8004a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10c      	bne.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	43da      	mvns	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e00b      	b.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf14      	ite	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	2300      	moveq	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f47f af6d 	bne.w	80048f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a30:	e034      	b.n	8004a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f8e3 	bl	8004bfe <I2C_IsAcknowledgeFailed>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e034      	b.n	8004aac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d028      	beq.n	8004a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4a:	f7fe fc59 	bl	8003300 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d302      	bcc.n	8004a60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d11d      	bne.n	8004a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6a:	2b80      	cmp	r3, #128	@ 0x80
 8004a6c:	d016      	beq.n	8004a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	f043 0220 	orr.w	r2, r3, #32
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e007      	b.n	8004aac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa6:	2b80      	cmp	r3, #128	@ 0x80
 8004aa8:	d1c3      	bne.n	8004a32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ac0:	e034      	b.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f89b 	bl	8004bfe <I2C_IsAcknowledgeFailed>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e034      	b.n	8004b3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d028      	beq.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ada:	f7fe fc11 	bl	8003300 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d302      	bcc.n	8004af0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11d      	bne.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d016      	beq.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e007      	b.n	8004b3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d1c3      	bne.n	8004ac2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b50:	e049      	b.n	8004be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d119      	bne.n	8004b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0210 	mvn.w	r2, #16
 8004b68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e030      	b.n	8004bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b94:	f7fe fbb4 	bl	8003300 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d302      	bcc.n	8004baa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d11d      	bne.n	8004be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb4:	2b40      	cmp	r3, #64	@ 0x40
 8004bb6:	d016      	beq.n	8004be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e007      	b.n	8004bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf0:	2b40      	cmp	r3, #64	@ 0x40
 8004bf2:	d1ae      	bne.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c14:	d11b      	bne.n	8004c4e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c1e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f043 0204 	orr.w	r2, r3, #4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e0bf      	b.n	8004dee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fd fc92 	bl	80025ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004c9e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6999      	ldr	r1, [r3, #24]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cb4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6899      	ldr	r1, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b4a      	ldr	r3, [pc, #296]	@ (8004df8 <HAL_LTDC_Init+0x19c>)
 8004cd0:	400b      	ands	r3, r1
 8004cd2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	041b      	lsls	r3, r3, #16
 8004cda:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6899      	ldr	r1, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68d9      	ldr	r1, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8004df8 <HAL_LTDC_Init+0x19c>)
 8004cfe:	400b      	ands	r3, r1
 8004d00:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	041b      	lsls	r3, r3, #16
 8004d08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68d9      	ldr	r1, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1a      	ldr	r2, [r3, #32]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6919      	ldr	r1, [r3, #16]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b33      	ldr	r3, [pc, #204]	@ (8004df8 <HAL_LTDC_Init+0x19c>)
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6919      	ldr	r1, [r3, #16]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6959      	ldr	r1, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b27      	ldr	r3, [pc, #156]	@ (8004df8 <HAL_LTDC_Init+0x19c>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	041b      	lsls	r3, r3, #16
 8004d64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6959      	ldr	r1, [r3, #20]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0206 	orr.w	r2, r2, #6
 8004dca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	f000f800 	.word	0xf000f800

08004dfc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004dfc:	b5b0      	push	{r4, r5, r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_LTDC_ConfigLayer+0x1a>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e02c      	b.n	8004e70 <HAL_LTDC_ConfigLayer+0x74>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2134      	movs	r1, #52	@ 0x34
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	4413      	add	r3, r2
 8004e32:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4614      	mov	r4, r2
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f811 	bl	8004e78 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bdb0      	pop	{r4, r5, r7, pc}

08004e78 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	@ 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	0c1b      	lsrs	r3, r3, #16
 8004e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e94:	4413      	add	r3, r2
 8004e96:	041b      	lsls	r3, r3, #16
 8004e98:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	01db      	lsls	r3, r3, #7
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3384      	adds	r3, #132	@ 0x84
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	4611      	mov	r1, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	01d2      	lsls	r2, r2, #7
 8004eb4:	440a      	add	r2, r1
 8004eb6:	3284      	adds	r2, #132	@ 0x84
 8004eb8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004ebc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	0c1b      	lsrs	r3, r3, #16
 8004eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ece:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ed0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	01db      	lsls	r3, r3, #7
 8004edc:	440b      	add	r3, r1
 8004ede:	3384      	adds	r3, #132	@ 0x84
 8004ee0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ee6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ef6:	4413      	add	r3, r2
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	01db      	lsls	r3, r3, #7
 8004f06:	4413      	add	r3, r2
 8004f08:	3384      	adds	r3, #132	@ 0x84
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	4611      	mov	r1, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	01d2      	lsls	r2, r2, #7
 8004f16:	440a      	add	r2, r1
 8004f18:	3284      	adds	r2, #132	@ 0x84
 8004f1a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f1e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f2e:	4413      	add	r3, r2
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4619      	mov	r1, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	01db      	lsls	r3, r3, #7
 8004f3c:	440b      	add	r3, r1
 8004f3e:	3384      	adds	r3, #132	@ 0x84
 8004f40:	4619      	mov	r1, r3
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	01db      	lsls	r3, r3, #7
 8004f52:	4413      	add	r3, r2
 8004f54:	3384      	adds	r3, #132	@ 0x84
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	01d2      	lsls	r2, r2, #7
 8004f62:	440a      	add	r2, r1
 8004f64:	3284      	adds	r2, #132	@ 0x84
 8004f66:	f023 0307 	bic.w	r3, r3, #7
 8004f6a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	01db      	lsls	r3, r3, #7
 8004f76:	4413      	add	r3, r2
 8004f78:	3384      	adds	r3, #132	@ 0x84
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	061b      	lsls	r3, r3, #24
 8004f9c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	01db      	lsls	r3, r3, #7
 8004fa8:	4413      	add	r3, r2
 8004faa:	3384      	adds	r3, #132	@ 0x84
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	01db      	lsls	r3, r3, #7
 8004fb8:	4413      	add	r3, r2
 8004fba:	3384      	adds	r3, #132	@ 0x84
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004fc8:	461a      	mov	r2, r3
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	01db      	lsls	r3, r3, #7
 8004fdc:	440b      	add	r3, r1
 8004fde:	3384      	adds	r3, #132	@ 0x84
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	01db      	lsls	r3, r3, #7
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3384      	adds	r3, #132	@ 0x84
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	01d2      	lsls	r2, r2, #7
 8005002:	440a      	add	r2, r1
 8005004:	3284      	adds	r2, #132	@ 0x84
 8005006:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800500a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	01db      	lsls	r3, r3, #7
 8005016:	4413      	add	r3, r2
 8005018:	3384      	adds	r3, #132	@ 0x84
 800501a:	461a      	mov	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	01db      	lsls	r3, r3, #7
 800502c:	4413      	add	r3, r2
 800502e:	3384      	adds	r3, #132	@ 0x84
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	4611      	mov	r1, r2
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	01d2      	lsls	r2, r2, #7
 800503c:	440a      	add	r2, r1
 800503e:	3284      	adds	r2, #132	@ 0x84
 8005040:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005044:	f023 0307 	bic.w	r3, r3, #7
 8005048:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	68f9      	ldr	r1, [r7, #12]
 8005054:	6809      	ldr	r1, [r1, #0]
 8005056:	4608      	mov	r0, r1
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	01c9      	lsls	r1, r1, #7
 800505c:	4401      	add	r1, r0
 800505e:	3184      	adds	r1, #132	@ 0x84
 8005060:	4313      	orrs	r3, r2
 8005062:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	01db      	lsls	r3, r3, #7
 800506e:	4413      	add	r3, r2
 8005070:	3384      	adds	r3, #132	@ 0x84
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	01db      	lsls	r3, r3, #7
 800507e:	4413      	add	r3, r2
 8005080:	3384      	adds	r3, #132	@ 0x84
 8005082:	461a      	mov	r2, r3
 8005084:	2300      	movs	r3, #0
 8005086:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	01db      	lsls	r3, r3, #7
 8005092:	4413      	add	r3, r2
 8005094:	3384      	adds	r3, #132	@ 0x84
 8005096:	461a      	mov	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80050a6:	2304      	movs	r3, #4
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e01b      	b.n	80050e4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d102      	bne.n	80050ba <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80050b4:	2303      	movs	r3, #3
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	e014      	b.n	80050e4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d00b      	beq.n	80050da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d007      	beq.n	80050da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d003      	beq.n	80050da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050d6:	2b07      	cmp	r3, #7
 80050d8:	d102      	bne.n	80050e0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80050da:	2302      	movs	r3, #2
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	e001      	b.n	80050e4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80050e0:	2301      	movs	r3, #1
 80050e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	01db      	lsls	r3, r3, #7
 80050ee:	4413      	add	r3, r2
 80050f0:	3384      	adds	r3, #132	@ 0x84
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	4611      	mov	r1, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	01d2      	lsls	r2, r2, #7
 80050fe:	440a      	add	r2, r1
 8005100:	3284      	adds	r2, #132	@ 0x84
 8005102:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005106:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	fb02 f303 	mul.w	r3, r2, r3
 8005112:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	6859      	ldr	r1, [r3, #4]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	1acb      	subs	r3, r1, r3
 800511e:	69f9      	ldr	r1, [r7, #28]
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	6809      	ldr	r1, [r1, #0]
 800512a:	4608      	mov	r0, r1
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	01c9      	lsls	r1, r1, #7
 8005130:	4401      	add	r1, r0
 8005132:	3184      	adds	r1, #132	@ 0x84
 8005134:	4313      	orrs	r3, r2
 8005136:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	01db      	lsls	r3, r3, #7
 8005142:	4413      	add	r3, r2
 8005144:	3384      	adds	r3, #132	@ 0x84
 8005146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	4611      	mov	r1, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	01d2      	lsls	r2, r2, #7
 8005152:	440a      	add	r2, r1
 8005154:	3284      	adds	r2, #132	@ 0x84
 8005156:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800515a:	f023 0307 	bic.w	r3, r3, #7
 800515e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	01db      	lsls	r3, r3, #7
 800516a:	4413      	add	r3, r2
 800516c:	3384      	adds	r3, #132	@ 0x84
 800516e:	461a      	mov	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	01db      	lsls	r3, r3, #7
 8005180:	4413      	add	r3, r2
 8005182:	3384      	adds	r3, #132	@ 0x84
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	4611      	mov	r1, r2
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	01d2      	lsls	r2, r2, #7
 8005190:	440a      	add	r2, r1
 8005192:	3284      	adds	r2, #132	@ 0x84
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6013      	str	r3, [r2, #0]
}
 800519a:	bf00      	nop
 800519c:	3724      	adds	r7, #36	@ 0x24
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e267      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d075      	beq.n	80052b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051c6:	4b88      	ldr	r3, [pc, #544]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d00c      	beq.n	80051ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d2:	4b85      	ldr	r3, [pc, #532]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d112      	bne.n	8005204 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051de:	4b82      	ldr	r3, [pc, #520]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051ea:	d10b      	bne.n	8005204 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	4b7e      	ldr	r3, [pc, #504]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05b      	beq.n	80052b0 <HAL_RCC_OscConfig+0x108>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d157      	bne.n	80052b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e242      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800520c:	d106      	bne.n	800521c <HAL_RCC_OscConfig+0x74>
 800520e:	4b76      	ldr	r3, [pc, #472]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a75      	ldr	r2, [pc, #468]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e01d      	b.n	8005258 <HAL_RCC_OscConfig+0xb0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0x98>
 8005226:	4b70      	ldr	r3, [pc, #448]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a6f      	ldr	r2, [pc, #444]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 800522c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b6d      	ldr	r3, [pc, #436]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a6c      	ldr	r2, [pc, #432]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0xb0>
 8005240:	4b69      	ldr	r3, [pc, #420]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a68      	ldr	r2, [pc, #416]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4b66      	ldr	r3, [pc, #408]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a65      	ldr	r2, [pc, #404]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d013      	beq.n	8005288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fe f84e 	bl	8003300 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005268:	f7fe f84a 	bl	8003300 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	@ 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e207      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527a:	4b5b      	ldr	r3, [pc, #364]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0xc0>
 8005286:	e014      	b.n	80052b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005288:	f7fe f83a 	bl	8003300 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005290:	f7fe f836 	bl	8003300 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	@ 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e1f3      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a2:	4b51      	ldr	r3, [pc, #324]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0xe8>
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d063      	beq.n	8005386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052be:	4b4a      	ldr	r3, [pc, #296]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00b      	beq.n	80052e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ca:	4b47      	ldr	r3, [pc, #284]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d11c      	bne.n	8005310 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052d6:	4b44      	ldr	r3, [pc, #272]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d116      	bne.n	8005310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e2:	4b41      	ldr	r3, [pc, #260]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_RCC_OscConfig+0x152>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d001      	beq.n	80052fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e1c7      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fa:	4b3b      	ldr	r3, [pc, #236]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	4937      	ldr	r1, [pc, #220]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 800530a:	4313      	orrs	r3, r2
 800530c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800530e:	e03a      	b.n	8005386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d020      	beq.n	800535a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005318:	4b34      	ldr	r3, [pc, #208]	@ (80053ec <HAL_RCC_OscConfig+0x244>)
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531e:	f7fd ffef 	bl	8003300 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005326:	f7fd ffeb 	bl	8003300 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e1a8      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005338:	4b2b      	ldr	r3, [pc, #172]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f0      	beq.n	8005326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005344:	4b28      	ldr	r3, [pc, #160]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4925      	ldr	r1, [pc, #148]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005354:	4313      	orrs	r3, r2
 8005356:	600b      	str	r3, [r1, #0]
 8005358:	e015      	b.n	8005386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800535a:	4b24      	ldr	r3, [pc, #144]	@ (80053ec <HAL_RCC_OscConfig+0x244>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005360:	f7fd ffce 	bl	8003300 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005368:	f7fd ffca 	bl	8003300 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e187      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537a:	4b1b      	ldr	r3, [pc, #108]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1f0      	bne.n	8005368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d036      	beq.n	8005400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d016      	beq.n	80053c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800539a:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <HAL_RCC_OscConfig+0x248>)
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a0:	f7fd ffae 	bl	8003300 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a8:	f7fd ffaa 	bl	8003300 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e167      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ba:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <HAL_RCC_OscConfig+0x240>)
 80053bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0x200>
 80053c6:	e01b      	b.n	8005400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053c8:	4b09      	ldr	r3, [pc, #36]	@ (80053f0 <HAL_RCC_OscConfig+0x248>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ce:	f7fd ff97 	bl	8003300 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d4:	e00e      	b.n	80053f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053d6:	f7fd ff93 	bl	8003300 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d907      	bls.n	80053f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e150      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
 80053e8:	40023800 	.word	0x40023800
 80053ec:	42470000 	.word	0x42470000
 80053f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f4:	4b88      	ldr	r3, [pc, #544]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 80053f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ea      	bne.n	80053d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 8097 	beq.w	800553c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800540e:	2300      	movs	r3, #0
 8005410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005412:	4b81      	ldr	r3, [pc, #516]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10f      	bne.n	800543e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	4b7d      	ldr	r3, [pc, #500]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005426:	4a7c      	ldr	r2, [pc, #496]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 8005428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800542c:	6413      	str	r3, [r2, #64]	@ 0x40
 800542e:	4b7a      	ldr	r3, [pc, #488]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005436:	60bb      	str	r3, [r7, #8]
 8005438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800543a:	2301      	movs	r3, #1
 800543c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543e:	4b77      	ldr	r3, [pc, #476]	@ (800561c <HAL_RCC_OscConfig+0x474>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d118      	bne.n	800547c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800544a:	4b74      	ldr	r3, [pc, #464]	@ (800561c <HAL_RCC_OscConfig+0x474>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a73      	ldr	r2, [pc, #460]	@ (800561c <HAL_RCC_OscConfig+0x474>)
 8005450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005456:	f7fd ff53 	bl	8003300 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800545e:	f7fd ff4f 	bl	8003300 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e10c      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005470:	4b6a      	ldr	r3, [pc, #424]	@ (800561c <HAL_RCC_OscConfig+0x474>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0f0      	beq.n	800545e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d106      	bne.n	8005492 <HAL_RCC_OscConfig+0x2ea>
 8005484:	4b64      	ldr	r3, [pc, #400]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 8005486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005488:	4a63      	ldr	r2, [pc, #396]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005490:	e01c      	b.n	80054cc <HAL_RCC_OscConfig+0x324>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b05      	cmp	r3, #5
 8005498:	d10c      	bne.n	80054b4 <HAL_RCC_OscConfig+0x30c>
 800549a:	4b5f      	ldr	r3, [pc, #380]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549e:	4a5e      	ldr	r2, [pc, #376]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 80054a0:	f043 0304 	orr.w	r3, r3, #4
 80054a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80054a6:	4b5c      	ldr	r3, [pc, #368]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80054b2:	e00b      	b.n	80054cc <HAL_RCC_OscConfig+0x324>
 80054b4:	4b58      	ldr	r3, [pc, #352]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b8:	4a57      	ldr	r2, [pc, #348]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	6713      	str	r3, [r2, #112]	@ 0x70
 80054c0:	4b55      	ldr	r3, [pc, #340]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 80054c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c4:	4a54      	ldr	r2, [pc, #336]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 80054c6:	f023 0304 	bic.w	r3, r3, #4
 80054ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d015      	beq.n	8005500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d4:	f7fd ff14 	bl	8003300 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054da:	e00a      	b.n	80054f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054dc:	f7fd ff10 	bl	8003300 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e0cb      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f2:	4b49      	ldr	r3, [pc, #292]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0ee      	beq.n	80054dc <HAL_RCC_OscConfig+0x334>
 80054fe:	e014      	b.n	800552a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005500:	f7fd fefe 	bl	8003300 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005506:	e00a      	b.n	800551e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005508:	f7fd fefa 	bl	8003300 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e0b5      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800551e:	4b3e      	ldr	r3, [pc, #248]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 8005520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ee      	bne.n	8005508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800552a:	7dfb      	ldrb	r3, [r7, #23]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d105      	bne.n	800553c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005530:	4b39      	ldr	r3, [pc, #228]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	4a38      	ldr	r2, [pc, #224]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 8005536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800553a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80a1 	beq.w	8005688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005546:	4b34      	ldr	r3, [pc, #208]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
 800554e:	2b08      	cmp	r3, #8
 8005550:	d05c      	beq.n	800560c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d141      	bne.n	80055de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555a:	4b31      	ldr	r3, [pc, #196]	@ (8005620 <HAL_RCC_OscConfig+0x478>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005560:	f7fd fece 	bl	8003300 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005568:	f7fd feca 	bl	8003300 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e087      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557a:	4b27      	ldr	r3, [pc, #156]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f0      	bne.n	8005568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69da      	ldr	r2, [r3, #28]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	019b      	lsls	r3, r3, #6
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559c:	085b      	lsrs	r3, r3, #1
 800559e:	3b01      	subs	r3, #1
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	491b      	ldr	r1, [pc, #108]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005620 <HAL_RCC_OscConfig+0x478>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fd fea3 	bl	8003300 <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055be:	f7fd fe9f 	bl	8003300 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e05c      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055d0:	4b11      	ldr	r3, [pc, #68]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0f0      	beq.n	80055be <HAL_RCC_OscConfig+0x416>
 80055dc:	e054      	b.n	8005688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055de:	4b10      	ldr	r3, [pc, #64]	@ (8005620 <HAL_RCC_OscConfig+0x478>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e4:	f7fd fe8c 	bl	8003300 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ec:	f7fd fe88 	bl	8003300 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e045      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fe:	4b06      	ldr	r3, [pc, #24]	@ (8005618 <HAL_RCC_OscConfig+0x470>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0x444>
 800560a:	e03d      	b.n	8005688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d107      	bne.n	8005624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e038      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
 8005618:	40023800 	.word	0x40023800
 800561c:	40007000 	.word	0x40007000
 8005620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005624:	4b1b      	ldr	r3, [pc, #108]	@ (8005694 <HAL_RCC_OscConfig+0x4ec>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d028      	beq.n	8005684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800563c:	429a      	cmp	r2, r3
 800563e:	d121      	bne.n	8005684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d11a      	bne.n	8005684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005654:	4013      	ands	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800565a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800565c:	4293      	cmp	r3, r2
 800565e:	d111      	bne.n	8005684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	3b01      	subs	r3, #1
 800566e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005670:	429a      	cmp	r2, r3
 8005672:	d107      	bne.n	8005684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40023800 	.word	0x40023800

08005698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0cc      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056ac:	4b68      	ldr	r3, [pc, #416]	@ (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d90c      	bls.n	80056d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ba:	4b65      	ldr	r3, [pc, #404]	@ (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c2:	4b63      	ldr	r3, [pc, #396]	@ (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0b8      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d020      	beq.n	8005722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056ec:	4b59      	ldr	r3, [pc, #356]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4a58      	ldr	r2, [pc, #352]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005704:	4b53      	ldr	r3, [pc, #332]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4a52      	ldr	r2, [pc, #328]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800570e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005710:	4b50      	ldr	r3, [pc, #320]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	494d      	ldr	r1, [pc, #308]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d044      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d107      	bne.n	8005746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005736:	4b47      	ldr	r3, [pc, #284]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d119      	bne.n	8005776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e07f      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d003      	beq.n	8005756 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005752:	2b03      	cmp	r3, #3
 8005754:	d107      	bne.n	8005766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005756:	4b3f      	ldr	r3, [pc, #252]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e06f      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005766:	4b3b      	ldr	r3, [pc, #236]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e067      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005776:	4b37      	ldr	r3, [pc, #220]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f023 0203 	bic.w	r2, r3, #3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4934      	ldr	r1, [pc, #208]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	4313      	orrs	r3, r2
 8005786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005788:	f7fd fdba 	bl	8003300 <HAL_GetTick>
 800578c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005790:	f7fd fdb6 	bl	8003300 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e04f      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 020c 	and.w	r2, r3, #12
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d1eb      	bne.n	8005790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057b8:	4b25      	ldr	r3, [pc, #148]	@ (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d20c      	bcs.n	80057e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c6:	4b22      	ldr	r3, [pc, #136]	@ (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b20      	ldr	r3, [pc, #128]	@ (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e032      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ec:	4b19      	ldr	r3, [pc, #100]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4916      	ldr	r1, [pc, #88]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800580a:	4b12      	ldr	r3, [pc, #72]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	490e      	ldr	r1, [pc, #56]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	4313      	orrs	r3, r2
 800581c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800581e:	f000 f821 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8005822:	4602      	mov	r2, r0
 8005824:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	490a      	ldr	r1, [pc, #40]	@ (8005858 <HAL_RCC_ClockConfig+0x1c0>)
 8005830:	5ccb      	ldrb	r3, [r1, r3]
 8005832:	fa22 f303 	lsr.w	r3, r2, r3
 8005836:	4a09      	ldr	r2, [pc, #36]	@ (800585c <HAL_RCC_ClockConfig+0x1c4>)
 8005838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800583a:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <HAL_RCC_ClockConfig+0x1c8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fd fd1a 	bl	8003278 <HAL_InitTick>

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40023c00 	.word	0x40023c00
 8005854:	40023800 	.word	0x40023800
 8005858:	08008a20 	.word	0x08008a20
 800585c:	20000080 	.word	0x20000080
 8005860:	20000084 	.word	0x20000084

08005864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005868:	b094      	sub	sp, #80	@ 0x50
 800586a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800587c:	4b79      	ldr	r3, [pc, #484]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 030c 	and.w	r3, r3, #12
 8005884:	2b08      	cmp	r3, #8
 8005886:	d00d      	beq.n	80058a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005888:	2b08      	cmp	r3, #8
 800588a:	f200 80e1 	bhi.w	8005a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x34>
 8005892:	2b04      	cmp	r3, #4
 8005894:	d003      	beq.n	800589e <HAL_RCC_GetSysClockFreq+0x3a>
 8005896:	e0db      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005898:	4b73      	ldr	r3, [pc, #460]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800589a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800589c:	e0db      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800589e:	4b73      	ldr	r3, [pc, #460]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80058a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058a2:	e0d8      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d063      	beq.n	8005982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	099b      	lsrs	r3, r3, #6
 80058c0:	2200      	movs	r2, #0
 80058c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ce:	2300      	movs	r3, #0
 80058d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80058d6:	4622      	mov	r2, r4
 80058d8:	462b      	mov	r3, r5
 80058da:	f04f 0000 	mov.w	r0, #0
 80058de:	f04f 0100 	mov.w	r1, #0
 80058e2:	0159      	lsls	r1, r3, #5
 80058e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058e8:	0150      	lsls	r0, r2, #5
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4621      	mov	r1, r4
 80058f0:	1a51      	subs	r1, r2, r1
 80058f2:	6139      	str	r1, [r7, #16]
 80058f4:	4629      	mov	r1, r5
 80058f6:	eb63 0301 	sbc.w	r3, r3, r1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005908:	4659      	mov	r1, fp
 800590a:	018b      	lsls	r3, r1, #6
 800590c:	4651      	mov	r1, sl
 800590e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005912:	4651      	mov	r1, sl
 8005914:	018a      	lsls	r2, r1, #6
 8005916:	4651      	mov	r1, sl
 8005918:	ebb2 0801 	subs.w	r8, r2, r1
 800591c:	4659      	mov	r1, fp
 800591e:	eb63 0901 	sbc.w	r9, r3, r1
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800592e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005936:	4690      	mov	r8, r2
 8005938:	4699      	mov	r9, r3
 800593a:	4623      	mov	r3, r4
 800593c:	eb18 0303 	adds.w	r3, r8, r3
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	462b      	mov	r3, r5
 8005944:	eb49 0303 	adc.w	r3, r9, r3
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005956:	4629      	mov	r1, r5
 8005958:	024b      	lsls	r3, r1, #9
 800595a:	4621      	mov	r1, r4
 800595c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005960:	4621      	mov	r1, r4
 8005962:	024a      	lsls	r2, r1, #9
 8005964:	4610      	mov	r0, r2
 8005966:	4619      	mov	r1, r3
 8005968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800596a:	2200      	movs	r2, #0
 800596c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800596e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005974:	f7fa fc8c 	bl	8000290 <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4613      	mov	r3, r2
 800597e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005980:	e058      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005982:	4b38      	ldr	r3, [pc, #224]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	2200      	movs	r2, #0
 800598a:	4618      	mov	r0, r3
 800598c:	4611      	mov	r1, r2
 800598e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	2300      	movs	r3, #0
 8005996:	627b      	str	r3, [r7, #36]	@ 0x24
 8005998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800599c:	4642      	mov	r2, r8
 800599e:	464b      	mov	r3, r9
 80059a0:	f04f 0000 	mov.w	r0, #0
 80059a4:	f04f 0100 	mov.w	r1, #0
 80059a8:	0159      	lsls	r1, r3, #5
 80059aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059ae:	0150      	lsls	r0, r2, #5
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4641      	mov	r1, r8
 80059b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80059ba:	4649      	mov	r1, r9
 80059bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059d4:	ebb2 040a 	subs.w	r4, r2, sl
 80059d8:	eb63 050b 	sbc.w	r5, r3, fp
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	00eb      	lsls	r3, r5, #3
 80059e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059ea:	00e2      	lsls	r2, r4, #3
 80059ec:	4614      	mov	r4, r2
 80059ee:	461d      	mov	r5, r3
 80059f0:	4643      	mov	r3, r8
 80059f2:	18e3      	adds	r3, r4, r3
 80059f4:	603b      	str	r3, [r7, #0]
 80059f6:	464b      	mov	r3, r9
 80059f8:	eb45 0303 	adc.w	r3, r5, r3
 80059fc:	607b      	str	r3, [r7, #4]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	028b      	lsls	r3, r1, #10
 8005a0e:	4621      	mov	r1, r4
 8005a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a14:	4621      	mov	r1, r4
 8005a16:	028a      	lsls	r2, r1, #10
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a1e:	2200      	movs	r2, #0
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	61fa      	str	r2, [r7, #28]
 8005a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a28:	f7fa fc32 	bl	8000290 <__aeabi_uldivmod>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4613      	mov	r3, r2
 8005a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a34:	4b0b      	ldr	r3, [pc, #44]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	0c1b      	lsrs	r3, r3, #16
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	3301      	adds	r3, #1
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a4e:	e002      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a50:	4b05      	ldr	r3, [pc, #20]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3750      	adds	r7, #80	@ 0x50
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a62:	bf00      	nop
 8005a64:	40023800 	.word	0x40023800
 8005a68:	00f42400 	.word	0x00f42400
 8005a6c:	007a1200 	.word	0x007a1200

08005a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a74:	4b03      	ldr	r3, [pc, #12]	@ (8005a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a76:	681b      	ldr	r3, [r3, #0]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000080 	.word	0x20000080

08005a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a8c:	f7ff fff0 	bl	8005a70 <HAL_RCC_GetHCLKFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b05      	ldr	r3, [pc, #20]	@ (8005aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	0a9b      	lsrs	r3, r3, #10
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	4903      	ldr	r1, [pc, #12]	@ (8005aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	08008a30 	.word	0x08008a30

08005ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10b      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d105      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d075      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ae4:	4b91      	ldr	r3, [pc, #580]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005aea:	f7fd fc09 	bl	8003300 <HAL_GetTick>
 8005aee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005af0:	e008      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005af2:	f7fd fc05 	bl	8003300 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e189      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b04:	4b8a      	ldr	r3, [pc, #552]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f0      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d009      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	019a      	lsls	r2, r3, #6
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	071b      	lsls	r3, r3, #28
 8005b28:	4981      	ldr	r1, [pc, #516]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01f      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b3c:	4b7c      	ldr	r3, [pc, #496]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b42:	0f1b      	lsrs	r3, r3, #28
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	019a      	lsls	r2, r3, #6
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	061b      	lsls	r3, r3, #24
 8005b56:	431a      	orrs	r2, r3
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	071b      	lsls	r3, r3, #28
 8005b5c:	4974      	ldr	r1, [pc, #464]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b64:	4b72      	ldr	r3, [pc, #456]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b6a:	f023 021f 	bic.w	r2, r3, #31
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	496e      	ldr	r1, [pc, #440]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00d      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	019a      	lsls	r2, r3, #6
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	061b      	lsls	r3, r3, #24
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	071b      	lsls	r3, r3, #28
 8005b9c:	4964      	ldr	r1, [pc, #400]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ba4:	4b61      	ldr	r3, [pc, #388]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005baa:	f7fd fba9 	bl	8003300 <HAL_GetTick>
 8005bae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bb2:	f7fd fba5 	bl	8003300 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e129      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0f0      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d105      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d079      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005be8:	4b52      	ldr	r3, [pc, #328]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bee:	f7fd fb87 	bl	8003300 <HAL_GetTick>
 8005bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bf6:	f7fd fb83 	bl	8003300 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e107      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c08:	4b49      	ldr	r3, [pc, #292]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c14:	d0ef      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d020      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c22:	4b43      	ldr	r3, [pc, #268]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c28:	0f1b      	lsrs	r3, r3, #28
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	019a      	lsls	r2, r3, #6
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	061b      	lsls	r3, r3, #24
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	071b      	lsls	r3, r3, #28
 8005c42:	493b      	ldr	r1, [pc, #236]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c4a:	4b39      	ldr	r3, [pc, #228]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c50:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	4934      	ldr	r1, [pc, #208]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01e      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c70:	4b2f      	ldr	r3, [pc, #188]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c76:	0e1b      	lsrs	r3, r3, #24
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	019a      	lsls	r2, r3, #6
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	061b      	lsls	r3, r3, #24
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	071b      	lsls	r3, r3, #28
 8005c90:	4927      	ldr	r1, [pc, #156]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c98:	4b25      	ldr	r3, [pc, #148]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c9e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	4922      	ldr	r1, [pc, #136]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005cae:	4b21      	ldr	r3, [pc, #132]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cb4:	f7fd fb24 	bl	8003300 <HAL_GetTick>
 8005cb8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cba:	e008      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cbc:	f7fd fb20 	bl	8003300 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e0a4      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cce:	4b18      	ldr	r3, [pc, #96]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cda:	d1ef      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 808b 	beq.w	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	4b10      	ldr	r3, [pc, #64]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d06:	4b0c      	ldr	r3, [pc, #48]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d12:	f7fd faf5 	bl	8003300 <HAL_GetTick>
 8005d16:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d18:	e010      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1a:	f7fd faf1 	bl	8003300 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d909      	bls.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e075      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005d2c:	42470068 	.word	0x42470068
 8005d30:	40023800 	.word	0x40023800
 8005d34:	42470070 	.word	0x42470070
 8005d38:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d3c:	4b38      	ldr	r3, [pc, #224]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0e8      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d48:	4b36      	ldr	r3, [pc, #216]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d50:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d02f      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d028      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d66:	4b2f      	ldr	r3, [pc, #188]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d70:	4b2d      	ldr	r3, [pc, #180]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d76:	4b2c      	ldr	r3, [pc, #176]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d7c:	4a29      	ldr	r2, [pc, #164]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d82:	4b28      	ldr	r3, [pc, #160]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d114      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d8e:	f7fd fab7 	bl	8003300 <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d94:	e00a      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d96:	f7fd fab3 	bl	8003300 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e035      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dac:	4b1d      	ldr	r3, [pc, #116]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0ee      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dc4:	d10d      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005dc6:	4b17      	ldr	r3, [pc, #92]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dda:	4912      	ldr	r1, [pc, #72]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	608b      	str	r3, [r1, #8]
 8005de0:	e005      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005de2:	4b10      	ldr	r3, [pc, #64]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	4a0f      	ldr	r2, [pc, #60]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005de8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005dec:	6093      	str	r3, [r2, #8]
 8005dee:	4b0d      	ldr	r3, [pc, #52]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005df0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dfa:	490a      	ldr	r1, [pc, #40]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005e12:	4b06      	ldr	r3, [pc, #24]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005e14:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40007000 	.word	0x40007000
 8005e24:	40023800 	.word	0x40023800
 8005e28:	42470e40 	.word	0x42470e40
 8005e2c:	424711e0 	.word	0x424711e0

08005e30 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e01c      	b.n	8005e7c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	795b      	ldrb	r3, [r3, #5]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d105      	bne.n	8005e58 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fc fcda 	bl	800280c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0204 	orr.w	r2, r2, #4
 8005e6c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	791b      	ldrb	r3, [r3, #4]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_RNG_GenerateRandomNumber+0x1a>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e044      	b.n	8005f28 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	795b      	ldrb	r3, [r3, #5]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d133      	bne.n	8005f16 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eb4:	f7fd fa24 	bl	8003300 <HAL_GetTick>
 8005eb8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005eba:	e018      	b.n	8005eee <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005ebc:	f7fd fa20 	bl	8003300 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d911      	bls.n	8005eee <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d00a      	beq.n	8005eee <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e01c      	b.n	8005f28 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d1df      	bne.n	8005ebc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	715a      	strb	r2, [r3, #5]
 8005f14:	e004      	b.n	8005f20 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2204      	movs	r2, #4
 8005f1a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	711a      	strb	r2, [r3, #4]

  return status;
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ffa0 	bl	8005e84 <HAL_RNG_GenerateRandomNumber>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d102      	bne.n	8005f50 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	e000      	b.n	8005f52 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005f50:	2300      	movs	r3, #0
  }
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e07b      	b.n	8006064 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d108      	bne.n	8005f86 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f7c:	d009      	beq.n	8005f92 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	61da      	str	r2, [r3, #28]
 8005f84:	e005      	b.n	8005f92 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d106      	bne.n	8005fb2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7fc fc4f 	bl	8002850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fc8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006016:	ea42 0103 	orr.w	r1, r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	0c1b      	lsrs	r3, r3, #16
 8006030:	f003 0104 	and.w	r1, r3, #4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	f003 0210 	and.w	r2, r3, #16
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69da      	ldr	r2, [r3, #28]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006052:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e01a      	b.n	80060b4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2202      	movs	r2, #2
 8006082:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006094:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fc fc22 	bl	80028e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	4613      	mov	r3, r2
 80060ca:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060cc:	f7fd f918 	bl	8003300 <HAL_GetTick>
 80060d0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80060d2:	88fb      	ldrh	r3, [r7, #6]
 80060d4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d001      	beq.n	80060e6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80060e2:	2302      	movs	r3, #2
 80060e4:	e12a      	b.n	800633c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <HAL_SPI_Transmit+0x36>
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e122      	b.n	800633c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_SPI_Transmit+0x48>
 8006100:	2302      	movs	r3, #2
 8006102:	e11b      	b.n	800633c <HAL_SPI_Transmit+0x280>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2203      	movs	r2, #3
 8006110:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	88fa      	ldrh	r2, [r7, #6]
 8006124:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	88fa      	ldrh	r2, [r7, #6]
 800612a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006152:	d10f      	bne.n	8006174 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006162:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006172:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617e:	2b40      	cmp	r3, #64	@ 0x40
 8006180:	d007      	beq.n	8006192 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006190:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800619a:	d152      	bne.n	8006242 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_SPI_Transmit+0xee>
 80061a4:	8b7b      	ldrh	r3, [r7, #26]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d145      	bne.n	8006236 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ae:	881a      	ldrh	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ba:	1c9a      	adds	r2, r3, #2
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061ce:	e032      	b.n	8006236 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d112      	bne.n	8006204 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e2:	881a      	ldrh	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ee:	1c9a      	adds	r2, r3, #2
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006202:	e018      	b.n	8006236 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006204:	f7fd f87c 	bl	8003300 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d803      	bhi.n	800621c <HAL_SPI_Transmit+0x160>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621a:	d102      	bne.n	8006222 <HAL_SPI_Transmit+0x166>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d109      	bne.n	8006236 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e082      	b.n	800633c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1c7      	bne.n	80061d0 <HAL_SPI_Transmit+0x114>
 8006240:	e053      	b.n	80062ea <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <HAL_SPI_Transmit+0x194>
 800624a:	8b7b      	ldrh	r3, [r7, #26]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d147      	bne.n	80062e0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	330c      	adds	r3, #12
 800625a:	7812      	ldrb	r2, [r2, #0]
 800625c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006276:	e033      	b.n	80062e0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b02      	cmp	r3, #2
 8006284:	d113      	bne.n	80062ae <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	330c      	adds	r3, #12
 8006290:	7812      	ldrb	r2, [r2, #0]
 8006292:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062ac:	e018      	b.n	80062e0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ae:	f7fd f827 	bl	8003300 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d803      	bhi.n	80062c6 <HAL_SPI_Transmit+0x20a>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d102      	bne.n	80062cc <HAL_SPI_Transmit+0x210>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e02d      	b.n	800633c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1c6      	bne.n	8006278 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f8be 	bl	8006470 <SPI_EndRxTxTransaction>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006308:	2300      	movs	r3, #0
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800633a:	2300      	movs	r3, #0
  }
}
 800633c:	4618      	mov	r0, r3
 800633e:	3720      	adds	r7, #32
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006352:	b2db      	uxtb	r3, r3
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006370:	f7fc ffc6 	bl	8003300 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	1a9b      	subs	r3, r3, r2
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	4413      	add	r3, r2
 800637e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006380:	f7fc ffbe 	bl	8003300 <HAL_GetTick>
 8006384:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006386:	4b39      	ldr	r3, [pc, #228]	@ (800646c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	015b      	lsls	r3, r3, #5
 800638c:	0d1b      	lsrs	r3, r3, #20
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	fb02 f303 	mul.w	r3, r2, r3
 8006394:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006396:	e054      	b.n	8006442 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d050      	beq.n	8006442 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063a0:	f7fc ffae 	bl	8003300 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d902      	bls.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d13d      	bne.n	8006432 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063ce:	d111      	bne.n	80063f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063d8:	d004      	beq.n	80063e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e2:	d107      	bne.n	80063f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063fc:	d10f      	bne.n	800641e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800641c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e017      	b.n	8006462 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	3b01      	subs	r3, #1
 8006440:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4013      	ands	r3, r2
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	429a      	cmp	r2, r3
 8006450:	bf0c      	ite	eq
 8006452:	2301      	moveq	r3, #1
 8006454:	2300      	movne	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	461a      	mov	r2, r3
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	429a      	cmp	r2, r3
 800645e:	d19b      	bne.n	8006398 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000080 	.word	0x20000080

08006470 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2201      	movs	r2, #1
 8006484:	2102      	movs	r1, #2
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7ff ff6a 	bl	8006360 <SPI_WaitFlagStateUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d007      	beq.n	80064a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006496:	f043 0220 	orr.w	r2, r3, #32
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e032      	b.n	8006508 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006510 <SPI_EndRxTxTransaction+0xa0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006514 <SPI_EndRxTxTransaction+0xa4>)
 80064a8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ac:	0d5b      	lsrs	r3, r3, #21
 80064ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064b2:	fb02 f303 	mul.w	r3, r2, r3
 80064b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064c0:	d112      	bne.n	80064e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2200      	movs	r2, #0
 80064ca:	2180      	movs	r1, #128	@ 0x80
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7ff ff47 	bl	8006360 <SPI_WaitFlagStateUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d016      	beq.n	8006506 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064dc:	f043 0220 	orr.w	r2, r3, #32
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e00f      	b.n	8006508 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064fe:	2b80      	cmp	r3, #128	@ 0x80
 8006500:	d0f2      	beq.n	80064e8 <SPI_EndRxTxTransaction+0x78>
 8006502:	e000      	b.n	8006506 <SPI_EndRxTxTransaction+0x96>
        break;
 8006504:	bf00      	nop
  }

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000080 	.word	0x20000080
 8006514:	165e9f81 	.word	0x165e9f81

08006518 <std>:
 8006518:	2300      	movs	r3, #0
 800651a:	b510      	push	{r4, lr}
 800651c:	4604      	mov	r4, r0
 800651e:	e9c0 3300 	strd	r3, r3, [r0]
 8006522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006526:	6083      	str	r3, [r0, #8]
 8006528:	8181      	strh	r1, [r0, #12]
 800652a:	6643      	str	r3, [r0, #100]	@ 0x64
 800652c:	81c2      	strh	r2, [r0, #14]
 800652e:	6183      	str	r3, [r0, #24]
 8006530:	4619      	mov	r1, r3
 8006532:	2208      	movs	r2, #8
 8006534:	305c      	adds	r0, #92	@ 0x5c
 8006536:	f000 fa19 	bl	800696c <memset>
 800653a:	4b0d      	ldr	r3, [pc, #52]	@ (8006570 <std+0x58>)
 800653c:	6263      	str	r3, [r4, #36]	@ 0x24
 800653e:	4b0d      	ldr	r3, [pc, #52]	@ (8006574 <std+0x5c>)
 8006540:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006542:	4b0d      	ldr	r3, [pc, #52]	@ (8006578 <std+0x60>)
 8006544:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006546:	4b0d      	ldr	r3, [pc, #52]	@ (800657c <std+0x64>)
 8006548:	6323      	str	r3, [r4, #48]	@ 0x30
 800654a:	4b0d      	ldr	r3, [pc, #52]	@ (8006580 <std+0x68>)
 800654c:	6224      	str	r4, [r4, #32]
 800654e:	429c      	cmp	r4, r3
 8006550:	d006      	beq.n	8006560 <std+0x48>
 8006552:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006556:	4294      	cmp	r4, r2
 8006558:	d002      	beq.n	8006560 <std+0x48>
 800655a:	33d0      	adds	r3, #208	@ 0xd0
 800655c:	429c      	cmp	r4, r3
 800655e:	d105      	bne.n	800656c <std+0x54>
 8006560:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006568:	f000 ba78 	b.w	8006a5c <__retarget_lock_init_recursive>
 800656c:	bd10      	pop	{r4, pc}
 800656e:	bf00      	nop
 8006570:	080067bd 	.word	0x080067bd
 8006574:	080067df 	.word	0x080067df
 8006578:	08006817 	.word	0x08006817
 800657c:	0800683b 	.word	0x0800683b
 8006580:	20025b4c 	.word	0x20025b4c

08006584 <stdio_exit_handler>:
 8006584:	4a02      	ldr	r2, [pc, #8]	@ (8006590 <stdio_exit_handler+0xc>)
 8006586:	4903      	ldr	r1, [pc, #12]	@ (8006594 <stdio_exit_handler+0x10>)
 8006588:	4803      	ldr	r0, [pc, #12]	@ (8006598 <stdio_exit_handler+0x14>)
 800658a:	f000 b869 	b.w	8006660 <_fwalk_sglue>
 800658e:	bf00      	nop
 8006590:	2000008c 	.word	0x2000008c
 8006594:	080075ad 	.word	0x080075ad
 8006598:	2000009c 	.word	0x2000009c

0800659c <cleanup_stdio>:
 800659c:	6841      	ldr	r1, [r0, #4]
 800659e:	4b0c      	ldr	r3, [pc, #48]	@ (80065d0 <cleanup_stdio+0x34>)
 80065a0:	4299      	cmp	r1, r3
 80065a2:	b510      	push	{r4, lr}
 80065a4:	4604      	mov	r4, r0
 80065a6:	d001      	beq.n	80065ac <cleanup_stdio+0x10>
 80065a8:	f001 f800 	bl	80075ac <_fflush_r>
 80065ac:	68a1      	ldr	r1, [r4, #8]
 80065ae:	4b09      	ldr	r3, [pc, #36]	@ (80065d4 <cleanup_stdio+0x38>)
 80065b0:	4299      	cmp	r1, r3
 80065b2:	d002      	beq.n	80065ba <cleanup_stdio+0x1e>
 80065b4:	4620      	mov	r0, r4
 80065b6:	f000 fff9 	bl	80075ac <_fflush_r>
 80065ba:	68e1      	ldr	r1, [r4, #12]
 80065bc:	4b06      	ldr	r3, [pc, #24]	@ (80065d8 <cleanup_stdio+0x3c>)
 80065be:	4299      	cmp	r1, r3
 80065c0:	d004      	beq.n	80065cc <cleanup_stdio+0x30>
 80065c2:	4620      	mov	r0, r4
 80065c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c8:	f000 bff0 	b.w	80075ac <_fflush_r>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	bf00      	nop
 80065d0:	20025b4c 	.word	0x20025b4c
 80065d4:	20025bb4 	.word	0x20025bb4
 80065d8:	20025c1c 	.word	0x20025c1c

080065dc <global_stdio_init.part.0>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	4b0b      	ldr	r3, [pc, #44]	@ (800660c <global_stdio_init.part.0+0x30>)
 80065e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006610 <global_stdio_init.part.0+0x34>)
 80065e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006614 <global_stdio_init.part.0+0x38>)
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	4620      	mov	r0, r4
 80065e8:	2200      	movs	r2, #0
 80065ea:	2104      	movs	r1, #4
 80065ec:	f7ff ff94 	bl	8006518 <std>
 80065f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065f4:	2201      	movs	r2, #1
 80065f6:	2109      	movs	r1, #9
 80065f8:	f7ff ff8e 	bl	8006518 <std>
 80065fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006600:	2202      	movs	r2, #2
 8006602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006606:	2112      	movs	r1, #18
 8006608:	f7ff bf86 	b.w	8006518 <std>
 800660c:	20025c84 	.word	0x20025c84
 8006610:	20025b4c 	.word	0x20025b4c
 8006614:	08006585 	.word	0x08006585

08006618 <__sfp_lock_acquire>:
 8006618:	4801      	ldr	r0, [pc, #4]	@ (8006620 <__sfp_lock_acquire+0x8>)
 800661a:	f000 ba20 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 800661e:	bf00      	nop
 8006620:	20025c8d 	.word	0x20025c8d

08006624 <__sfp_lock_release>:
 8006624:	4801      	ldr	r0, [pc, #4]	@ (800662c <__sfp_lock_release+0x8>)
 8006626:	f000 ba1b 	b.w	8006a60 <__retarget_lock_release_recursive>
 800662a:	bf00      	nop
 800662c:	20025c8d 	.word	0x20025c8d

08006630 <__sinit>:
 8006630:	b510      	push	{r4, lr}
 8006632:	4604      	mov	r4, r0
 8006634:	f7ff fff0 	bl	8006618 <__sfp_lock_acquire>
 8006638:	6a23      	ldr	r3, [r4, #32]
 800663a:	b11b      	cbz	r3, 8006644 <__sinit+0x14>
 800663c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006640:	f7ff bff0 	b.w	8006624 <__sfp_lock_release>
 8006644:	4b04      	ldr	r3, [pc, #16]	@ (8006658 <__sinit+0x28>)
 8006646:	6223      	str	r3, [r4, #32]
 8006648:	4b04      	ldr	r3, [pc, #16]	@ (800665c <__sinit+0x2c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f5      	bne.n	800663c <__sinit+0xc>
 8006650:	f7ff ffc4 	bl	80065dc <global_stdio_init.part.0>
 8006654:	e7f2      	b.n	800663c <__sinit+0xc>
 8006656:	bf00      	nop
 8006658:	0800659d 	.word	0x0800659d
 800665c:	20025c84 	.word	0x20025c84

08006660 <_fwalk_sglue>:
 8006660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006664:	4607      	mov	r7, r0
 8006666:	4688      	mov	r8, r1
 8006668:	4614      	mov	r4, r2
 800666a:	2600      	movs	r6, #0
 800666c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006670:	f1b9 0901 	subs.w	r9, r9, #1
 8006674:	d505      	bpl.n	8006682 <_fwalk_sglue+0x22>
 8006676:	6824      	ldr	r4, [r4, #0]
 8006678:	2c00      	cmp	r4, #0
 800667a:	d1f7      	bne.n	800666c <_fwalk_sglue+0xc>
 800667c:	4630      	mov	r0, r6
 800667e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006682:	89ab      	ldrh	r3, [r5, #12]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d907      	bls.n	8006698 <_fwalk_sglue+0x38>
 8006688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800668c:	3301      	adds	r3, #1
 800668e:	d003      	beq.n	8006698 <_fwalk_sglue+0x38>
 8006690:	4629      	mov	r1, r5
 8006692:	4638      	mov	r0, r7
 8006694:	47c0      	blx	r8
 8006696:	4306      	orrs	r6, r0
 8006698:	3568      	adds	r5, #104	@ 0x68
 800669a:	e7e9      	b.n	8006670 <_fwalk_sglue+0x10>

0800669c <iprintf>:
 800669c:	b40f      	push	{r0, r1, r2, r3}
 800669e:	b507      	push	{r0, r1, r2, lr}
 80066a0:	4906      	ldr	r1, [pc, #24]	@ (80066bc <iprintf+0x20>)
 80066a2:	ab04      	add	r3, sp, #16
 80066a4:	6808      	ldr	r0, [r1, #0]
 80066a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066aa:	6881      	ldr	r1, [r0, #8]
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	f000 fc53 	bl	8006f58 <_vfiprintf_r>
 80066b2:	b003      	add	sp, #12
 80066b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066b8:	b004      	add	sp, #16
 80066ba:	4770      	bx	lr
 80066bc:	20000098 	.word	0x20000098

080066c0 <_puts_r>:
 80066c0:	6a03      	ldr	r3, [r0, #32]
 80066c2:	b570      	push	{r4, r5, r6, lr}
 80066c4:	6884      	ldr	r4, [r0, #8]
 80066c6:	4605      	mov	r5, r0
 80066c8:	460e      	mov	r6, r1
 80066ca:	b90b      	cbnz	r3, 80066d0 <_puts_r+0x10>
 80066cc:	f7ff ffb0 	bl	8006630 <__sinit>
 80066d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066d2:	07db      	lsls	r3, r3, #31
 80066d4:	d405      	bmi.n	80066e2 <_puts_r+0x22>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	0598      	lsls	r0, r3, #22
 80066da:	d402      	bmi.n	80066e2 <_puts_r+0x22>
 80066dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066de:	f000 f9be 	bl	8006a5e <__retarget_lock_acquire_recursive>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	0719      	lsls	r1, r3, #28
 80066e6:	d502      	bpl.n	80066ee <_puts_r+0x2e>
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d135      	bne.n	800675a <_puts_r+0x9a>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4628      	mov	r0, r5
 80066f2:	f000 f8e5 	bl	80068c0 <__swsetup_r>
 80066f6:	b380      	cbz	r0, 800675a <_puts_r+0x9a>
 80066f8:	f04f 35ff 	mov.w	r5, #4294967295
 80066fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066fe:	07da      	lsls	r2, r3, #31
 8006700:	d405      	bmi.n	800670e <_puts_r+0x4e>
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	059b      	lsls	r3, r3, #22
 8006706:	d402      	bmi.n	800670e <_puts_r+0x4e>
 8006708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800670a:	f000 f9a9 	bl	8006a60 <__retarget_lock_release_recursive>
 800670e:	4628      	mov	r0, r5
 8006710:	bd70      	pop	{r4, r5, r6, pc}
 8006712:	2b00      	cmp	r3, #0
 8006714:	da04      	bge.n	8006720 <_puts_r+0x60>
 8006716:	69a2      	ldr	r2, [r4, #24]
 8006718:	429a      	cmp	r2, r3
 800671a:	dc17      	bgt.n	800674c <_puts_r+0x8c>
 800671c:	290a      	cmp	r1, #10
 800671e:	d015      	beq.n	800674c <_puts_r+0x8c>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	6022      	str	r2, [r4, #0]
 8006726:	7019      	strb	r1, [r3, #0]
 8006728:	68a3      	ldr	r3, [r4, #8]
 800672a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800672e:	3b01      	subs	r3, #1
 8006730:	60a3      	str	r3, [r4, #8]
 8006732:	2900      	cmp	r1, #0
 8006734:	d1ed      	bne.n	8006712 <_puts_r+0x52>
 8006736:	2b00      	cmp	r3, #0
 8006738:	da11      	bge.n	800675e <_puts_r+0x9e>
 800673a:	4622      	mov	r2, r4
 800673c:	210a      	movs	r1, #10
 800673e:	4628      	mov	r0, r5
 8006740:	f000 f87f 	bl	8006842 <__swbuf_r>
 8006744:	3001      	adds	r0, #1
 8006746:	d0d7      	beq.n	80066f8 <_puts_r+0x38>
 8006748:	250a      	movs	r5, #10
 800674a:	e7d7      	b.n	80066fc <_puts_r+0x3c>
 800674c:	4622      	mov	r2, r4
 800674e:	4628      	mov	r0, r5
 8006750:	f000 f877 	bl	8006842 <__swbuf_r>
 8006754:	3001      	adds	r0, #1
 8006756:	d1e7      	bne.n	8006728 <_puts_r+0x68>
 8006758:	e7ce      	b.n	80066f8 <_puts_r+0x38>
 800675a:	3e01      	subs	r6, #1
 800675c:	e7e4      	b.n	8006728 <_puts_r+0x68>
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	6022      	str	r2, [r4, #0]
 8006764:	220a      	movs	r2, #10
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e7ee      	b.n	8006748 <_puts_r+0x88>
	...

0800676c <puts>:
 800676c:	4b02      	ldr	r3, [pc, #8]	@ (8006778 <puts+0xc>)
 800676e:	4601      	mov	r1, r0
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	f7ff bfa5 	b.w	80066c0 <_puts_r>
 8006776:	bf00      	nop
 8006778:	20000098 	.word	0x20000098

0800677c <siprintf>:
 800677c:	b40e      	push	{r1, r2, r3}
 800677e:	b500      	push	{lr}
 8006780:	b09c      	sub	sp, #112	@ 0x70
 8006782:	ab1d      	add	r3, sp, #116	@ 0x74
 8006784:	9002      	str	r0, [sp, #8]
 8006786:	9006      	str	r0, [sp, #24]
 8006788:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800678c:	4809      	ldr	r0, [pc, #36]	@ (80067b4 <siprintf+0x38>)
 800678e:	9107      	str	r1, [sp, #28]
 8006790:	9104      	str	r1, [sp, #16]
 8006792:	4909      	ldr	r1, [pc, #36]	@ (80067b8 <siprintf+0x3c>)
 8006794:	f853 2b04 	ldr.w	r2, [r3], #4
 8006798:	9105      	str	r1, [sp, #20]
 800679a:	6800      	ldr	r0, [r0, #0]
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	a902      	add	r1, sp, #8
 80067a0:	f000 fab4 	bl	8006d0c <_svfiprintf_r>
 80067a4:	9b02      	ldr	r3, [sp, #8]
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	b01c      	add	sp, #112	@ 0x70
 80067ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b0:	b003      	add	sp, #12
 80067b2:	4770      	bx	lr
 80067b4:	20000098 	.word	0x20000098
 80067b8:	ffff0208 	.word	0xffff0208

080067bc <__sread>:
 80067bc:	b510      	push	{r4, lr}
 80067be:	460c      	mov	r4, r1
 80067c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c4:	f000 f8fc 	bl	80069c0 <_read_r>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	bfab      	itete	ge
 80067cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067ce:	89a3      	ldrhlt	r3, [r4, #12]
 80067d0:	181b      	addge	r3, r3, r0
 80067d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067d6:	bfac      	ite	ge
 80067d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067da:	81a3      	strhlt	r3, [r4, #12]
 80067dc:	bd10      	pop	{r4, pc}

080067de <__swrite>:
 80067de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e2:	461f      	mov	r7, r3
 80067e4:	898b      	ldrh	r3, [r1, #12]
 80067e6:	05db      	lsls	r3, r3, #23
 80067e8:	4605      	mov	r5, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	4616      	mov	r6, r2
 80067ee:	d505      	bpl.n	80067fc <__swrite+0x1e>
 80067f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f4:	2302      	movs	r3, #2
 80067f6:	2200      	movs	r2, #0
 80067f8:	f000 f8d0 	bl	800699c <_lseek_r>
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	4632      	mov	r2, r6
 800680a:	463b      	mov	r3, r7
 800680c:	4628      	mov	r0, r5
 800680e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006812:	f000 b8e7 	b.w	80069e4 <_write_r>

08006816 <__sseek>:
 8006816:	b510      	push	{r4, lr}
 8006818:	460c      	mov	r4, r1
 800681a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681e:	f000 f8bd 	bl	800699c <_lseek_r>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	bf15      	itete	ne
 8006828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800682a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800682e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006832:	81a3      	strheq	r3, [r4, #12]
 8006834:	bf18      	it	ne
 8006836:	81a3      	strhne	r3, [r4, #12]
 8006838:	bd10      	pop	{r4, pc}

0800683a <__sclose>:
 800683a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683e:	f000 b89d 	b.w	800697c <_close_r>

08006842 <__swbuf_r>:
 8006842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006844:	460e      	mov	r6, r1
 8006846:	4614      	mov	r4, r2
 8006848:	4605      	mov	r5, r0
 800684a:	b118      	cbz	r0, 8006854 <__swbuf_r+0x12>
 800684c:	6a03      	ldr	r3, [r0, #32]
 800684e:	b90b      	cbnz	r3, 8006854 <__swbuf_r+0x12>
 8006850:	f7ff feee 	bl	8006630 <__sinit>
 8006854:	69a3      	ldr	r3, [r4, #24]
 8006856:	60a3      	str	r3, [r4, #8]
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	071a      	lsls	r2, r3, #28
 800685c:	d501      	bpl.n	8006862 <__swbuf_r+0x20>
 800685e:	6923      	ldr	r3, [r4, #16]
 8006860:	b943      	cbnz	r3, 8006874 <__swbuf_r+0x32>
 8006862:	4621      	mov	r1, r4
 8006864:	4628      	mov	r0, r5
 8006866:	f000 f82b 	bl	80068c0 <__swsetup_r>
 800686a:	b118      	cbz	r0, 8006874 <__swbuf_r+0x32>
 800686c:	f04f 37ff 	mov.w	r7, #4294967295
 8006870:	4638      	mov	r0, r7
 8006872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	6922      	ldr	r2, [r4, #16]
 8006878:	1a98      	subs	r0, r3, r2
 800687a:	6963      	ldr	r3, [r4, #20]
 800687c:	b2f6      	uxtb	r6, r6
 800687e:	4283      	cmp	r3, r0
 8006880:	4637      	mov	r7, r6
 8006882:	dc05      	bgt.n	8006890 <__swbuf_r+0x4e>
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f000 fe90 	bl	80075ac <_fflush_r>
 800688c:	2800      	cmp	r0, #0
 800688e:	d1ed      	bne.n	800686c <__swbuf_r+0x2a>
 8006890:	68a3      	ldr	r3, [r4, #8]
 8006892:	3b01      	subs	r3, #1
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	6022      	str	r2, [r4, #0]
 800689c:	701e      	strb	r6, [r3, #0]
 800689e:	6962      	ldr	r2, [r4, #20]
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d004      	beq.n	80068b0 <__swbuf_r+0x6e>
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	07db      	lsls	r3, r3, #31
 80068aa:	d5e1      	bpl.n	8006870 <__swbuf_r+0x2e>
 80068ac:	2e0a      	cmp	r6, #10
 80068ae:	d1df      	bne.n	8006870 <__swbuf_r+0x2e>
 80068b0:	4621      	mov	r1, r4
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 fe7a 	bl	80075ac <_fflush_r>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d0d9      	beq.n	8006870 <__swbuf_r+0x2e>
 80068bc:	e7d6      	b.n	800686c <__swbuf_r+0x2a>
	...

080068c0 <__swsetup_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4b29      	ldr	r3, [pc, #164]	@ (8006968 <__swsetup_r+0xa8>)
 80068c4:	4605      	mov	r5, r0
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	460c      	mov	r4, r1
 80068ca:	b118      	cbz	r0, 80068d4 <__swsetup_r+0x14>
 80068cc:	6a03      	ldr	r3, [r0, #32]
 80068ce:	b90b      	cbnz	r3, 80068d4 <__swsetup_r+0x14>
 80068d0:	f7ff feae 	bl	8006630 <__sinit>
 80068d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068d8:	0719      	lsls	r1, r3, #28
 80068da:	d422      	bmi.n	8006922 <__swsetup_r+0x62>
 80068dc:	06da      	lsls	r2, r3, #27
 80068de:	d407      	bmi.n	80068f0 <__swsetup_r+0x30>
 80068e0:	2209      	movs	r2, #9
 80068e2:	602a      	str	r2, [r5, #0]
 80068e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068e8:	81a3      	strh	r3, [r4, #12]
 80068ea:	f04f 30ff 	mov.w	r0, #4294967295
 80068ee:	e033      	b.n	8006958 <__swsetup_r+0x98>
 80068f0:	0758      	lsls	r0, r3, #29
 80068f2:	d512      	bpl.n	800691a <__swsetup_r+0x5a>
 80068f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068f6:	b141      	cbz	r1, 800690a <__swsetup_r+0x4a>
 80068f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068fc:	4299      	cmp	r1, r3
 80068fe:	d002      	beq.n	8006906 <__swsetup_r+0x46>
 8006900:	4628      	mov	r0, r5
 8006902:	f000 f8af 	bl	8006a64 <_free_r>
 8006906:	2300      	movs	r3, #0
 8006908:	6363      	str	r3, [r4, #52]	@ 0x34
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	2300      	movs	r3, #0
 8006914:	6063      	str	r3, [r4, #4]
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	f043 0308 	orr.w	r3, r3, #8
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	b94b      	cbnz	r3, 800693a <__swsetup_r+0x7a>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800692c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006930:	d003      	beq.n	800693a <__swsetup_r+0x7a>
 8006932:	4621      	mov	r1, r4
 8006934:	4628      	mov	r0, r5
 8006936:	f000 fe87 	bl	8007648 <__smakebuf_r>
 800693a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800693e:	f013 0201 	ands.w	r2, r3, #1
 8006942:	d00a      	beq.n	800695a <__swsetup_r+0x9a>
 8006944:	2200      	movs	r2, #0
 8006946:	60a2      	str	r2, [r4, #8]
 8006948:	6962      	ldr	r2, [r4, #20]
 800694a:	4252      	negs	r2, r2
 800694c:	61a2      	str	r2, [r4, #24]
 800694e:	6922      	ldr	r2, [r4, #16]
 8006950:	b942      	cbnz	r2, 8006964 <__swsetup_r+0xa4>
 8006952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006956:	d1c5      	bne.n	80068e4 <__swsetup_r+0x24>
 8006958:	bd38      	pop	{r3, r4, r5, pc}
 800695a:	0799      	lsls	r1, r3, #30
 800695c:	bf58      	it	pl
 800695e:	6962      	ldrpl	r2, [r4, #20]
 8006960:	60a2      	str	r2, [r4, #8]
 8006962:	e7f4      	b.n	800694e <__swsetup_r+0x8e>
 8006964:	2000      	movs	r0, #0
 8006966:	e7f7      	b.n	8006958 <__swsetup_r+0x98>
 8006968:	20000098 	.word	0x20000098

0800696c <memset>:
 800696c:	4402      	add	r2, r0
 800696e:	4603      	mov	r3, r0
 8006970:	4293      	cmp	r3, r2
 8006972:	d100      	bne.n	8006976 <memset+0xa>
 8006974:	4770      	bx	lr
 8006976:	f803 1b01 	strb.w	r1, [r3], #1
 800697a:	e7f9      	b.n	8006970 <memset+0x4>

0800697c <_close_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d06      	ldr	r5, [pc, #24]	@ (8006998 <_close_r+0x1c>)
 8006980:	2300      	movs	r3, #0
 8006982:	4604      	mov	r4, r0
 8006984:	4608      	mov	r0, r1
 8006986:	602b      	str	r3, [r5, #0]
 8006988:	f7fc fbae 	bl	80030e8 <_close>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_close_r+0x1a>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b103      	cbz	r3, 8006996 <_close_r+0x1a>
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	20025c88 	.word	0x20025c88

0800699c <_lseek_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d07      	ldr	r5, [pc, #28]	@ (80069bc <_lseek_r+0x20>)
 80069a0:	4604      	mov	r4, r0
 80069a2:	4608      	mov	r0, r1
 80069a4:	4611      	mov	r1, r2
 80069a6:	2200      	movs	r2, #0
 80069a8:	602a      	str	r2, [r5, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f7fc fbc3 	bl	8003136 <_lseek>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_lseek_r+0x1e>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_lseek_r+0x1e>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	20025c88 	.word	0x20025c88

080069c0 <_read_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4d07      	ldr	r5, [pc, #28]	@ (80069e0 <_read_r+0x20>)
 80069c4:	4604      	mov	r4, r0
 80069c6:	4608      	mov	r0, r1
 80069c8:	4611      	mov	r1, r2
 80069ca:	2200      	movs	r2, #0
 80069cc:	602a      	str	r2, [r5, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f7fc fb51 	bl	8003076 <_read>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_read_r+0x1e>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_read_r+0x1e>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	20025c88 	.word	0x20025c88

080069e4 <_write_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4d07      	ldr	r5, [pc, #28]	@ (8006a04 <_write_r+0x20>)
 80069e8:	4604      	mov	r4, r0
 80069ea:	4608      	mov	r0, r1
 80069ec:	4611      	mov	r1, r2
 80069ee:	2200      	movs	r2, #0
 80069f0:	602a      	str	r2, [r5, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	f7fc fb5c 	bl	80030b0 <_write>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d102      	bne.n	8006a02 <_write_r+0x1e>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	b103      	cbz	r3, 8006a02 <_write_r+0x1e>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	20025c88 	.word	0x20025c88

08006a08 <__errno>:
 8006a08:	4b01      	ldr	r3, [pc, #4]	@ (8006a10 <__errno+0x8>)
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	20000098 	.word	0x20000098

08006a14 <__libc_init_array>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	4d0d      	ldr	r5, [pc, #52]	@ (8006a4c <__libc_init_array+0x38>)
 8006a18:	4c0d      	ldr	r4, [pc, #52]	@ (8006a50 <__libc_init_array+0x3c>)
 8006a1a:	1b64      	subs	r4, r4, r5
 8006a1c:	10a4      	asrs	r4, r4, #2
 8006a1e:	2600      	movs	r6, #0
 8006a20:	42a6      	cmp	r6, r4
 8006a22:	d109      	bne.n	8006a38 <__libc_init_array+0x24>
 8006a24:	4d0b      	ldr	r5, [pc, #44]	@ (8006a54 <__libc_init_array+0x40>)
 8006a26:	4c0c      	ldr	r4, [pc, #48]	@ (8006a58 <__libc_init_array+0x44>)
 8006a28:	f000 feda 	bl	80077e0 <_init>
 8006a2c:	1b64      	subs	r4, r4, r5
 8006a2e:	10a4      	asrs	r4, r4, #2
 8006a30:	2600      	movs	r6, #0
 8006a32:	42a6      	cmp	r6, r4
 8006a34:	d105      	bne.n	8006a42 <__libc_init_array+0x2e>
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3c:	4798      	blx	r3
 8006a3e:	3601      	adds	r6, #1
 8006a40:	e7ee      	b.n	8006a20 <__libc_init_array+0xc>
 8006a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a46:	4798      	blx	r3
 8006a48:	3601      	adds	r6, #1
 8006a4a:	e7f2      	b.n	8006a32 <__libc_init_array+0x1e>
 8006a4c:	08008a74 	.word	0x08008a74
 8006a50:	08008a74 	.word	0x08008a74
 8006a54:	08008a74 	.word	0x08008a74
 8006a58:	08008a78 	.word	0x08008a78

08006a5c <__retarget_lock_init_recursive>:
 8006a5c:	4770      	bx	lr

08006a5e <__retarget_lock_acquire_recursive>:
 8006a5e:	4770      	bx	lr

08006a60 <__retarget_lock_release_recursive>:
 8006a60:	4770      	bx	lr
	...

08006a64 <_free_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4605      	mov	r5, r0
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	d041      	beq.n	8006af0 <_free_r+0x8c>
 8006a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a70:	1f0c      	subs	r4, r1, #4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	bfb8      	it	lt
 8006a76:	18e4      	addlt	r4, r4, r3
 8006a78:	f000 f8e0 	bl	8006c3c <__malloc_lock>
 8006a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006af4 <_free_r+0x90>)
 8006a7e:	6813      	ldr	r3, [r2, #0]
 8006a80:	b933      	cbnz	r3, 8006a90 <_free_r+0x2c>
 8006a82:	6063      	str	r3, [r4, #4]
 8006a84:	6014      	str	r4, [r2, #0]
 8006a86:	4628      	mov	r0, r5
 8006a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a8c:	f000 b8dc 	b.w	8006c48 <__malloc_unlock>
 8006a90:	42a3      	cmp	r3, r4
 8006a92:	d908      	bls.n	8006aa6 <_free_r+0x42>
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	1821      	adds	r1, r4, r0
 8006a98:	428b      	cmp	r3, r1
 8006a9a:	bf01      	itttt	eq
 8006a9c:	6819      	ldreq	r1, [r3, #0]
 8006a9e:	685b      	ldreq	r3, [r3, #4]
 8006aa0:	1809      	addeq	r1, r1, r0
 8006aa2:	6021      	streq	r1, [r4, #0]
 8006aa4:	e7ed      	b.n	8006a82 <_free_r+0x1e>
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	b10b      	cbz	r3, 8006ab0 <_free_r+0x4c>
 8006aac:	42a3      	cmp	r3, r4
 8006aae:	d9fa      	bls.n	8006aa6 <_free_r+0x42>
 8006ab0:	6811      	ldr	r1, [r2, #0]
 8006ab2:	1850      	adds	r0, r2, r1
 8006ab4:	42a0      	cmp	r0, r4
 8006ab6:	d10b      	bne.n	8006ad0 <_free_r+0x6c>
 8006ab8:	6820      	ldr	r0, [r4, #0]
 8006aba:	4401      	add	r1, r0
 8006abc:	1850      	adds	r0, r2, r1
 8006abe:	4283      	cmp	r3, r0
 8006ac0:	6011      	str	r1, [r2, #0]
 8006ac2:	d1e0      	bne.n	8006a86 <_free_r+0x22>
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	6053      	str	r3, [r2, #4]
 8006aca:	4408      	add	r0, r1
 8006acc:	6010      	str	r0, [r2, #0]
 8006ace:	e7da      	b.n	8006a86 <_free_r+0x22>
 8006ad0:	d902      	bls.n	8006ad8 <_free_r+0x74>
 8006ad2:	230c      	movs	r3, #12
 8006ad4:	602b      	str	r3, [r5, #0]
 8006ad6:	e7d6      	b.n	8006a86 <_free_r+0x22>
 8006ad8:	6820      	ldr	r0, [r4, #0]
 8006ada:	1821      	adds	r1, r4, r0
 8006adc:	428b      	cmp	r3, r1
 8006ade:	bf04      	itt	eq
 8006ae0:	6819      	ldreq	r1, [r3, #0]
 8006ae2:	685b      	ldreq	r3, [r3, #4]
 8006ae4:	6063      	str	r3, [r4, #4]
 8006ae6:	bf04      	itt	eq
 8006ae8:	1809      	addeq	r1, r1, r0
 8006aea:	6021      	streq	r1, [r4, #0]
 8006aec:	6054      	str	r4, [r2, #4]
 8006aee:	e7ca      	b.n	8006a86 <_free_r+0x22>
 8006af0:	bd38      	pop	{r3, r4, r5, pc}
 8006af2:	bf00      	nop
 8006af4:	20025c94 	.word	0x20025c94

08006af8 <sbrk_aligned>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4e0f      	ldr	r6, [pc, #60]	@ (8006b38 <sbrk_aligned+0x40>)
 8006afc:	460c      	mov	r4, r1
 8006afe:	6831      	ldr	r1, [r6, #0]
 8006b00:	4605      	mov	r5, r0
 8006b02:	b911      	cbnz	r1, 8006b0a <sbrk_aligned+0x12>
 8006b04:	f000 fe18 	bl	8007738 <_sbrk_r>
 8006b08:	6030      	str	r0, [r6, #0]
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f000 fe13 	bl	8007738 <_sbrk_r>
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	d103      	bne.n	8006b1e <sbrk_aligned+0x26>
 8006b16:	f04f 34ff 	mov.w	r4, #4294967295
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	1cc4      	adds	r4, r0, #3
 8006b20:	f024 0403 	bic.w	r4, r4, #3
 8006b24:	42a0      	cmp	r0, r4
 8006b26:	d0f8      	beq.n	8006b1a <sbrk_aligned+0x22>
 8006b28:	1a21      	subs	r1, r4, r0
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 fe04 	bl	8007738 <_sbrk_r>
 8006b30:	3001      	adds	r0, #1
 8006b32:	d1f2      	bne.n	8006b1a <sbrk_aligned+0x22>
 8006b34:	e7ef      	b.n	8006b16 <sbrk_aligned+0x1e>
 8006b36:	bf00      	nop
 8006b38:	20025c90 	.word	0x20025c90

08006b3c <_malloc_r>:
 8006b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b40:	1ccd      	adds	r5, r1, #3
 8006b42:	f025 0503 	bic.w	r5, r5, #3
 8006b46:	3508      	adds	r5, #8
 8006b48:	2d0c      	cmp	r5, #12
 8006b4a:	bf38      	it	cc
 8006b4c:	250c      	movcc	r5, #12
 8006b4e:	2d00      	cmp	r5, #0
 8006b50:	4606      	mov	r6, r0
 8006b52:	db01      	blt.n	8006b58 <_malloc_r+0x1c>
 8006b54:	42a9      	cmp	r1, r5
 8006b56:	d904      	bls.n	8006b62 <_malloc_r+0x26>
 8006b58:	230c      	movs	r3, #12
 8006b5a:	6033      	str	r3, [r6, #0]
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c38 <_malloc_r+0xfc>
 8006b66:	f000 f869 	bl	8006c3c <__malloc_lock>
 8006b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b6e:	461c      	mov	r4, r3
 8006b70:	bb44      	cbnz	r4, 8006bc4 <_malloc_r+0x88>
 8006b72:	4629      	mov	r1, r5
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7ff ffbf 	bl	8006af8 <sbrk_aligned>
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	d158      	bne.n	8006c32 <_malloc_r+0xf6>
 8006b80:	f8d8 4000 	ldr.w	r4, [r8]
 8006b84:	4627      	mov	r7, r4
 8006b86:	2f00      	cmp	r7, #0
 8006b88:	d143      	bne.n	8006c12 <_malloc_r+0xd6>
 8006b8a:	2c00      	cmp	r4, #0
 8006b8c:	d04b      	beq.n	8006c26 <_malloc_r+0xea>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	4639      	mov	r1, r7
 8006b92:	4630      	mov	r0, r6
 8006b94:	eb04 0903 	add.w	r9, r4, r3
 8006b98:	f000 fdce 	bl	8007738 <_sbrk_r>
 8006b9c:	4581      	cmp	r9, r0
 8006b9e:	d142      	bne.n	8006c26 <_malloc_r+0xea>
 8006ba0:	6821      	ldr	r1, [r4, #0]
 8006ba2:	1a6d      	subs	r5, r5, r1
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f7ff ffa6 	bl	8006af8 <sbrk_aligned>
 8006bac:	3001      	adds	r0, #1
 8006bae:	d03a      	beq.n	8006c26 <_malloc_r+0xea>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	442b      	add	r3, r5
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	bb62      	cbnz	r2, 8006c18 <_malloc_r+0xdc>
 8006bbe:	f8c8 7000 	str.w	r7, [r8]
 8006bc2:	e00f      	b.n	8006be4 <_malloc_r+0xa8>
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	1b52      	subs	r2, r2, r5
 8006bc8:	d420      	bmi.n	8006c0c <_malloc_r+0xd0>
 8006bca:	2a0b      	cmp	r2, #11
 8006bcc:	d917      	bls.n	8006bfe <_malloc_r+0xc2>
 8006bce:	1961      	adds	r1, r4, r5
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	6025      	str	r5, [r4, #0]
 8006bd4:	bf18      	it	ne
 8006bd6:	6059      	strne	r1, [r3, #4]
 8006bd8:	6863      	ldr	r3, [r4, #4]
 8006bda:	bf08      	it	eq
 8006bdc:	f8c8 1000 	streq.w	r1, [r8]
 8006be0:	5162      	str	r2, [r4, r5]
 8006be2:	604b      	str	r3, [r1, #4]
 8006be4:	4630      	mov	r0, r6
 8006be6:	f000 f82f 	bl	8006c48 <__malloc_unlock>
 8006bea:	f104 000b 	add.w	r0, r4, #11
 8006bee:	1d23      	adds	r3, r4, #4
 8006bf0:	f020 0007 	bic.w	r0, r0, #7
 8006bf4:	1ac2      	subs	r2, r0, r3
 8006bf6:	bf1c      	itt	ne
 8006bf8:	1a1b      	subne	r3, r3, r0
 8006bfa:	50a3      	strne	r3, [r4, r2]
 8006bfc:	e7af      	b.n	8006b5e <_malloc_r+0x22>
 8006bfe:	6862      	ldr	r2, [r4, #4]
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	bf0c      	ite	eq
 8006c04:	f8c8 2000 	streq.w	r2, [r8]
 8006c08:	605a      	strne	r2, [r3, #4]
 8006c0a:	e7eb      	b.n	8006be4 <_malloc_r+0xa8>
 8006c0c:	4623      	mov	r3, r4
 8006c0e:	6864      	ldr	r4, [r4, #4]
 8006c10:	e7ae      	b.n	8006b70 <_malloc_r+0x34>
 8006c12:	463c      	mov	r4, r7
 8006c14:	687f      	ldr	r7, [r7, #4]
 8006c16:	e7b6      	b.n	8006b86 <_malloc_r+0x4a>
 8006c18:	461a      	mov	r2, r3
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d1fb      	bne.n	8006c18 <_malloc_r+0xdc>
 8006c20:	2300      	movs	r3, #0
 8006c22:	6053      	str	r3, [r2, #4]
 8006c24:	e7de      	b.n	8006be4 <_malloc_r+0xa8>
 8006c26:	230c      	movs	r3, #12
 8006c28:	6033      	str	r3, [r6, #0]
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f000 f80c 	bl	8006c48 <__malloc_unlock>
 8006c30:	e794      	b.n	8006b5c <_malloc_r+0x20>
 8006c32:	6005      	str	r5, [r0, #0]
 8006c34:	e7d6      	b.n	8006be4 <_malloc_r+0xa8>
 8006c36:	bf00      	nop
 8006c38:	20025c94 	.word	0x20025c94

08006c3c <__malloc_lock>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	@ (8006c44 <__malloc_lock+0x8>)
 8006c3e:	f7ff bf0e 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 8006c42:	bf00      	nop
 8006c44:	20025c8c 	.word	0x20025c8c

08006c48 <__malloc_unlock>:
 8006c48:	4801      	ldr	r0, [pc, #4]	@ (8006c50 <__malloc_unlock+0x8>)
 8006c4a:	f7ff bf09 	b.w	8006a60 <__retarget_lock_release_recursive>
 8006c4e:	bf00      	nop
 8006c50:	20025c8c 	.word	0x20025c8c

08006c54 <__ssputs_r>:
 8006c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c58:	688e      	ldr	r6, [r1, #8]
 8006c5a:	461f      	mov	r7, r3
 8006c5c:	42be      	cmp	r6, r7
 8006c5e:	680b      	ldr	r3, [r1, #0]
 8006c60:	4682      	mov	sl, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	4690      	mov	r8, r2
 8006c66:	d82d      	bhi.n	8006cc4 <__ssputs_r+0x70>
 8006c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c70:	d026      	beq.n	8006cc0 <__ssputs_r+0x6c>
 8006c72:	6965      	ldr	r5, [r4, #20]
 8006c74:	6909      	ldr	r1, [r1, #16]
 8006c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c7a:	eba3 0901 	sub.w	r9, r3, r1
 8006c7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c82:	1c7b      	adds	r3, r7, #1
 8006c84:	444b      	add	r3, r9
 8006c86:	106d      	asrs	r5, r5, #1
 8006c88:	429d      	cmp	r5, r3
 8006c8a:	bf38      	it	cc
 8006c8c:	461d      	movcc	r5, r3
 8006c8e:	0553      	lsls	r3, r2, #21
 8006c90:	d527      	bpl.n	8006ce2 <__ssputs_r+0x8e>
 8006c92:	4629      	mov	r1, r5
 8006c94:	f7ff ff52 	bl	8006b3c <_malloc_r>
 8006c98:	4606      	mov	r6, r0
 8006c9a:	b360      	cbz	r0, 8006cf6 <__ssputs_r+0xa2>
 8006c9c:	6921      	ldr	r1, [r4, #16]
 8006c9e:	464a      	mov	r2, r9
 8006ca0:	f000 fd5a 	bl	8007758 <memcpy>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	6126      	str	r6, [r4, #16]
 8006cb2:	6165      	str	r5, [r4, #20]
 8006cb4:	444e      	add	r6, r9
 8006cb6:	eba5 0509 	sub.w	r5, r5, r9
 8006cba:	6026      	str	r6, [r4, #0]
 8006cbc:	60a5      	str	r5, [r4, #8]
 8006cbe:	463e      	mov	r6, r7
 8006cc0:	42be      	cmp	r6, r7
 8006cc2:	d900      	bls.n	8006cc6 <__ssputs_r+0x72>
 8006cc4:	463e      	mov	r6, r7
 8006cc6:	6820      	ldr	r0, [r4, #0]
 8006cc8:	4632      	mov	r2, r6
 8006cca:	4641      	mov	r1, r8
 8006ccc:	f000 fcf8 	bl	80076c0 <memmove>
 8006cd0:	68a3      	ldr	r3, [r4, #8]
 8006cd2:	1b9b      	subs	r3, r3, r6
 8006cd4:	60a3      	str	r3, [r4, #8]
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	4433      	add	r3, r6
 8006cda:	6023      	str	r3, [r4, #0]
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce2:	462a      	mov	r2, r5
 8006ce4:	f000 fd46 	bl	8007774 <_realloc_r>
 8006ce8:	4606      	mov	r6, r0
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d1e0      	bne.n	8006cb0 <__ssputs_r+0x5c>
 8006cee:	6921      	ldr	r1, [r4, #16]
 8006cf0:	4650      	mov	r0, sl
 8006cf2:	f7ff feb7 	bl	8006a64 <_free_r>
 8006cf6:	230c      	movs	r3, #12
 8006cf8:	f8ca 3000 	str.w	r3, [sl]
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d02:	81a3      	strh	r3, [r4, #12]
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	e7e9      	b.n	8006cde <__ssputs_r+0x8a>
	...

08006d0c <_svfiprintf_r>:
 8006d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d10:	4698      	mov	r8, r3
 8006d12:	898b      	ldrh	r3, [r1, #12]
 8006d14:	061b      	lsls	r3, r3, #24
 8006d16:	b09d      	sub	sp, #116	@ 0x74
 8006d18:	4607      	mov	r7, r0
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	d510      	bpl.n	8006d42 <_svfiprintf_r+0x36>
 8006d20:	690b      	ldr	r3, [r1, #16]
 8006d22:	b973      	cbnz	r3, 8006d42 <_svfiprintf_r+0x36>
 8006d24:	2140      	movs	r1, #64	@ 0x40
 8006d26:	f7ff ff09 	bl	8006b3c <_malloc_r>
 8006d2a:	6028      	str	r0, [r5, #0]
 8006d2c:	6128      	str	r0, [r5, #16]
 8006d2e:	b930      	cbnz	r0, 8006d3e <_svfiprintf_r+0x32>
 8006d30:	230c      	movs	r3, #12
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	f04f 30ff 	mov.w	r0, #4294967295
 8006d38:	b01d      	add	sp, #116	@ 0x74
 8006d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3e:	2340      	movs	r3, #64	@ 0x40
 8006d40:	616b      	str	r3, [r5, #20]
 8006d42:	2300      	movs	r3, #0
 8006d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d46:	2320      	movs	r3, #32
 8006d48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d50:	2330      	movs	r3, #48	@ 0x30
 8006d52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ef0 <_svfiprintf_r+0x1e4>
 8006d56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d5a:	f04f 0901 	mov.w	r9, #1
 8006d5e:	4623      	mov	r3, r4
 8006d60:	469a      	mov	sl, r3
 8006d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d66:	b10a      	cbz	r2, 8006d6c <_svfiprintf_r+0x60>
 8006d68:	2a25      	cmp	r2, #37	@ 0x25
 8006d6a:	d1f9      	bne.n	8006d60 <_svfiprintf_r+0x54>
 8006d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006d70:	d00b      	beq.n	8006d8a <_svfiprintf_r+0x7e>
 8006d72:	465b      	mov	r3, fp
 8006d74:	4622      	mov	r2, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f7ff ff6b 	bl	8006c54 <__ssputs_r>
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f000 80a7 	beq.w	8006ed2 <_svfiprintf_r+0x1c6>
 8006d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d86:	445a      	add	r2, fp
 8006d88:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 809f 	beq.w	8006ed2 <_svfiprintf_r+0x1c6>
 8006d94:	2300      	movs	r3, #0
 8006d96:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d9e:	f10a 0a01 	add.w	sl, sl, #1
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	9307      	str	r3, [sp, #28]
 8006da6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006daa:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dac:	4654      	mov	r4, sl
 8006dae:	2205      	movs	r2, #5
 8006db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db4:	484e      	ldr	r0, [pc, #312]	@ (8006ef0 <_svfiprintf_r+0x1e4>)
 8006db6:	f7f9 fa1b 	bl	80001f0 <memchr>
 8006dba:	9a04      	ldr	r2, [sp, #16]
 8006dbc:	b9d8      	cbnz	r0, 8006df6 <_svfiprintf_r+0xea>
 8006dbe:	06d0      	lsls	r0, r2, #27
 8006dc0:	bf44      	itt	mi
 8006dc2:	2320      	movmi	r3, #32
 8006dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dc8:	0711      	lsls	r1, r2, #28
 8006dca:	bf44      	itt	mi
 8006dcc:	232b      	movmi	r3, #43	@ 0x2b
 8006dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dd8:	d015      	beq.n	8006e06 <_svfiprintf_r+0xfa>
 8006dda:	9a07      	ldr	r2, [sp, #28]
 8006ddc:	4654      	mov	r4, sl
 8006dde:	2000      	movs	r0, #0
 8006de0:	f04f 0c0a 	mov.w	ip, #10
 8006de4:	4621      	mov	r1, r4
 8006de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dea:	3b30      	subs	r3, #48	@ 0x30
 8006dec:	2b09      	cmp	r3, #9
 8006dee:	d94b      	bls.n	8006e88 <_svfiprintf_r+0x17c>
 8006df0:	b1b0      	cbz	r0, 8006e20 <_svfiprintf_r+0x114>
 8006df2:	9207      	str	r2, [sp, #28]
 8006df4:	e014      	b.n	8006e20 <_svfiprintf_r+0x114>
 8006df6:	eba0 0308 	sub.w	r3, r0, r8
 8006dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	9304      	str	r3, [sp, #16]
 8006e02:	46a2      	mov	sl, r4
 8006e04:	e7d2      	b.n	8006dac <_svfiprintf_r+0xa0>
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	1d19      	adds	r1, r3, #4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	9103      	str	r1, [sp, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bfbb      	ittet	lt
 8006e12:	425b      	neglt	r3, r3
 8006e14:	f042 0202 	orrlt.w	r2, r2, #2
 8006e18:	9307      	strge	r3, [sp, #28]
 8006e1a:	9307      	strlt	r3, [sp, #28]
 8006e1c:	bfb8      	it	lt
 8006e1e:	9204      	strlt	r2, [sp, #16]
 8006e20:	7823      	ldrb	r3, [r4, #0]
 8006e22:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e24:	d10a      	bne.n	8006e3c <_svfiprintf_r+0x130>
 8006e26:	7863      	ldrb	r3, [r4, #1]
 8006e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e2a:	d132      	bne.n	8006e92 <_svfiprintf_r+0x186>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	1d1a      	adds	r2, r3, #4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	9203      	str	r2, [sp, #12]
 8006e34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e38:	3402      	adds	r4, #2
 8006e3a:	9305      	str	r3, [sp, #20]
 8006e3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f00 <_svfiprintf_r+0x1f4>
 8006e40:	7821      	ldrb	r1, [r4, #0]
 8006e42:	2203      	movs	r2, #3
 8006e44:	4650      	mov	r0, sl
 8006e46:	f7f9 f9d3 	bl	80001f0 <memchr>
 8006e4a:	b138      	cbz	r0, 8006e5c <_svfiprintf_r+0x150>
 8006e4c:	9b04      	ldr	r3, [sp, #16]
 8006e4e:	eba0 000a 	sub.w	r0, r0, sl
 8006e52:	2240      	movs	r2, #64	@ 0x40
 8006e54:	4082      	lsls	r2, r0
 8006e56:	4313      	orrs	r3, r2
 8006e58:	3401      	adds	r4, #1
 8006e5a:	9304      	str	r3, [sp, #16]
 8006e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e60:	4824      	ldr	r0, [pc, #144]	@ (8006ef4 <_svfiprintf_r+0x1e8>)
 8006e62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e66:	2206      	movs	r2, #6
 8006e68:	f7f9 f9c2 	bl	80001f0 <memchr>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d036      	beq.n	8006ede <_svfiprintf_r+0x1d2>
 8006e70:	4b21      	ldr	r3, [pc, #132]	@ (8006ef8 <_svfiprintf_r+0x1ec>)
 8006e72:	bb1b      	cbnz	r3, 8006ebc <_svfiprintf_r+0x1b0>
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	3307      	adds	r3, #7
 8006e78:	f023 0307 	bic.w	r3, r3, #7
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	9303      	str	r3, [sp, #12]
 8006e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e82:	4433      	add	r3, r6
 8006e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e86:	e76a      	b.n	8006d5e <_svfiprintf_r+0x52>
 8006e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	2001      	movs	r0, #1
 8006e90:	e7a8      	b.n	8006de4 <_svfiprintf_r+0xd8>
 8006e92:	2300      	movs	r3, #0
 8006e94:	3401      	adds	r4, #1
 8006e96:	9305      	str	r3, [sp, #20]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f04f 0c0a 	mov.w	ip, #10
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ea4:	3a30      	subs	r2, #48	@ 0x30
 8006ea6:	2a09      	cmp	r2, #9
 8006ea8:	d903      	bls.n	8006eb2 <_svfiprintf_r+0x1a6>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0c6      	beq.n	8006e3c <_svfiprintf_r+0x130>
 8006eae:	9105      	str	r1, [sp, #20]
 8006eb0:	e7c4      	b.n	8006e3c <_svfiprintf_r+0x130>
 8006eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e7f0      	b.n	8006e9e <_svfiprintf_r+0x192>
 8006ebc:	ab03      	add	r3, sp, #12
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	462a      	mov	r2, r5
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8006efc <_svfiprintf_r+0x1f0>)
 8006ec4:	a904      	add	r1, sp, #16
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	f3af 8000 	nop.w
 8006ecc:	1c42      	adds	r2, r0, #1
 8006ece:	4606      	mov	r6, r0
 8006ed0:	d1d6      	bne.n	8006e80 <_svfiprintf_r+0x174>
 8006ed2:	89ab      	ldrh	r3, [r5, #12]
 8006ed4:	065b      	lsls	r3, r3, #25
 8006ed6:	f53f af2d 	bmi.w	8006d34 <_svfiprintf_r+0x28>
 8006eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006edc:	e72c      	b.n	8006d38 <_svfiprintf_r+0x2c>
 8006ede:	ab03      	add	r3, sp, #12
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	462a      	mov	r2, r5
 8006ee4:	4b05      	ldr	r3, [pc, #20]	@ (8006efc <_svfiprintf_r+0x1f0>)
 8006ee6:	a904      	add	r1, sp, #16
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f000 f9bb 	bl	8007264 <_printf_i>
 8006eee:	e7ed      	b.n	8006ecc <_svfiprintf_r+0x1c0>
 8006ef0:	08008a38 	.word	0x08008a38
 8006ef4:	08008a42 	.word	0x08008a42
 8006ef8:	00000000 	.word	0x00000000
 8006efc:	08006c55 	.word	0x08006c55
 8006f00:	08008a3e 	.word	0x08008a3e

08006f04 <__sfputc_r>:
 8006f04:	6893      	ldr	r3, [r2, #8]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	b410      	push	{r4}
 8006f0c:	6093      	str	r3, [r2, #8]
 8006f0e:	da08      	bge.n	8006f22 <__sfputc_r+0x1e>
 8006f10:	6994      	ldr	r4, [r2, #24]
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	db01      	blt.n	8006f1a <__sfputc_r+0x16>
 8006f16:	290a      	cmp	r1, #10
 8006f18:	d103      	bne.n	8006f22 <__sfputc_r+0x1e>
 8006f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f1e:	f7ff bc90 	b.w	8006842 <__swbuf_r>
 8006f22:	6813      	ldr	r3, [r2, #0]
 8006f24:	1c58      	adds	r0, r3, #1
 8006f26:	6010      	str	r0, [r2, #0]
 8006f28:	7019      	strb	r1, [r3, #0]
 8006f2a:	4608      	mov	r0, r1
 8006f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <__sfputs_r>:
 8006f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f34:	4606      	mov	r6, r0
 8006f36:	460f      	mov	r7, r1
 8006f38:	4614      	mov	r4, r2
 8006f3a:	18d5      	adds	r5, r2, r3
 8006f3c:	42ac      	cmp	r4, r5
 8006f3e:	d101      	bne.n	8006f44 <__sfputs_r+0x12>
 8006f40:	2000      	movs	r0, #0
 8006f42:	e007      	b.n	8006f54 <__sfputs_r+0x22>
 8006f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f48:	463a      	mov	r2, r7
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f7ff ffda 	bl	8006f04 <__sfputc_r>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d1f3      	bne.n	8006f3c <__sfputs_r+0xa>
 8006f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f58 <_vfiprintf_r>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	460d      	mov	r5, r1
 8006f5e:	b09d      	sub	sp, #116	@ 0x74
 8006f60:	4614      	mov	r4, r2
 8006f62:	4698      	mov	r8, r3
 8006f64:	4606      	mov	r6, r0
 8006f66:	b118      	cbz	r0, 8006f70 <_vfiprintf_r+0x18>
 8006f68:	6a03      	ldr	r3, [r0, #32]
 8006f6a:	b90b      	cbnz	r3, 8006f70 <_vfiprintf_r+0x18>
 8006f6c:	f7ff fb60 	bl	8006630 <__sinit>
 8006f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f72:	07d9      	lsls	r1, r3, #31
 8006f74:	d405      	bmi.n	8006f82 <_vfiprintf_r+0x2a>
 8006f76:	89ab      	ldrh	r3, [r5, #12]
 8006f78:	059a      	lsls	r2, r3, #22
 8006f7a:	d402      	bmi.n	8006f82 <_vfiprintf_r+0x2a>
 8006f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f7e:	f7ff fd6e 	bl	8006a5e <__retarget_lock_acquire_recursive>
 8006f82:	89ab      	ldrh	r3, [r5, #12]
 8006f84:	071b      	lsls	r3, r3, #28
 8006f86:	d501      	bpl.n	8006f8c <_vfiprintf_r+0x34>
 8006f88:	692b      	ldr	r3, [r5, #16]
 8006f8a:	b99b      	cbnz	r3, 8006fb4 <_vfiprintf_r+0x5c>
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff fc96 	bl	80068c0 <__swsetup_r>
 8006f94:	b170      	cbz	r0, 8006fb4 <_vfiprintf_r+0x5c>
 8006f96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f98:	07dc      	lsls	r4, r3, #31
 8006f9a:	d504      	bpl.n	8006fa6 <_vfiprintf_r+0x4e>
 8006f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa0:	b01d      	add	sp, #116	@ 0x74
 8006fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa6:	89ab      	ldrh	r3, [r5, #12]
 8006fa8:	0598      	lsls	r0, r3, #22
 8006faa:	d4f7      	bmi.n	8006f9c <_vfiprintf_r+0x44>
 8006fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fae:	f7ff fd57 	bl	8006a60 <__retarget_lock_release_recursive>
 8006fb2:	e7f3      	b.n	8006f9c <_vfiprintf_r+0x44>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fb8:	2320      	movs	r3, #32
 8006fba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fc2:	2330      	movs	r3, #48	@ 0x30
 8006fc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007174 <_vfiprintf_r+0x21c>
 8006fc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fcc:	f04f 0901 	mov.w	r9, #1
 8006fd0:	4623      	mov	r3, r4
 8006fd2:	469a      	mov	sl, r3
 8006fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fd8:	b10a      	cbz	r2, 8006fde <_vfiprintf_r+0x86>
 8006fda:	2a25      	cmp	r2, #37	@ 0x25
 8006fdc:	d1f9      	bne.n	8006fd2 <_vfiprintf_r+0x7a>
 8006fde:	ebba 0b04 	subs.w	fp, sl, r4
 8006fe2:	d00b      	beq.n	8006ffc <_vfiprintf_r+0xa4>
 8006fe4:	465b      	mov	r3, fp
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	4629      	mov	r1, r5
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7ff ffa1 	bl	8006f32 <__sfputs_r>
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	f000 80a7 	beq.w	8007144 <_vfiprintf_r+0x1ec>
 8006ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ff8:	445a      	add	r2, fp
 8006ffa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 809f 	beq.w	8007144 <_vfiprintf_r+0x1ec>
 8007006:	2300      	movs	r3, #0
 8007008:	f04f 32ff 	mov.w	r2, #4294967295
 800700c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007010:	f10a 0a01 	add.w	sl, sl, #1
 8007014:	9304      	str	r3, [sp, #16]
 8007016:	9307      	str	r3, [sp, #28]
 8007018:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800701c:	931a      	str	r3, [sp, #104]	@ 0x68
 800701e:	4654      	mov	r4, sl
 8007020:	2205      	movs	r2, #5
 8007022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007026:	4853      	ldr	r0, [pc, #332]	@ (8007174 <_vfiprintf_r+0x21c>)
 8007028:	f7f9 f8e2 	bl	80001f0 <memchr>
 800702c:	9a04      	ldr	r2, [sp, #16]
 800702e:	b9d8      	cbnz	r0, 8007068 <_vfiprintf_r+0x110>
 8007030:	06d1      	lsls	r1, r2, #27
 8007032:	bf44      	itt	mi
 8007034:	2320      	movmi	r3, #32
 8007036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800703a:	0713      	lsls	r3, r2, #28
 800703c:	bf44      	itt	mi
 800703e:	232b      	movmi	r3, #43	@ 0x2b
 8007040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007044:	f89a 3000 	ldrb.w	r3, [sl]
 8007048:	2b2a      	cmp	r3, #42	@ 0x2a
 800704a:	d015      	beq.n	8007078 <_vfiprintf_r+0x120>
 800704c:	9a07      	ldr	r2, [sp, #28]
 800704e:	4654      	mov	r4, sl
 8007050:	2000      	movs	r0, #0
 8007052:	f04f 0c0a 	mov.w	ip, #10
 8007056:	4621      	mov	r1, r4
 8007058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800705c:	3b30      	subs	r3, #48	@ 0x30
 800705e:	2b09      	cmp	r3, #9
 8007060:	d94b      	bls.n	80070fa <_vfiprintf_r+0x1a2>
 8007062:	b1b0      	cbz	r0, 8007092 <_vfiprintf_r+0x13a>
 8007064:	9207      	str	r2, [sp, #28]
 8007066:	e014      	b.n	8007092 <_vfiprintf_r+0x13a>
 8007068:	eba0 0308 	sub.w	r3, r0, r8
 800706c:	fa09 f303 	lsl.w	r3, r9, r3
 8007070:	4313      	orrs	r3, r2
 8007072:	9304      	str	r3, [sp, #16]
 8007074:	46a2      	mov	sl, r4
 8007076:	e7d2      	b.n	800701e <_vfiprintf_r+0xc6>
 8007078:	9b03      	ldr	r3, [sp, #12]
 800707a:	1d19      	adds	r1, r3, #4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	9103      	str	r1, [sp, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	bfbb      	ittet	lt
 8007084:	425b      	neglt	r3, r3
 8007086:	f042 0202 	orrlt.w	r2, r2, #2
 800708a:	9307      	strge	r3, [sp, #28]
 800708c:	9307      	strlt	r3, [sp, #28]
 800708e:	bfb8      	it	lt
 8007090:	9204      	strlt	r2, [sp, #16]
 8007092:	7823      	ldrb	r3, [r4, #0]
 8007094:	2b2e      	cmp	r3, #46	@ 0x2e
 8007096:	d10a      	bne.n	80070ae <_vfiprintf_r+0x156>
 8007098:	7863      	ldrb	r3, [r4, #1]
 800709a:	2b2a      	cmp	r3, #42	@ 0x2a
 800709c:	d132      	bne.n	8007104 <_vfiprintf_r+0x1ac>
 800709e:	9b03      	ldr	r3, [sp, #12]
 80070a0:	1d1a      	adds	r2, r3, #4
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	9203      	str	r2, [sp, #12]
 80070a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070aa:	3402      	adds	r4, #2
 80070ac:	9305      	str	r3, [sp, #20]
 80070ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007184 <_vfiprintf_r+0x22c>
 80070b2:	7821      	ldrb	r1, [r4, #0]
 80070b4:	2203      	movs	r2, #3
 80070b6:	4650      	mov	r0, sl
 80070b8:	f7f9 f89a 	bl	80001f0 <memchr>
 80070bc:	b138      	cbz	r0, 80070ce <_vfiprintf_r+0x176>
 80070be:	9b04      	ldr	r3, [sp, #16]
 80070c0:	eba0 000a 	sub.w	r0, r0, sl
 80070c4:	2240      	movs	r2, #64	@ 0x40
 80070c6:	4082      	lsls	r2, r0
 80070c8:	4313      	orrs	r3, r2
 80070ca:	3401      	adds	r4, #1
 80070cc:	9304      	str	r3, [sp, #16]
 80070ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d2:	4829      	ldr	r0, [pc, #164]	@ (8007178 <_vfiprintf_r+0x220>)
 80070d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070d8:	2206      	movs	r2, #6
 80070da:	f7f9 f889 	bl	80001f0 <memchr>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d03f      	beq.n	8007162 <_vfiprintf_r+0x20a>
 80070e2:	4b26      	ldr	r3, [pc, #152]	@ (800717c <_vfiprintf_r+0x224>)
 80070e4:	bb1b      	cbnz	r3, 800712e <_vfiprintf_r+0x1d6>
 80070e6:	9b03      	ldr	r3, [sp, #12]
 80070e8:	3307      	adds	r3, #7
 80070ea:	f023 0307 	bic.w	r3, r3, #7
 80070ee:	3308      	adds	r3, #8
 80070f0:	9303      	str	r3, [sp, #12]
 80070f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f4:	443b      	add	r3, r7
 80070f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80070f8:	e76a      	b.n	8006fd0 <_vfiprintf_r+0x78>
 80070fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80070fe:	460c      	mov	r4, r1
 8007100:	2001      	movs	r0, #1
 8007102:	e7a8      	b.n	8007056 <_vfiprintf_r+0xfe>
 8007104:	2300      	movs	r3, #0
 8007106:	3401      	adds	r4, #1
 8007108:	9305      	str	r3, [sp, #20]
 800710a:	4619      	mov	r1, r3
 800710c:	f04f 0c0a 	mov.w	ip, #10
 8007110:	4620      	mov	r0, r4
 8007112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007116:	3a30      	subs	r2, #48	@ 0x30
 8007118:	2a09      	cmp	r2, #9
 800711a:	d903      	bls.n	8007124 <_vfiprintf_r+0x1cc>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0c6      	beq.n	80070ae <_vfiprintf_r+0x156>
 8007120:	9105      	str	r1, [sp, #20]
 8007122:	e7c4      	b.n	80070ae <_vfiprintf_r+0x156>
 8007124:	fb0c 2101 	mla	r1, ip, r1, r2
 8007128:	4604      	mov	r4, r0
 800712a:	2301      	movs	r3, #1
 800712c:	e7f0      	b.n	8007110 <_vfiprintf_r+0x1b8>
 800712e:	ab03      	add	r3, sp, #12
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	462a      	mov	r2, r5
 8007134:	4b12      	ldr	r3, [pc, #72]	@ (8007180 <_vfiprintf_r+0x228>)
 8007136:	a904      	add	r1, sp, #16
 8007138:	4630      	mov	r0, r6
 800713a:	f3af 8000 	nop.w
 800713e:	4607      	mov	r7, r0
 8007140:	1c78      	adds	r0, r7, #1
 8007142:	d1d6      	bne.n	80070f2 <_vfiprintf_r+0x19a>
 8007144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007146:	07d9      	lsls	r1, r3, #31
 8007148:	d405      	bmi.n	8007156 <_vfiprintf_r+0x1fe>
 800714a:	89ab      	ldrh	r3, [r5, #12]
 800714c:	059a      	lsls	r2, r3, #22
 800714e:	d402      	bmi.n	8007156 <_vfiprintf_r+0x1fe>
 8007150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007152:	f7ff fc85 	bl	8006a60 <__retarget_lock_release_recursive>
 8007156:	89ab      	ldrh	r3, [r5, #12]
 8007158:	065b      	lsls	r3, r3, #25
 800715a:	f53f af1f 	bmi.w	8006f9c <_vfiprintf_r+0x44>
 800715e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007160:	e71e      	b.n	8006fa0 <_vfiprintf_r+0x48>
 8007162:	ab03      	add	r3, sp, #12
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	462a      	mov	r2, r5
 8007168:	4b05      	ldr	r3, [pc, #20]	@ (8007180 <_vfiprintf_r+0x228>)
 800716a:	a904      	add	r1, sp, #16
 800716c:	4630      	mov	r0, r6
 800716e:	f000 f879 	bl	8007264 <_printf_i>
 8007172:	e7e4      	b.n	800713e <_vfiprintf_r+0x1e6>
 8007174:	08008a38 	.word	0x08008a38
 8007178:	08008a42 	.word	0x08008a42
 800717c:	00000000 	.word	0x00000000
 8007180:	08006f33 	.word	0x08006f33
 8007184:	08008a3e 	.word	0x08008a3e

08007188 <_printf_common>:
 8007188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800718c:	4616      	mov	r6, r2
 800718e:	4698      	mov	r8, r3
 8007190:	688a      	ldr	r2, [r1, #8]
 8007192:	690b      	ldr	r3, [r1, #16]
 8007194:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007198:	4293      	cmp	r3, r2
 800719a:	bfb8      	it	lt
 800719c:	4613      	movlt	r3, r2
 800719e:	6033      	str	r3, [r6, #0]
 80071a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071a4:	4607      	mov	r7, r0
 80071a6:	460c      	mov	r4, r1
 80071a8:	b10a      	cbz	r2, 80071ae <_printf_common+0x26>
 80071aa:	3301      	adds	r3, #1
 80071ac:	6033      	str	r3, [r6, #0]
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	0699      	lsls	r1, r3, #26
 80071b2:	bf42      	ittt	mi
 80071b4:	6833      	ldrmi	r3, [r6, #0]
 80071b6:	3302      	addmi	r3, #2
 80071b8:	6033      	strmi	r3, [r6, #0]
 80071ba:	6825      	ldr	r5, [r4, #0]
 80071bc:	f015 0506 	ands.w	r5, r5, #6
 80071c0:	d106      	bne.n	80071d0 <_printf_common+0x48>
 80071c2:	f104 0a19 	add.w	sl, r4, #25
 80071c6:	68e3      	ldr	r3, [r4, #12]
 80071c8:	6832      	ldr	r2, [r6, #0]
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	42ab      	cmp	r3, r5
 80071ce:	dc26      	bgt.n	800721e <_printf_common+0x96>
 80071d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071d4:	6822      	ldr	r2, [r4, #0]
 80071d6:	3b00      	subs	r3, #0
 80071d8:	bf18      	it	ne
 80071da:	2301      	movne	r3, #1
 80071dc:	0692      	lsls	r2, r2, #26
 80071de:	d42b      	bmi.n	8007238 <_printf_common+0xb0>
 80071e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071e4:	4641      	mov	r1, r8
 80071e6:	4638      	mov	r0, r7
 80071e8:	47c8      	blx	r9
 80071ea:	3001      	adds	r0, #1
 80071ec:	d01e      	beq.n	800722c <_printf_common+0xa4>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	6922      	ldr	r2, [r4, #16]
 80071f2:	f003 0306 	and.w	r3, r3, #6
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	bf02      	ittt	eq
 80071fa:	68e5      	ldreq	r5, [r4, #12]
 80071fc:	6833      	ldreq	r3, [r6, #0]
 80071fe:	1aed      	subeq	r5, r5, r3
 8007200:	68a3      	ldr	r3, [r4, #8]
 8007202:	bf0c      	ite	eq
 8007204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007208:	2500      	movne	r5, #0
 800720a:	4293      	cmp	r3, r2
 800720c:	bfc4      	itt	gt
 800720e:	1a9b      	subgt	r3, r3, r2
 8007210:	18ed      	addgt	r5, r5, r3
 8007212:	2600      	movs	r6, #0
 8007214:	341a      	adds	r4, #26
 8007216:	42b5      	cmp	r5, r6
 8007218:	d11a      	bne.n	8007250 <_printf_common+0xc8>
 800721a:	2000      	movs	r0, #0
 800721c:	e008      	b.n	8007230 <_printf_common+0xa8>
 800721e:	2301      	movs	r3, #1
 8007220:	4652      	mov	r2, sl
 8007222:	4641      	mov	r1, r8
 8007224:	4638      	mov	r0, r7
 8007226:	47c8      	blx	r9
 8007228:	3001      	adds	r0, #1
 800722a:	d103      	bne.n	8007234 <_printf_common+0xac>
 800722c:	f04f 30ff 	mov.w	r0, #4294967295
 8007230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007234:	3501      	adds	r5, #1
 8007236:	e7c6      	b.n	80071c6 <_printf_common+0x3e>
 8007238:	18e1      	adds	r1, r4, r3
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	2030      	movs	r0, #48	@ 0x30
 800723e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007242:	4422      	add	r2, r4
 8007244:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007248:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800724c:	3302      	adds	r3, #2
 800724e:	e7c7      	b.n	80071e0 <_printf_common+0x58>
 8007250:	2301      	movs	r3, #1
 8007252:	4622      	mov	r2, r4
 8007254:	4641      	mov	r1, r8
 8007256:	4638      	mov	r0, r7
 8007258:	47c8      	blx	r9
 800725a:	3001      	adds	r0, #1
 800725c:	d0e6      	beq.n	800722c <_printf_common+0xa4>
 800725e:	3601      	adds	r6, #1
 8007260:	e7d9      	b.n	8007216 <_printf_common+0x8e>
	...

08007264 <_printf_i>:
 8007264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007268:	7e0f      	ldrb	r7, [r1, #24]
 800726a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800726c:	2f78      	cmp	r7, #120	@ 0x78
 800726e:	4691      	mov	r9, r2
 8007270:	4680      	mov	r8, r0
 8007272:	460c      	mov	r4, r1
 8007274:	469a      	mov	sl, r3
 8007276:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800727a:	d807      	bhi.n	800728c <_printf_i+0x28>
 800727c:	2f62      	cmp	r7, #98	@ 0x62
 800727e:	d80a      	bhi.n	8007296 <_printf_i+0x32>
 8007280:	2f00      	cmp	r7, #0
 8007282:	f000 80d2 	beq.w	800742a <_printf_i+0x1c6>
 8007286:	2f58      	cmp	r7, #88	@ 0x58
 8007288:	f000 80b9 	beq.w	80073fe <_printf_i+0x19a>
 800728c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007290:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007294:	e03a      	b.n	800730c <_printf_i+0xa8>
 8007296:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800729a:	2b15      	cmp	r3, #21
 800729c:	d8f6      	bhi.n	800728c <_printf_i+0x28>
 800729e:	a101      	add	r1, pc, #4	@ (adr r1, 80072a4 <_printf_i+0x40>)
 80072a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072a4:	080072fd 	.word	0x080072fd
 80072a8:	08007311 	.word	0x08007311
 80072ac:	0800728d 	.word	0x0800728d
 80072b0:	0800728d 	.word	0x0800728d
 80072b4:	0800728d 	.word	0x0800728d
 80072b8:	0800728d 	.word	0x0800728d
 80072bc:	08007311 	.word	0x08007311
 80072c0:	0800728d 	.word	0x0800728d
 80072c4:	0800728d 	.word	0x0800728d
 80072c8:	0800728d 	.word	0x0800728d
 80072cc:	0800728d 	.word	0x0800728d
 80072d0:	08007411 	.word	0x08007411
 80072d4:	0800733b 	.word	0x0800733b
 80072d8:	080073cb 	.word	0x080073cb
 80072dc:	0800728d 	.word	0x0800728d
 80072e0:	0800728d 	.word	0x0800728d
 80072e4:	08007433 	.word	0x08007433
 80072e8:	0800728d 	.word	0x0800728d
 80072ec:	0800733b 	.word	0x0800733b
 80072f0:	0800728d 	.word	0x0800728d
 80072f4:	0800728d 	.word	0x0800728d
 80072f8:	080073d3 	.word	0x080073d3
 80072fc:	6833      	ldr	r3, [r6, #0]
 80072fe:	1d1a      	adds	r2, r3, #4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6032      	str	r2, [r6, #0]
 8007304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007308:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800730c:	2301      	movs	r3, #1
 800730e:	e09d      	b.n	800744c <_printf_i+0x1e8>
 8007310:	6833      	ldr	r3, [r6, #0]
 8007312:	6820      	ldr	r0, [r4, #0]
 8007314:	1d19      	adds	r1, r3, #4
 8007316:	6031      	str	r1, [r6, #0]
 8007318:	0606      	lsls	r6, r0, #24
 800731a:	d501      	bpl.n	8007320 <_printf_i+0xbc>
 800731c:	681d      	ldr	r5, [r3, #0]
 800731e:	e003      	b.n	8007328 <_printf_i+0xc4>
 8007320:	0645      	lsls	r5, r0, #25
 8007322:	d5fb      	bpl.n	800731c <_printf_i+0xb8>
 8007324:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007328:	2d00      	cmp	r5, #0
 800732a:	da03      	bge.n	8007334 <_printf_i+0xd0>
 800732c:	232d      	movs	r3, #45	@ 0x2d
 800732e:	426d      	negs	r5, r5
 8007330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007334:	4859      	ldr	r0, [pc, #356]	@ (800749c <_printf_i+0x238>)
 8007336:	230a      	movs	r3, #10
 8007338:	e011      	b.n	800735e <_printf_i+0xfa>
 800733a:	6821      	ldr	r1, [r4, #0]
 800733c:	6833      	ldr	r3, [r6, #0]
 800733e:	0608      	lsls	r0, r1, #24
 8007340:	f853 5b04 	ldr.w	r5, [r3], #4
 8007344:	d402      	bmi.n	800734c <_printf_i+0xe8>
 8007346:	0649      	lsls	r1, r1, #25
 8007348:	bf48      	it	mi
 800734a:	b2ad      	uxthmi	r5, r5
 800734c:	2f6f      	cmp	r7, #111	@ 0x6f
 800734e:	4853      	ldr	r0, [pc, #332]	@ (800749c <_printf_i+0x238>)
 8007350:	6033      	str	r3, [r6, #0]
 8007352:	bf14      	ite	ne
 8007354:	230a      	movne	r3, #10
 8007356:	2308      	moveq	r3, #8
 8007358:	2100      	movs	r1, #0
 800735a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800735e:	6866      	ldr	r6, [r4, #4]
 8007360:	60a6      	str	r6, [r4, #8]
 8007362:	2e00      	cmp	r6, #0
 8007364:	bfa2      	ittt	ge
 8007366:	6821      	ldrge	r1, [r4, #0]
 8007368:	f021 0104 	bicge.w	r1, r1, #4
 800736c:	6021      	strge	r1, [r4, #0]
 800736e:	b90d      	cbnz	r5, 8007374 <_printf_i+0x110>
 8007370:	2e00      	cmp	r6, #0
 8007372:	d04b      	beq.n	800740c <_printf_i+0x1a8>
 8007374:	4616      	mov	r6, r2
 8007376:	fbb5 f1f3 	udiv	r1, r5, r3
 800737a:	fb03 5711 	mls	r7, r3, r1, r5
 800737e:	5dc7      	ldrb	r7, [r0, r7]
 8007380:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007384:	462f      	mov	r7, r5
 8007386:	42bb      	cmp	r3, r7
 8007388:	460d      	mov	r5, r1
 800738a:	d9f4      	bls.n	8007376 <_printf_i+0x112>
 800738c:	2b08      	cmp	r3, #8
 800738e:	d10b      	bne.n	80073a8 <_printf_i+0x144>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	07df      	lsls	r7, r3, #31
 8007394:	d508      	bpl.n	80073a8 <_printf_i+0x144>
 8007396:	6923      	ldr	r3, [r4, #16]
 8007398:	6861      	ldr	r1, [r4, #4]
 800739a:	4299      	cmp	r1, r3
 800739c:	bfde      	ittt	le
 800739e:	2330      	movle	r3, #48	@ 0x30
 80073a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073a8:	1b92      	subs	r2, r2, r6
 80073aa:	6122      	str	r2, [r4, #16]
 80073ac:	f8cd a000 	str.w	sl, [sp]
 80073b0:	464b      	mov	r3, r9
 80073b2:	aa03      	add	r2, sp, #12
 80073b4:	4621      	mov	r1, r4
 80073b6:	4640      	mov	r0, r8
 80073b8:	f7ff fee6 	bl	8007188 <_printf_common>
 80073bc:	3001      	adds	r0, #1
 80073be:	d14a      	bne.n	8007456 <_printf_i+0x1f2>
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	b004      	add	sp, #16
 80073c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	f043 0320 	orr.w	r3, r3, #32
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	4833      	ldr	r0, [pc, #204]	@ (80074a0 <_printf_i+0x23c>)
 80073d4:	2778      	movs	r7, #120	@ 0x78
 80073d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	6831      	ldr	r1, [r6, #0]
 80073de:	061f      	lsls	r7, r3, #24
 80073e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80073e4:	d402      	bmi.n	80073ec <_printf_i+0x188>
 80073e6:	065f      	lsls	r7, r3, #25
 80073e8:	bf48      	it	mi
 80073ea:	b2ad      	uxthmi	r5, r5
 80073ec:	6031      	str	r1, [r6, #0]
 80073ee:	07d9      	lsls	r1, r3, #31
 80073f0:	bf44      	itt	mi
 80073f2:	f043 0320 	orrmi.w	r3, r3, #32
 80073f6:	6023      	strmi	r3, [r4, #0]
 80073f8:	b11d      	cbz	r5, 8007402 <_printf_i+0x19e>
 80073fa:	2310      	movs	r3, #16
 80073fc:	e7ac      	b.n	8007358 <_printf_i+0xf4>
 80073fe:	4827      	ldr	r0, [pc, #156]	@ (800749c <_printf_i+0x238>)
 8007400:	e7e9      	b.n	80073d6 <_printf_i+0x172>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	f023 0320 	bic.w	r3, r3, #32
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	e7f6      	b.n	80073fa <_printf_i+0x196>
 800740c:	4616      	mov	r6, r2
 800740e:	e7bd      	b.n	800738c <_printf_i+0x128>
 8007410:	6833      	ldr	r3, [r6, #0]
 8007412:	6825      	ldr	r5, [r4, #0]
 8007414:	6961      	ldr	r1, [r4, #20]
 8007416:	1d18      	adds	r0, r3, #4
 8007418:	6030      	str	r0, [r6, #0]
 800741a:	062e      	lsls	r6, r5, #24
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	d501      	bpl.n	8007424 <_printf_i+0x1c0>
 8007420:	6019      	str	r1, [r3, #0]
 8007422:	e002      	b.n	800742a <_printf_i+0x1c6>
 8007424:	0668      	lsls	r0, r5, #25
 8007426:	d5fb      	bpl.n	8007420 <_printf_i+0x1bc>
 8007428:	8019      	strh	r1, [r3, #0]
 800742a:	2300      	movs	r3, #0
 800742c:	6123      	str	r3, [r4, #16]
 800742e:	4616      	mov	r6, r2
 8007430:	e7bc      	b.n	80073ac <_printf_i+0x148>
 8007432:	6833      	ldr	r3, [r6, #0]
 8007434:	1d1a      	adds	r2, r3, #4
 8007436:	6032      	str	r2, [r6, #0]
 8007438:	681e      	ldr	r6, [r3, #0]
 800743a:	6862      	ldr	r2, [r4, #4]
 800743c:	2100      	movs	r1, #0
 800743e:	4630      	mov	r0, r6
 8007440:	f7f8 fed6 	bl	80001f0 <memchr>
 8007444:	b108      	cbz	r0, 800744a <_printf_i+0x1e6>
 8007446:	1b80      	subs	r0, r0, r6
 8007448:	6060      	str	r0, [r4, #4]
 800744a:	6863      	ldr	r3, [r4, #4]
 800744c:	6123      	str	r3, [r4, #16]
 800744e:	2300      	movs	r3, #0
 8007450:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007454:	e7aa      	b.n	80073ac <_printf_i+0x148>
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	4632      	mov	r2, r6
 800745a:	4649      	mov	r1, r9
 800745c:	4640      	mov	r0, r8
 800745e:	47d0      	blx	sl
 8007460:	3001      	adds	r0, #1
 8007462:	d0ad      	beq.n	80073c0 <_printf_i+0x15c>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	079b      	lsls	r3, r3, #30
 8007468:	d413      	bmi.n	8007492 <_printf_i+0x22e>
 800746a:	68e0      	ldr	r0, [r4, #12]
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	4298      	cmp	r0, r3
 8007470:	bfb8      	it	lt
 8007472:	4618      	movlt	r0, r3
 8007474:	e7a6      	b.n	80073c4 <_printf_i+0x160>
 8007476:	2301      	movs	r3, #1
 8007478:	4632      	mov	r2, r6
 800747a:	4649      	mov	r1, r9
 800747c:	4640      	mov	r0, r8
 800747e:	47d0      	blx	sl
 8007480:	3001      	adds	r0, #1
 8007482:	d09d      	beq.n	80073c0 <_printf_i+0x15c>
 8007484:	3501      	adds	r5, #1
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	9903      	ldr	r1, [sp, #12]
 800748a:	1a5b      	subs	r3, r3, r1
 800748c:	42ab      	cmp	r3, r5
 800748e:	dcf2      	bgt.n	8007476 <_printf_i+0x212>
 8007490:	e7eb      	b.n	800746a <_printf_i+0x206>
 8007492:	2500      	movs	r5, #0
 8007494:	f104 0619 	add.w	r6, r4, #25
 8007498:	e7f5      	b.n	8007486 <_printf_i+0x222>
 800749a:	bf00      	nop
 800749c:	08008a49 	.word	0x08008a49
 80074a0:	08008a5a 	.word	0x08008a5a

080074a4 <__sflush_r>:
 80074a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ac:	0716      	lsls	r6, r2, #28
 80074ae:	4605      	mov	r5, r0
 80074b0:	460c      	mov	r4, r1
 80074b2:	d454      	bmi.n	800755e <__sflush_r+0xba>
 80074b4:	684b      	ldr	r3, [r1, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	dc02      	bgt.n	80074c0 <__sflush_r+0x1c>
 80074ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074bc:	2b00      	cmp	r3, #0
 80074be:	dd48      	ble.n	8007552 <__sflush_r+0xae>
 80074c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074c2:	2e00      	cmp	r6, #0
 80074c4:	d045      	beq.n	8007552 <__sflush_r+0xae>
 80074c6:	2300      	movs	r3, #0
 80074c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074cc:	682f      	ldr	r7, [r5, #0]
 80074ce:	6a21      	ldr	r1, [r4, #32]
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	d030      	beq.n	8007536 <__sflush_r+0x92>
 80074d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	0759      	lsls	r1, r3, #29
 80074da:	d505      	bpl.n	80074e8 <__sflush_r+0x44>
 80074dc:	6863      	ldr	r3, [r4, #4]
 80074de:	1ad2      	subs	r2, r2, r3
 80074e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074e2:	b10b      	cbz	r3, 80074e8 <__sflush_r+0x44>
 80074e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074e6:	1ad2      	subs	r2, r2, r3
 80074e8:	2300      	movs	r3, #0
 80074ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074ec:	6a21      	ldr	r1, [r4, #32]
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b0      	blx	r6
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	d106      	bne.n	8007506 <__sflush_r+0x62>
 80074f8:	6829      	ldr	r1, [r5, #0]
 80074fa:	291d      	cmp	r1, #29
 80074fc:	d82b      	bhi.n	8007556 <__sflush_r+0xb2>
 80074fe:	4a2a      	ldr	r2, [pc, #168]	@ (80075a8 <__sflush_r+0x104>)
 8007500:	410a      	asrs	r2, r1
 8007502:	07d6      	lsls	r6, r2, #31
 8007504:	d427      	bmi.n	8007556 <__sflush_r+0xb2>
 8007506:	2200      	movs	r2, #0
 8007508:	6062      	str	r2, [r4, #4]
 800750a:	04d9      	lsls	r1, r3, #19
 800750c:	6922      	ldr	r2, [r4, #16]
 800750e:	6022      	str	r2, [r4, #0]
 8007510:	d504      	bpl.n	800751c <__sflush_r+0x78>
 8007512:	1c42      	adds	r2, r0, #1
 8007514:	d101      	bne.n	800751a <__sflush_r+0x76>
 8007516:	682b      	ldr	r3, [r5, #0]
 8007518:	b903      	cbnz	r3, 800751c <__sflush_r+0x78>
 800751a:	6560      	str	r0, [r4, #84]	@ 0x54
 800751c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800751e:	602f      	str	r7, [r5, #0]
 8007520:	b1b9      	cbz	r1, 8007552 <__sflush_r+0xae>
 8007522:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007526:	4299      	cmp	r1, r3
 8007528:	d002      	beq.n	8007530 <__sflush_r+0x8c>
 800752a:	4628      	mov	r0, r5
 800752c:	f7ff fa9a 	bl	8006a64 <_free_r>
 8007530:	2300      	movs	r3, #0
 8007532:	6363      	str	r3, [r4, #52]	@ 0x34
 8007534:	e00d      	b.n	8007552 <__sflush_r+0xae>
 8007536:	2301      	movs	r3, #1
 8007538:	4628      	mov	r0, r5
 800753a:	47b0      	blx	r6
 800753c:	4602      	mov	r2, r0
 800753e:	1c50      	adds	r0, r2, #1
 8007540:	d1c9      	bne.n	80074d6 <__sflush_r+0x32>
 8007542:	682b      	ldr	r3, [r5, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0c6      	beq.n	80074d6 <__sflush_r+0x32>
 8007548:	2b1d      	cmp	r3, #29
 800754a:	d001      	beq.n	8007550 <__sflush_r+0xac>
 800754c:	2b16      	cmp	r3, #22
 800754e:	d11e      	bne.n	800758e <__sflush_r+0xea>
 8007550:	602f      	str	r7, [r5, #0]
 8007552:	2000      	movs	r0, #0
 8007554:	e022      	b.n	800759c <__sflush_r+0xf8>
 8007556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800755a:	b21b      	sxth	r3, r3
 800755c:	e01b      	b.n	8007596 <__sflush_r+0xf2>
 800755e:	690f      	ldr	r7, [r1, #16]
 8007560:	2f00      	cmp	r7, #0
 8007562:	d0f6      	beq.n	8007552 <__sflush_r+0xae>
 8007564:	0793      	lsls	r3, r2, #30
 8007566:	680e      	ldr	r6, [r1, #0]
 8007568:	bf08      	it	eq
 800756a:	694b      	ldreq	r3, [r1, #20]
 800756c:	600f      	str	r7, [r1, #0]
 800756e:	bf18      	it	ne
 8007570:	2300      	movne	r3, #0
 8007572:	eba6 0807 	sub.w	r8, r6, r7
 8007576:	608b      	str	r3, [r1, #8]
 8007578:	f1b8 0f00 	cmp.w	r8, #0
 800757c:	dde9      	ble.n	8007552 <__sflush_r+0xae>
 800757e:	6a21      	ldr	r1, [r4, #32]
 8007580:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007582:	4643      	mov	r3, r8
 8007584:	463a      	mov	r2, r7
 8007586:	4628      	mov	r0, r5
 8007588:	47b0      	blx	r6
 800758a:	2800      	cmp	r0, #0
 800758c:	dc08      	bgt.n	80075a0 <__sflush_r+0xfc>
 800758e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	f04f 30ff 	mov.w	r0, #4294967295
 800759c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a0:	4407      	add	r7, r0
 80075a2:	eba8 0800 	sub.w	r8, r8, r0
 80075a6:	e7e7      	b.n	8007578 <__sflush_r+0xd4>
 80075a8:	dfbffffe 	.word	0xdfbffffe

080075ac <_fflush_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	690b      	ldr	r3, [r1, #16]
 80075b0:	4605      	mov	r5, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	b913      	cbnz	r3, 80075bc <_fflush_r+0x10>
 80075b6:	2500      	movs	r5, #0
 80075b8:	4628      	mov	r0, r5
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	b118      	cbz	r0, 80075c6 <_fflush_r+0x1a>
 80075be:	6a03      	ldr	r3, [r0, #32]
 80075c0:	b90b      	cbnz	r3, 80075c6 <_fflush_r+0x1a>
 80075c2:	f7ff f835 	bl	8006630 <__sinit>
 80075c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0f3      	beq.n	80075b6 <_fflush_r+0xa>
 80075ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075d0:	07d0      	lsls	r0, r2, #31
 80075d2:	d404      	bmi.n	80075de <_fflush_r+0x32>
 80075d4:	0599      	lsls	r1, r3, #22
 80075d6:	d402      	bmi.n	80075de <_fflush_r+0x32>
 80075d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075da:	f7ff fa40 	bl	8006a5e <__retarget_lock_acquire_recursive>
 80075de:	4628      	mov	r0, r5
 80075e0:	4621      	mov	r1, r4
 80075e2:	f7ff ff5f 	bl	80074a4 <__sflush_r>
 80075e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075e8:	07da      	lsls	r2, r3, #31
 80075ea:	4605      	mov	r5, r0
 80075ec:	d4e4      	bmi.n	80075b8 <_fflush_r+0xc>
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	059b      	lsls	r3, r3, #22
 80075f2:	d4e1      	bmi.n	80075b8 <_fflush_r+0xc>
 80075f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075f6:	f7ff fa33 	bl	8006a60 <__retarget_lock_release_recursive>
 80075fa:	e7dd      	b.n	80075b8 <_fflush_r+0xc>

080075fc <__swhatbuf_r>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	460c      	mov	r4, r1
 8007600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007604:	2900      	cmp	r1, #0
 8007606:	b096      	sub	sp, #88	@ 0x58
 8007608:	4615      	mov	r5, r2
 800760a:	461e      	mov	r6, r3
 800760c:	da0d      	bge.n	800762a <__swhatbuf_r+0x2e>
 800760e:	89a3      	ldrh	r3, [r4, #12]
 8007610:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007614:	f04f 0100 	mov.w	r1, #0
 8007618:	bf14      	ite	ne
 800761a:	2340      	movne	r3, #64	@ 0x40
 800761c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007620:	2000      	movs	r0, #0
 8007622:	6031      	str	r1, [r6, #0]
 8007624:	602b      	str	r3, [r5, #0]
 8007626:	b016      	add	sp, #88	@ 0x58
 8007628:	bd70      	pop	{r4, r5, r6, pc}
 800762a:	466a      	mov	r2, sp
 800762c:	f000 f862 	bl	80076f4 <_fstat_r>
 8007630:	2800      	cmp	r0, #0
 8007632:	dbec      	blt.n	800760e <__swhatbuf_r+0x12>
 8007634:	9901      	ldr	r1, [sp, #4]
 8007636:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800763a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800763e:	4259      	negs	r1, r3
 8007640:	4159      	adcs	r1, r3
 8007642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007646:	e7eb      	b.n	8007620 <__swhatbuf_r+0x24>

08007648 <__smakebuf_r>:
 8007648:	898b      	ldrh	r3, [r1, #12]
 800764a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800764c:	079d      	lsls	r5, r3, #30
 800764e:	4606      	mov	r6, r0
 8007650:	460c      	mov	r4, r1
 8007652:	d507      	bpl.n	8007664 <__smakebuf_r+0x1c>
 8007654:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	6123      	str	r3, [r4, #16]
 800765c:	2301      	movs	r3, #1
 800765e:	6163      	str	r3, [r4, #20]
 8007660:	b003      	add	sp, #12
 8007662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007664:	ab01      	add	r3, sp, #4
 8007666:	466a      	mov	r2, sp
 8007668:	f7ff ffc8 	bl	80075fc <__swhatbuf_r>
 800766c:	9f00      	ldr	r7, [sp, #0]
 800766e:	4605      	mov	r5, r0
 8007670:	4639      	mov	r1, r7
 8007672:	4630      	mov	r0, r6
 8007674:	f7ff fa62 	bl	8006b3c <_malloc_r>
 8007678:	b948      	cbnz	r0, 800768e <__smakebuf_r+0x46>
 800767a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800767e:	059a      	lsls	r2, r3, #22
 8007680:	d4ee      	bmi.n	8007660 <__smakebuf_r+0x18>
 8007682:	f023 0303 	bic.w	r3, r3, #3
 8007686:	f043 0302 	orr.w	r3, r3, #2
 800768a:	81a3      	strh	r3, [r4, #12]
 800768c:	e7e2      	b.n	8007654 <__smakebuf_r+0xc>
 800768e:	89a3      	ldrh	r3, [r4, #12]
 8007690:	6020      	str	r0, [r4, #0]
 8007692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007696:	81a3      	strh	r3, [r4, #12]
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800769e:	b15b      	cbz	r3, 80076b8 <__smakebuf_r+0x70>
 80076a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076a4:	4630      	mov	r0, r6
 80076a6:	f000 f837 	bl	8007718 <_isatty_r>
 80076aa:	b128      	cbz	r0, 80076b8 <__smakebuf_r+0x70>
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	f023 0303 	bic.w	r3, r3, #3
 80076b2:	f043 0301 	orr.w	r3, r3, #1
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	431d      	orrs	r5, r3
 80076bc:	81a5      	strh	r5, [r4, #12]
 80076be:	e7cf      	b.n	8007660 <__smakebuf_r+0x18>

080076c0 <memmove>:
 80076c0:	4288      	cmp	r0, r1
 80076c2:	b510      	push	{r4, lr}
 80076c4:	eb01 0402 	add.w	r4, r1, r2
 80076c8:	d902      	bls.n	80076d0 <memmove+0x10>
 80076ca:	4284      	cmp	r4, r0
 80076cc:	4623      	mov	r3, r4
 80076ce:	d807      	bhi.n	80076e0 <memmove+0x20>
 80076d0:	1e43      	subs	r3, r0, #1
 80076d2:	42a1      	cmp	r1, r4
 80076d4:	d008      	beq.n	80076e8 <memmove+0x28>
 80076d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076de:	e7f8      	b.n	80076d2 <memmove+0x12>
 80076e0:	4402      	add	r2, r0
 80076e2:	4601      	mov	r1, r0
 80076e4:	428a      	cmp	r2, r1
 80076e6:	d100      	bne.n	80076ea <memmove+0x2a>
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076f2:	e7f7      	b.n	80076e4 <memmove+0x24>

080076f4 <_fstat_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d07      	ldr	r5, [pc, #28]	@ (8007714 <_fstat_r+0x20>)
 80076f8:	2300      	movs	r3, #0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	4611      	mov	r1, r2
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	f7fb fcfd 	bl	8003100 <_fstat>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d102      	bne.n	8007710 <_fstat_r+0x1c>
 800770a:	682b      	ldr	r3, [r5, #0]
 800770c:	b103      	cbz	r3, 8007710 <_fstat_r+0x1c>
 800770e:	6023      	str	r3, [r4, #0]
 8007710:	bd38      	pop	{r3, r4, r5, pc}
 8007712:	bf00      	nop
 8007714:	20025c88 	.word	0x20025c88

08007718 <_isatty_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4d06      	ldr	r5, [pc, #24]	@ (8007734 <_isatty_r+0x1c>)
 800771c:	2300      	movs	r3, #0
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	602b      	str	r3, [r5, #0]
 8007724:	f7fb fcfc 	bl	8003120 <_isatty>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_isatty_r+0x1a>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_isatty_r+0x1a>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	20025c88 	.word	0x20025c88

08007738 <_sbrk_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4d06      	ldr	r5, [pc, #24]	@ (8007754 <_sbrk_r+0x1c>)
 800773c:	2300      	movs	r3, #0
 800773e:	4604      	mov	r4, r0
 8007740:	4608      	mov	r0, r1
 8007742:	602b      	str	r3, [r5, #0]
 8007744:	f7fb fd04 	bl	8003150 <_sbrk>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_sbrk_r+0x1a>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	b103      	cbz	r3, 8007752 <_sbrk_r+0x1a>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	20025c88 	.word	0x20025c88

08007758 <memcpy>:
 8007758:	440a      	add	r2, r1
 800775a:	4291      	cmp	r1, r2
 800775c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007760:	d100      	bne.n	8007764 <memcpy+0xc>
 8007762:	4770      	bx	lr
 8007764:	b510      	push	{r4, lr}
 8007766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800776a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800776e:	4291      	cmp	r1, r2
 8007770:	d1f9      	bne.n	8007766 <memcpy+0xe>
 8007772:	bd10      	pop	{r4, pc}

08007774 <_realloc_r>:
 8007774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007778:	4680      	mov	r8, r0
 800777a:	4615      	mov	r5, r2
 800777c:	460c      	mov	r4, r1
 800777e:	b921      	cbnz	r1, 800778a <_realloc_r+0x16>
 8007780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007784:	4611      	mov	r1, r2
 8007786:	f7ff b9d9 	b.w	8006b3c <_malloc_r>
 800778a:	b92a      	cbnz	r2, 8007798 <_realloc_r+0x24>
 800778c:	f7ff f96a 	bl	8006a64 <_free_r>
 8007790:	2400      	movs	r4, #0
 8007792:	4620      	mov	r0, r4
 8007794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007798:	f000 f81a 	bl	80077d0 <_malloc_usable_size_r>
 800779c:	4285      	cmp	r5, r0
 800779e:	4606      	mov	r6, r0
 80077a0:	d802      	bhi.n	80077a8 <_realloc_r+0x34>
 80077a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80077a6:	d8f4      	bhi.n	8007792 <_realloc_r+0x1e>
 80077a8:	4629      	mov	r1, r5
 80077aa:	4640      	mov	r0, r8
 80077ac:	f7ff f9c6 	bl	8006b3c <_malloc_r>
 80077b0:	4607      	mov	r7, r0
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d0ec      	beq.n	8007790 <_realloc_r+0x1c>
 80077b6:	42b5      	cmp	r5, r6
 80077b8:	462a      	mov	r2, r5
 80077ba:	4621      	mov	r1, r4
 80077bc:	bf28      	it	cs
 80077be:	4632      	movcs	r2, r6
 80077c0:	f7ff ffca 	bl	8007758 <memcpy>
 80077c4:	4621      	mov	r1, r4
 80077c6:	4640      	mov	r0, r8
 80077c8:	f7ff f94c 	bl	8006a64 <_free_r>
 80077cc:	463c      	mov	r4, r7
 80077ce:	e7e0      	b.n	8007792 <_realloc_r+0x1e>

080077d0 <_malloc_usable_size_r>:
 80077d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d4:	1f18      	subs	r0, r3, #4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	bfbc      	itt	lt
 80077da:	580b      	ldrlt	r3, [r1, r0]
 80077dc:	18c0      	addlt	r0, r0, r3
 80077de:	4770      	bx	lr

080077e0 <_init>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	bf00      	nop
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr

080077ec <_fini>:
 80077ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ee:	bf00      	nop
 80077f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f2:	bc08      	pop	{r3}
 80077f4:	469e      	mov	lr, r3
 80077f6:	4770      	bx	lr
