
EApplebaumFinalProject2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007698  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001274  08007848  08007848  00008848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008abc  08008abc  0000a0e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008abc  08008abc  00009abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ac4  08008ac4  0000a0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ac4  08008ac4  00009ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ac8  08008ac8  00009ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  08008acc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0e8  2**0
                  CONTENTS
 10 .bss          00025c8c  200000e8  200000e8  0000a0e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d74  20025d74  0000a0e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fdad  00000000  00000000  0000a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fed  00000000  00000000  00019ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  0001ceb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc3  00000000  00000000  0001de50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275fe  00000000  00000000  0001ea13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151cf  00000000  00000000  00046011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e255b  00000000  00000000  0005b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d73b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047c4  00000000  00000000  0013d780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00141f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007830 	.word	0x08007830

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	08007830 	.word	0x08007830

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#endif // COMPILE_TOUCH_FUNCTIONS

volatile uint8_t begin_game = 0;

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 fd98 	bl	80030b8 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f001 f95e 	bl	8001848 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f001 f91b 	bl	80017c8 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f001 f9d2 	bl	8001940 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f001 faa8 	bl	8001af0 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <ApplicationInit+0x38>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 f809 	bl	80005bc <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
	Button_Init();
 80005aa:	f000 f8d7 	bl	800075c <Button_Init>
	Timer2_Init();
 80005ae:	f001 fb07 	bl	8001bc0 <Timer2_Init>


}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000104 	.word	0x20000104

080005bc <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005d4:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005d6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005da:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]

    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4619      	mov	r1, r3
 8000604:	4807      	ldr	r0, [pc, #28]	@ (8000624 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000606:	f003 f85b 	bl	80036c0 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800060a:	2028      	movs	r0, #40	@ 0x28
 800060c:	f003 f809 	bl	8003622 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000612:	4a06      	ldr	r2, [pc, #24]	@ (800062c <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000614:	601a      	str	r2, [r3, #0]

}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000
 8000628:	2000010c 	.word	0x2000010c
 800062c:	0600000f 	.word	0x0600000f

08000630 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 8000636:	2028      	movs	r0, #40	@ 0x28
 8000638:	f003 f801 	bl	800363e <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 800063c:	2300      	movs	r3, #0
 800063e:	71fb      	strb	r3, [r7, #7]
		static uint32_t count;
		count = 0;
 8000640:	4b3e      	ldr	r3, [pc, #248]	@ (800073c <EXTI15_10_IRQHandler+0x10c>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
		while(count == 0){
 8000646:	e006      	b.n	8000656 <EXTI15_10_IRQHandler+0x26>
			count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000648:	204c      	movs	r0, #76	@ 0x4c
 800064a:	f002 faa4 	bl	8002b96 <STMPE811_Read>
 800064e:	4603      	mov	r3, r0
 8000650:	461a      	mov	r2, r3
 8000652:	4b3a      	ldr	r3, [pc, #232]	@ (800073c <EXTI15_10_IRQHandler+0x10c>)
 8000654:	601a      	str	r2, [r3, #0]
		while(count == 0){
 8000656:	4b39      	ldr	r3, [pc, #228]	@ (800073c <EXTI15_10_IRQHandler+0x10c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f4      	beq.n	8000648 <EXTI15_10_IRQHandler+0x18>
		}

		// Disable touch interrupt bit on the STMPE811
		uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800065e:	200a      	movs	r0, #10
 8000660:	f001 fa5c 	bl	8001b1c <ReadRegisterFromTouchModule>
 8000664:	4603      	mov	r3, r0
 8000666:	71bb      	strb	r3, [r7, #6]
		WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000668:	2100      	movs	r1, #0
 800066a:	200a      	movs	r0, #10
 800066c:	f001 fa64 	bl	8001b38 <WriteDataToTouchModule>

		// Clear the interrupt bit in the STMPE811
		statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000670:	200b      	movs	r0, #11
 8000672:	f001 fa53 	bl	8001b1c <ReadRegisterFromTouchModule>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b31      	ldr	r3, [pc, #196]	@ (8000740 <EXTI15_10_IRQHandler+0x110>)
 800067c:	701a      	strb	r2, [r3, #0]
		uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800067e:	4b30      	ldr	r3, [pc, #192]	@ (8000740 <EXTI15_10_IRQHandler+0x110>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	717b      	strb	r3, [r7, #5]
		WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	4619      	mov	r1, r3
 800068c:	200b      	movs	r0, #11
 800068e:	f001 fa53 	bl	8001b38 <WriteDataToTouchModule>

		uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000692:	2040      	movs	r0, #64	@ 0x40
 8000694:	f001 fa42 	bl	8001b1c <ReadRegisterFromTouchModule>
 8000698:	4603      	mov	r3, r0
 800069a:	713b      	strb	r3, [r7, #4]
		if (ctrlReg & 0x80)
 800069c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	da01      	bge.n	80006a8 <EXTI15_10_IRQHandler+0x78>
		{
			isTouchDetected = true;
 80006a4:	2301      	movs	r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
		}

		//Determine if it is pressed or unpressed
		if(isTouchDetected) // Touch has been detected
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d023      	beq.n	80006f6 <EXTI15_10_IRQHandler+0xc6>
		{
			printf("\nPressed");
 80006ae:	4825      	ldr	r0, [pc, #148]	@ (8000744 <EXTI15_10_IRQHandler+0x114>)
 80006b0:	f006 f81c 	bl	80066ec <iprintf>
			// May need to do numerous retries?
			DetermineTouchPosition(&StaticTouchData);
 80006b4:	4824      	ldr	r0, [pc, #144]	@ (8000748 <EXTI15_10_IRQHandler+0x118>)
 80006b6:	f001 fa26 	bl	8001b06 <DetermineTouchPosition>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 80006ba:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <EXTI15_10_IRQHandler+0x118>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <EXTI15_10_IRQHandler+0x118>)
 80006c2:	885b      	ldrh	r3, [r3, #2]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4821      	ldr	r0, [pc, #132]	@ (800074c <EXTI15_10_IRQHandler+0x11c>)
 80006c8:	f006 f810 	bl	80066ec <iprintf>
			//LCD_Clear(0, LCD_COLOR_RED);
			if(begin_game){
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <EXTI15_10_IRQHandler+0x120>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00b      	beq.n	80006ee <EXTI15_10_IRQHandler+0xbe>
				if(StaticTouchData.x <= LCD_PIXEL_WIDTH/2) {
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <EXTI15_10_IRQHandler+0x118>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	2b78      	cmp	r3, #120	@ 0x78
 80006dc:	d803      	bhi.n	80006e6 <EXTI15_10_IRQHandler+0xb6>
					addSchedulerEvent(MOVE_LEFT_EVENT);
 80006de:	2004      	movs	r0, #4
 80006e0:	f001 fa3c 	bl	8001b5c <addSchedulerEvent>
 80006e4:	e00a      	b.n	80006fc <EXTI15_10_IRQHandler+0xcc>
				}
				else {
					addSchedulerEvent(MOVE_RIGHT_EVENT);
 80006e6:	2008      	movs	r0, #8
 80006e8:	f001 fa38 	bl	8001b5c <addSchedulerEvent>
 80006ec:	e006      	b.n	80006fc <EXTI15_10_IRQHandler+0xcc>
				}
			}
			else
			{
				begin_game=1;
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <EXTI15_10_IRQHandler+0x120>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e002      	b.n	80006fc <EXTI15_10_IRQHandler+0xcc>
			}

		}else{

			/* Touch not pressed */
			printf("\nNot pressed \n");
 80006f6:	4817      	ldr	r0, [pc, #92]	@ (8000754 <EXTI15_10_IRQHandler+0x124>)
 80006f8:	f006 f860 	bl	80067bc <puts>
			//LCD_Clear(0, LCD_COLOR_GREEN);
		}

		STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80006fc:	2101      	movs	r1, #1
 80006fe:	204b      	movs	r0, #75	@ 0x4b
 8000700:	f002 fa5a 	bl	8002bb8 <STMPE811_Write>
		STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000704:	2100      	movs	r1, #0
 8000706:	204b      	movs	r0, #75	@ 0x4b
 8000708:	f002 fa56 	bl	8002bb8 <STMPE811_Write>

		// Re-enable IRQs
		WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	4619      	mov	r1, r3
 8000710:	200a      	movs	r0, #10
 8000712:	f001 fa11 	bl	8001b38 <WriteDataToTouchModule>
		HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000716:	2103      	movs	r1, #3
 8000718:	480f      	ldr	r0, [pc, #60]	@ (8000758 <EXTI15_10_IRQHandler+0x128>)
 800071a:	f002 ffb9 	bl	8003690 <HAL_EXTI_ClearPending>

		HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800071e:	2028      	movs	r0, #40	@ 0x28
 8000720:	f002 ffa7 	bl	8003672 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000724:	2028      	movs	r0, #40	@ 0x28
 8000726:	f002 ff7c 	bl	8003622 <HAL_NVIC_EnableIRQ>

		//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
		WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800072a:	797b      	ldrb	r3, [r7, #5]
 800072c:	4619      	mov	r1, r3
 800072e:	200b      	movs	r0, #11
 8000730:	f001 fa02 	bl	8001b38 <WriteDataToTouchModule>

}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000118 	.word	0x20000118
 8000740:	20000115 	.word	0x20000115
 8000744:	0800786c 	.word	0x0800786c
 8000748:	20000104 	.word	0x20000104
 800074c:	08007878 	.word	0x08007878
 8000750:	20000114 	.word	0x20000114
 8000754:	0800788c 	.word	0x0800788c
 8000758:	2000010c 	.word	0x2000010c

0800075c <Button_Init>:
void Button_Init() {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <Button_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a0f      	ldr	r2, [pc, #60]	@ (80007a8 <Button_Init+0x4c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <Button_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStructure;
	  GPIO_InitStructure.Pin = GPIO_PIN_0;
 800077e:	2301      	movs	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
	  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000782:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000786:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <Button_Init+0x50>)
 8000796:	f002 ff93 	bl	80036c0 <HAL_GPIO_Init>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800079a:	2006      	movs	r0, #6
 800079c:	f002 ff41 	bl	8003622 <HAL_NVIC_EnableIRQ>
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000

080007b0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80007b4:	2006      	movs	r0, #6
 80007b6:	f002 ff42 	bl	800363e <HAL_NVIC_DisableIRQ>
	EXTI->PR |= 1;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <EXTI0_IRQHandler+0x2c>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a07      	ldr	r2, [pc, #28]	@ (80007dc <EXTI0_IRQHandler+0x2c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6153      	str	r3, [r2, #20]

	addSchedulerEvent(ROTATE_EVENT);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f001 f9c8 	bl	8001b5c <addSchedulerEvent>

	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80007cc:	2006      	movs	r0, #6
 80007ce:	f002 ff50 	bl	8003672 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007d2:	2006      	movs	r0, #6
 80007d4:	f002 ff25 	bl	8003622 <HAL_NVIC_EnableIRQ>

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40013c00 	.word	0x40013c00

080007e0 <Check_Start>:

uint8_t Check_Start() {
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	return begin_game;
 80007e4:	4b03      	ldr	r3, [pc, #12]	@ (80007f4 <Check_Start+0x14>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2db      	uxtb	r3, r3
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	20000114 	.word	0x20000114

080007f8 <Display_Start_Screen>:
uint16_t doubles=0;
uint16_t tetris=0;

static RNG_HandleTypeDef HRNG;

void Display_Start_Screen() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	@ 0x38
 80007fc:	af00      	add	r7, sp, #0
	current_type = 0;
 80007fe:	4b9f      	ldr	r3, [pc, #636]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 8000804:	4b9e      	ldr	r3, [pc, #632]	@ (8000a80 <Display_Start_Screen+0x288>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	@ 0x34
 800080e:	e01e      	b.n	800084e <Display_Start_Screen+0x56>
        for (int x = 0; x < 4; x++) {
 8000810:	2300      	movs	r3, #0
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
 8000814:	e015      	b.n	8000842 <Display_Start_Screen+0x4a>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 8000816:	4b99      	ldr	r3, [pc, #612]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	499a      	ldr	r1, [pc, #616]	@ (8000a84 <Display_Start_Screen+0x28c>)
 800081c:	009a      	lsls	r2, r3, #2
 800081e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	18ca      	adds	r2, r1, r3
 8000826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000828:	4413      	add	r3, r2
 800082a:	7819      	ldrb	r1, [r3, #0]
 800082c:	4a96      	ldr	r2, [pc, #600]	@ (8000a88 <Display_Start_Screen+0x290>)
 800082e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	441a      	add	r2, r3
 8000834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000836:	4413      	add	r3, r2
 8000838:	460a      	mov	r2, r1
 800083a:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 800083c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800083e:	3301      	adds	r3, #1
 8000840:	633b      	str	r3, [r7, #48]	@ 0x30
 8000842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000844:	2b03      	cmp	r3, #3
 8000846:	dde6      	ble.n	8000816 <Display_Start_Screen+0x1e>
    for (int y = 0; y < 4; y++) {
 8000848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800084a:	3301      	adds	r3, #1
 800084c:	637b      	str	r3, [r7, #52]	@ 0x34
 800084e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000850:	2b03      	cmp	r3, #3
 8000852:	dddd      	ble.n	8000810 <Display_Start_Screen+0x18>
        }
    }

    current_x = 0;
 8000854:	4b8d      	ldr	r3, [pc, #564]	@ (8000a8c <Display_Start_Screen+0x294>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
    current_y = 0;
 800085a:	4b8d      	ldr	r3, [pc, #564]	@ (8000a90 <Display_Start_Screen+0x298>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 8000860:	f000 fcd4 	bl	800120c <place_tetromino>

	current_type = 1;
 8000864:	4b85      	ldr	r3, [pc, #532]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 800086a:	4b85      	ldr	r3, [pc, #532]	@ (8000a80 <Display_Start_Screen+0x288>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000874:	e01e      	b.n	80008b4 <Display_Start_Screen+0xbc>
        for (int x = 0; x < 4; x++) {
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800087a:	e015      	b.n	80008a8 <Display_Start_Screen+0xb0>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 800087c:	4b7f      	ldr	r3, [pc, #508]	@ (8000a7c <Display_Start_Screen+0x284>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4980      	ldr	r1, [pc, #512]	@ (8000a84 <Display_Start_Screen+0x28c>)
 8000882:	009a      	lsls	r2, r3, #2
 8000884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000886:	4413      	add	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	18ca      	adds	r2, r1, r3
 800088c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800088e:	4413      	add	r3, r2
 8000890:	7819      	ldrb	r1, [r3, #0]
 8000892:	4a7d      	ldr	r2, [pc, #500]	@ (8000a88 <Display_Start_Screen+0x290>)
 8000894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	441a      	add	r2, r3
 800089a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089c:	4413      	add	r3, r2
 800089e:	460a      	mov	r2, r1
 80008a0:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 80008a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a4:	3301      	adds	r3, #1
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	dde6      	ble.n	800087c <Display_Start_Screen+0x84>
    for (int y = 0; y < 4; y++) {
 80008ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008b0:	3301      	adds	r3, #1
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	dddd      	ble.n	8000876 <Display_Start_Screen+0x7e>
        }
    }

    current_x = 3;
 80008ba:	4b74      	ldr	r3, [pc, #464]	@ (8000a8c <Display_Start_Screen+0x294>)
 80008bc:	2203      	movs	r2, #3
 80008be:	701a      	strb	r2, [r3, #0]
    current_y = 0;
 80008c0:	4b73      	ldr	r3, [pc, #460]	@ (8000a90 <Display_Start_Screen+0x298>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 80008c6:	f000 fca1 	bl	800120c <place_tetromino>

	current_type = 2;
 80008ca:	4b6c      	ldr	r3, [pc, #432]	@ (8000a7c <Display_Start_Screen+0x284>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 80008d0:	4b6b      	ldr	r3, [pc, #428]	@ (8000a80 <Display_Start_Screen+0x288>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80008da:	e01e      	b.n	800091a <Display_Start_Screen+0x122>
        for (int x = 0; x < 4; x++) {
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
 80008e0:	e015      	b.n	800090e <Display_Start_Screen+0x116>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 80008e2:	4b66      	ldr	r3, [pc, #408]	@ (8000a7c <Display_Start_Screen+0x284>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4967      	ldr	r1, [pc, #412]	@ (8000a84 <Display_Start_Screen+0x28c>)
 80008e8:	009a      	lsls	r2, r3, #2
 80008ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ec:	4413      	add	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	18ca      	adds	r2, r1, r3
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	4413      	add	r3, r2
 80008f6:	7819      	ldrb	r1, [r3, #0]
 80008f8:	4a63      	ldr	r2, [pc, #396]	@ (8000a88 <Display_Start_Screen+0x290>)
 80008fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	441a      	add	r2, r3
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	4413      	add	r3, r2
 8000904:	460a      	mov	r2, r1
 8000906:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	3301      	adds	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	2b03      	cmp	r3, #3
 8000912:	dde6      	ble.n	80008e2 <Display_Start_Screen+0xea>
    for (int y = 0; y < 4; y++) {
 8000914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000916:	3301      	adds	r3, #1
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
 800091a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091c:	2b03      	cmp	r3, #3
 800091e:	dddd      	ble.n	80008dc <Display_Start_Screen+0xe4>
        }
    }

    current_x = 7;
 8000920:	4b5a      	ldr	r3, [pc, #360]	@ (8000a8c <Display_Start_Screen+0x294>)
 8000922:	2207      	movs	r2, #7
 8000924:	701a      	strb	r2, [r3, #0]
    current_y = 0;
 8000926:	4b5a      	ldr	r3, [pc, #360]	@ (8000a90 <Display_Start_Screen+0x298>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 800092c:	f000 fc6e 	bl	800120c <place_tetromino>

	current_type = 3;
 8000930:	4b52      	ldr	r3, [pc, #328]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000932:	2203      	movs	r2, #3
 8000934:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 8000936:	4b52      	ldr	r3, [pc, #328]	@ (8000a80 <Display_Start_Screen+0x288>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	e01e      	b.n	8000980 <Display_Start_Screen+0x188>
        for (int x = 0; x < 4; x++) {
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	e015      	b.n	8000974 <Display_Start_Screen+0x17c>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 8000948:	4b4c      	ldr	r3, [pc, #304]	@ (8000a7c <Display_Start_Screen+0x284>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	494d      	ldr	r1, [pc, #308]	@ (8000a84 <Display_Start_Screen+0x28c>)
 800094e:	009a      	lsls	r2, r3, #2
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	18ca      	adds	r2, r1, r3
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	4413      	add	r3, r2
 800095c:	7819      	ldrb	r1, [r3, #0]
 800095e:	4a4a      	ldr	r2, [pc, #296]	@ (8000a88 <Display_Start_Screen+0x290>)
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	441a      	add	r2, r3
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4413      	add	r3, r2
 800096a:	460a      	mov	r2, r1
 800096c:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	3301      	adds	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2b03      	cmp	r3, #3
 8000978:	dde6      	ble.n	8000948 <Display_Start_Screen+0x150>
    for (int y = 0; y < 4; y++) {
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3301      	adds	r3, #1
 800097e:	61fb      	str	r3, [r7, #28]
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	2b03      	cmp	r3, #3
 8000984:	dddd      	ble.n	8000942 <Display_Start_Screen+0x14a>
        }
    }

    current_x = 0;
 8000986:	4b41      	ldr	r3, [pc, #260]	@ (8000a8c <Display_Start_Screen+0x294>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
    current_y = 4;
 800098c:	4b40      	ldr	r3, [pc, #256]	@ (8000a90 <Display_Start_Screen+0x298>)
 800098e:	2204      	movs	r2, #4
 8000990:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 8000992:	f000 fc3b 	bl	800120c <place_tetromino>

	current_type = 4;
 8000996:	4b39      	ldr	r3, [pc, #228]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000998:	2204      	movs	r2, #4
 800099a:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 800099c:	4b38      	ldr	r3, [pc, #224]	@ (8000a80 <Display_Start_Screen+0x288>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	e01e      	b.n	80009e6 <Display_Start_Screen+0x1ee>
        for (int x = 0; x < 4; x++) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	e015      	b.n	80009da <Display_Start_Screen+0x1e2>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 80009ae:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <Display_Start_Screen+0x284>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4934      	ldr	r1, [pc, #208]	@ (8000a84 <Display_Start_Screen+0x28c>)
 80009b4:	009a      	lsls	r2, r3, #2
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	4413      	add	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	18ca      	adds	r2, r1, r3
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	4413      	add	r3, r2
 80009c2:	7819      	ldrb	r1, [r3, #0]
 80009c4:	4a30      	ldr	r2, [pc, #192]	@ (8000a88 <Display_Start_Screen+0x290>)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	441a      	add	r2, r3
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	4413      	add	r3, r2
 80009d0:	460a      	mov	r2, r1
 80009d2:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	3301      	adds	r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	dde6      	ble.n	80009ae <Display_Start_Screen+0x1b6>
    for (int y = 0; y < 4; y++) {
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3301      	adds	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	dddd      	ble.n	80009a8 <Display_Start_Screen+0x1b0>
        }
    }

    current_x = 4;
 80009ec:	4b27      	ldr	r3, [pc, #156]	@ (8000a8c <Display_Start_Screen+0x294>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	701a      	strb	r2, [r3, #0]
    current_y = 4;
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <Display_Start_Screen+0x298>)
 80009f4:	2204      	movs	r2, #4
 80009f6:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 80009f8:	f000 fc08 	bl	800120c <place_tetromino>
	current_type = 5;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <Display_Start_Screen+0x284>)
 80009fe:	2205      	movs	r2, #5
 8000a00:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <Display_Start_Screen+0x288>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	e01e      	b.n	8000a4c <Display_Start_Screen+0x254>
        for (int x = 0; x < 4; x++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	e015      	b.n	8000a40 <Display_Start_Screen+0x248>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	491a      	ldr	r1, [pc, #104]	@ (8000a84 <Display_Start_Screen+0x28c>)
 8000a1a:	009a      	lsls	r2, r3, #2
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4413      	add	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	18ca      	adds	r2, r1, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4413      	add	r3, r2
 8000a28:	7819      	ldrb	r1, [r3, #0]
 8000a2a:	4a17      	ldr	r2, [pc, #92]	@ (8000a88 <Display_Start_Screen+0x290>)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	441a      	add	r2, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	4413      	add	r3, r2
 8000a36:	460a      	mov	r2, r1
 8000a38:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	dde6      	ble.n	8000a14 <Display_Start_Screen+0x21c>
    for (int y = 0; y < 4; y++) {
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	dddd      	ble.n	8000a0e <Display_Start_Screen+0x216>
        }
    }

    current_x = 0;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <Display_Start_Screen+0x294>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
    current_y = 8;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <Display_Start_Screen+0x298>)
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 8000a5e:	f000 fbd5 	bl	800120c <place_tetromino>

	current_type = 6;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <Display_Start_Screen+0x284>)
 8000a64:	2206      	movs	r2, #6
 8000a66:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <Display_Start_Screen+0x288>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e02b      	b.n	8000acc <Display_Start_Screen+0x2d4>
        for (int x = 0; x < 4; x++) {
 8000a74:	2300      	movs	r3, #0
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	e022      	b.n	8000ac0 <Display_Start_Screen+0x2c8>
 8000a7a:	bf00      	nop
 8000a7c:	2000026f 	.word	0x2000026f
 8000a80:	2000026e 	.word	0x2000026e
 8000a84:	20000000 	.word	0x20000000
 8000a88:	2000025c 	.word	0x2000025c
 8000a8c:	2000026c 	.word	0x2000026c
 8000a90:	2000026d 	.word	0x2000026d
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <Display_Start_Screen+0x2f4>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4915      	ldr	r1, [pc, #84]	@ (8000af0 <Display_Start_Screen+0x2f8>)
 8000a9a:	009a      	lsls	r2, r3, #2
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	18ca      	adds	r2, r1, r3
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	7819      	ldrb	r1, [r3, #0]
 8000aaa:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <Display_Start_Screen+0x2fc>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	441a      	add	r2, r3
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	dde6      	ble.n	8000a94 <Display_Start_Screen+0x29c>
    for (int y = 0; y < 4; y++) {
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	ddd0      	ble.n	8000a74 <Display_Start_Screen+0x27c>
        }
    }

    current_x = 4;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <Display_Start_Screen+0x300>)
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	701a      	strb	r2, [r3, #0]
    current_y = 8;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <Display_Start_Screen+0x304>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	701a      	strb	r2, [r3, #0]

    place_tetromino();
 8000ade:	f000 fb95 	bl	800120c <place_tetromino>
}
 8000ae2:	bf00      	nop
 8000ae4:	3738      	adds	r7, #56	@ 0x38
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000026f 	.word	0x2000026f
 8000af0:	20000000 	.word	0x20000000
 8000af4:	2000025c 	.word	0x2000025c
 8000af8:	2000026c 	.word	0x2000026c
 8000afc:	2000026d 	.word	0x2000026d

08000b00 <initialize_game>:

void initialize_game() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
    Game_RNG_Init();
 8000b06:	f000 fd75 	bl	80015f4 <Game_RNG_Init>
    for (int y = 0; y < BOARD_HEIGHT; y++) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	e013      	b.n	8000b38 <initialize_game+0x38>
        for (int x = 0; x < BOARD_WIDTH; x++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	e00a      	b.n	8000b2c <initialize_game+0x2c>
            board[y][x] = 0;
 8000b16:	4a0f      	ldr	r2, [pc, #60]	@ (8000b54 <initialize_game+0x54>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	441a      	add	r2, r3
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < BOARD_WIDTH; x++) {
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b0f      	cmp	r3, #15
 8000b30:	ddf1      	ble.n	8000b16 <initialize_game+0x16>
    for (int y = 0; y < BOARD_HEIGHT; y++) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3301      	adds	r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b13      	cmp	r3, #19
 8000b3c:	dde8      	ble.n	8000b10 <initialize_game+0x10>
        }
    }
    spawn_tetromino();
 8000b3e:	f000 f8a7 	bl	8000c90 <spawn_tetromino>
    Timer2_Reset();
 8000b42:	f001 f8ef 	bl	8001d24 <Timer2_Reset>
    Timer2_Start();
 8000b46:	f001 f8cf 	bl	8001ce8 <Timer2_Start>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000011c 	.word	0x2000011c

08000b58 <draw_block>:

void draw_block(uint8_t x, uint8_t y, uint16_t color) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
 8000b62:	460b      	mov	r3, r1
 8000b64:	71bb      	strb	r3, [r7, #6]
 8000b66:	4613      	mov	r3, r2
 8000b68:	80bb      	strh	r3, [r7, #4]
	for(int temp_x = x*LCD_PIXEL_WIDTH/BOARD_WIDTH; temp_x < (x+1)*LCD_PIXEL_WIDTH/BOARD_WIDTH; temp_x++){
 8000b6a:	79fa      	ldrb	r2, [r7, #7]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	1a9b      	subs	r3, r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e017      	b.n	8000ba6 <draw_block+0x4e>
		for(int temp_y = y*LCD_PIXEL_HEIGHT/BOARD_HEIGHT; temp_y < (y+1)*LCD_PIXEL_HEIGHT/BOARD_HEIGHT; temp_y++){
 8000b76:	79bb      	ldrb	r3, [r7, #6]
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	e00a      	b.n	8000b94 <draw_block+0x3c>
			LCD_Draw_Pixel(temp_x,temp_y,color);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	b291      	uxth	r1, r2
 8000b86:	88ba      	ldrh	r2, [r7, #4]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 febb 	bl	8001904 <LCD_Draw_Pixel>
		for(int temp_y = y*LCD_PIXEL_HEIGHT/BOARD_HEIGHT; temp_y < (y+1)*LCD_PIXEL_HEIGHT/BOARD_HEIGHT; temp_y++){
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	3301      	adds	r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	3301      	adds	r3, #1
 8000b98:	011b      	lsls	r3, r3, #4
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbee      	blt.n	8000b7e <draw_block+0x26>
	for(int temp_x = x*LCD_PIXEL_WIDTH/BOARD_WIDTH; temp_x < (x+1)*LCD_PIXEL_WIDTH/BOARD_WIDTH; temp_x++){
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	1c5a      	adds	r2, r3, #1
 8000baa:	4613      	mov	r3, r2
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	1a9b      	subs	r3, r3, r2
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbdf      	blt.n	8000b76 <draw_block+0x1e>
		}
	}


}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <draw_board>:


void draw_board() {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0

    for (int y = 0; y < BOARD_HEIGHT; y++) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	e026      	b.n	8000c1a <draw_board+0x5a>
        for (int x = 0; x < BOARD_WIDTH; x++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	e01d      	b.n	8000c0e <draw_board+0x4e>
            if (board[y][x]) {
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8000c80 <draw_board+0xc0>)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	441a      	add	r2, r3
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	4413      	add	r3, r2
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d009      	beq.n	8000bf8 <draw_board+0x38>
            	draw_block(x,y,LCD_COLOR_WHITE);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	b2d1      	uxtb	r1, r2
 8000bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ffb1 	bl	8000b58 <draw_block>
 8000bf6:	e007      	b.n	8000c08 <draw_board+0x48>
            } else {
            	draw_block(x,y,LCD_COLOR_BLACK);
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	b2d1      	uxtb	r1, r2
 8000c00:	2200      	movs	r2, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ffa8 	bl	8000b58 <draw_block>
        for (int x = 0; x < BOARD_WIDTH; x++) {
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	ddde      	ble.n	8000bd2 <draw_board+0x12>
    for (int y = 0; y < BOARD_HEIGHT; y++) {
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2b13      	cmp	r3, #19
 8000c1e:	ddd5      	ble.n	8000bcc <draw_board+0xc>
            }
        }
    }

    for (uint8_t y = 0; y < 4; y++) {
 8000c20:	2300      	movs	r3, #0
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	e023      	b.n	8000c6e <draw_board+0xae>
    	for (uint8_t x = 0; x<4; x++) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	71bb      	strb	r3, [r7, #6]
 8000c2a:	e01a      	b.n	8000c62 <draw_board+0xa2>
    		if(current_tetromino[y][x]) {
 8000c2c:	79fa      	ldrb	r2, [r7, #7]
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	4914      	ldr	r1, [pc, #80]	@ (8000c84 <draw_board+0xc4>)
 8000c32:	0092      	lsls	r2, r2, #2
 8000c34:	440a      	add	r2, r1
 8000c36:	4413      	add	r3, r2
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d00e      	beq.n	8000c5c <draw_board+0x9c>
    			draw_block(x+current_x,(y+current_y),LCD_COLOR_WHITE);
 8000c3e:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <draw_board+0xc8>)
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	4413      	add	r3, r2
 8000c46:	b2d8      	uxtb	r0, r3
 8000c48:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <draw_board+0xcc>)
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4413      	add	r3, r2
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c56:	4619      	mov	r1, r3
 8000c58:	f7ff ff7e 	bl	8000b58 <draw_block>
    	for (uint8_t x = 0; x<4; x++) {
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	71bb      	strb	r3, [r7, #6]
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d9e1      	bls.n	8000c2c <draw_board+0x6c>
    for (uint8_t y = 0; y < 4; y++) {
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b03      	cmp	r3, #3
 8000c72:	d9d8      	bls.n	8000c26 <draw_board+0x66>
    		}
    	}
    }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000011c 	.word	0x2000011c
 8000c84:	2000025c 	.word	0x2000025c
 8000c88:	2000026c 	.word	0x2000026c
 8000c8c:	2000026d 	.word	0x2000026d

08000c90 <spawn_tetromino>:


void spawn_tetromino() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
	current_type = HAL_RNG_GetRandomNumber(&HRNG)%7;
 8000c96:	4822      	ldr	r0, [pc, #136]	@ (8000d20 <spawn_tetromino+0x90>)
 8000c98:	f005 f972 	bl	8005f80 <HAL_RNG_GetRandomNumber>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	4b21      	ldr	r3, [pc, #132]	@ (8000d24 <spawn_tetromino+0x94>)
 8000ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca4:	1ad1      	subs	r1, r2, r3
 8000ca6:	0849      	lsrs	r1, r1, #1
 8000ca8:	440b      	add	r3, r1
 8000caa:	0899      	lsrs	r1, r3, #2
 8000cac:	460b      	mov	r3, r1
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	1ad1      	subs	r1, r2, r3
 8000cb4:	b2ca      	uxtb	r2, r1
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <spawn_tetromino+0x98>)
 8000cb8:	701a      	strb	r2, [r3, #0]
    current_rotation = 0;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <spawn_tetromino+0x9c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]

    for (int y = 0; y < 4; y++) {
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	e01e      	b.n	8000d04 <spawn_tetromino+0x74>
        for (int x = 0; x < 4; x++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	e015      	b.n	8000cf8 <spawn_tetromino+0x68>
            current_tetromino[y][x] = tetrominoes[current_type][y][x];
 8000ccc:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <spawn_tetromino+0x98>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4917      	ldr	r1, [pc, #92]	@ (8000d30 <spawn_tetromino+0xa0>)
 8000cd2:	009a      	lsls	r2, r3, #2
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	18ca      	adds	r2, r1, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	7819      	ldrb	r1, [r3, #0]
 8000ce2:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <spawn_tetromino+0xa4>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	441a      	add	r2, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	460a      	mov	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	dde6      	ble.n	8000ccc <spawn_tetromino+0x3c>
    for (int y = 0; y < 4; y++) {
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3301      	adds	r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	dddd      	ble.n	8000cc6 <spawn_tetromino+0x36>
        }
    }

    current_x = BOARD_WIDTH / 2 - 2;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <spawn_tetromino+0xa8>)
 8000d0c:	2206      	movs	r2, #6
 8000d0e:	701a      	strb	r2, [r3, #0]
    current_y = 0;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <spawn_tetromino+0xac>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000278 	.word	0x20000278
 8000d24:	24924925 	.word	0x24924925
 8000d28:	2000026f 	.word	0x2000026f
 8000d2c:	2000026e 	.word	0x2000026e
 8000d30:	20000000 	.word	0x20000000
 8000d34:	2000025c 	.word	0x2000025c
 8000d38:	2000026c 	.word	0x2000026c
 8000d3c:	2000026d 	.word	0x2000026d

08000d40 <rotate_tetromino>:


void rotate_tetromino() {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	@ 0x50
 8000d44:	af00      	add	r7, sp, #0
    int temp[4][4];
    for (int y = 0; y < 4; y++) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d4a:	e01e      	b.n	8000d8a <rotate_tetromino+0x4a>
        for (int x = 0; x < 4; x++) {
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d50:	e015      	b.n	8000d7e <rotate_tetromino+0x3e>
            temp[y][x] = current_tetromino[3 - x][y];
 8000d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d54:	f1c3 0303 	rsb	r3, r3, #3
 8000d58:	4a72      	ldr	r2, [pc, #456]	@ (8000f24 <rotate_tetromino+0x1e4>)
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	441a      	add	r2, r3
 8000d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d68:	009a      	lsls	r2, r3, #2
 8000d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d6c:	4413      	add	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	3350      	adds	r3, #80	@ 0x50
 8000d72:	443b      	add	r3, r7
 8000d74:	f843 1c50 	str.w	r1, [r3, #-80]
        for (int x = 0; x < 4; x++) {
 8000d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	dde6      	ble.n	8000d52 <rotate_tetromino+0x12>
    for (int y = 0; y < 4; y++) {
 8000d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d86:	3301      	adds	r3, #1
 8000d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	dddd      	ble.n	8000d4c <rotate_tetromino+0xc>
        }
    }

    switch(current_rotation) {
 8000d90:	4b65      	ldr	r3, [pc, #404]	@ (8000f28 <rotate_tetromino+0x1e8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d83f      	bhi.n	8000e18 <rotate_tetromino+0xd8>
 8000d98:	a201      	add	r2, pc, #4	@ (adr r2, 8000da0 <rotate_tetromino+0x60>)
 8000d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9e:	bf00      	nop
 8000da0:	08000db1 	.word	0x08000db1
 8000da4:	08000dcb 	.word	0x08000dcb
 8000da8:	08000de5 	.word	0x08000de5
 8000dac:	08000dff 	.word	0x08000dff
    case 0:
    	current_x--;
 8000db0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b5c      	ldr	r3, [pc, #368]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000dba:	701a      	strb	r2, [r3, #0]
    	current_x--;
 8000dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b59      	ldr	r3, [pc, #356]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000dc6:	701a      	strb	r2, [r3, #0]
    	break;
 8000dc8:	e026      	b.n	8000e18 <rotate_tetromino+0xd8>
    case 1:
    	current_y--;
 8000dca:	4b59      	ldr	r3, [pc, #356]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b57      	ldr	r3, [pc, #348]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000dd4:	701a      	strb	r2, [r3, #0]
    	current_y--;
 8000dd6:	4b56      	ldr	r3, [pc, #344]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b54      	ldr	r3, [pc, #336]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000de0:	701a      	strb	r2, [r3, #0]
    	break;
 8000de2:	e019      	b.n	8000e18 <rotate_tetromino+0xd8>
    case 2:
    	current_x++;
 8000de4:	4b51      	ldr	r3, [pc, #324]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b4f      	ldr	r3, [pc, #316]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000dee:	701a      	strb	r2, [r3, #0]
    	current_x++;
 8000df0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	4b4c      	ldr	r3, [pc, #304]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000dfa:	701a      	strb	r2, [r3, #0]
    	break;
 8000dfc:	e00c      	b.n	8000e18 <rotate_tetromino+0xd8>
    case 3:
        current_y++;
 8000dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b4a      	ldr	r3, [pc, #296]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000e08:	701a      	strb	r2, [r3, #0]
        current_y++;
 8000e0a:	4b49      	ldr	r3, [pc, #292]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b47      	ldr	r3, [pc, #284]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000e14:	701a      	strb	r2, [r3, #0]
        break;
 8000e16:	bf00      	nop
    }

    for (int y = 0; y < 4; y++) {
 8000e18:	2300      	movs	r3, #0
 8000e1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e1c:	e01d      	b.n	8000e5a <rotate_tetromino+0x11a>
        for (int x = 0; x < 4; x++) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	643b      	str	r3, [r7, #64]	@ 0x40
 8000e22:	e014      	b.n	8000e4e <rotate_tetromino+0x10e>
            current_tetromino[y][x] = temp[y][x];
 8000e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e26:	009a      	lsls	r2, r3, #2
 8000e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	3350      	adds	r3, #80	@ 0x50
 8000e30:	443b      	add	r3, r7
 8000e32:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8000e36:	b2d9      	uxtb	r1, r3
 8000e38:	4a3a      	ldr	r2, [pc, #232]	@ (8000f24 <rotate_tetromino+0x1e4>)
 8000e3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	441a      	add	r2, r3
 8000e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e42:	4413      	add	r3, r2
 8000e44:	460a      	mov	r2, r1
 8000e46:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++) {
 8000e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	dde7      	ble.n	8000e24 <rotate_tetromino+0xe4>
    for (int y = 0; y < 4; y++) {
 8000e54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e56:	3301      	adds	r3, #1
 8000e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	ddde      	ble.n	8000e1e <rotate_tetromino+0xde>
        }
    }

    if (check_collision(current_x, current_y)) {
 8000e60:	4b32      	ldr	r3, [pc, #200]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b32      	ldr	r3, [pc, #200]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	f000 f861 	bl	8000f34 <check_collision>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d043      	beq.n	8000f00 <rotate_tetromino+0x1c0>
        switch(current_rotation) {
 8000e78:	4b2b      	ldr	r3, [pc, #172]	@ (8000f28 <rotate_tetromino+0x1e8>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d84d      	bhi.n	8000f1c <rotate_tetromino+0x1dc>
 8000e80:	a201      	add	r2, pc, #4	@ (adr r2, 8000e88 <rotate_tetromino+0x148>)
 8000e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e86:	bf00      	nop
 8000e88:	08000e99 	.word	0x08000e99
 8000e8c:	08000eb3 	.word	0x08000eb3
 8000e90:	08000ecd 	.word	0x08000ecd
 8000e94:	08000ee7 	.word	0x08000ee7
        case 0:
        	current_x++;
 8000e98:	4b24      	ldr	r3, [pc, #144]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000ea2:	701a      	strb	r2, [r3, #0]
        	current_x++;
 8000ea4:	4b21      	ldr	r3, [pc, #132]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000eae:	701a      	strb	r2, [r3, #0]
        	break;
 8000eb0:	e034      	b.n	8000f1c <rotate_tetromino+0x1dc>
        case 1:
        	current_y++;
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000ebc:	701a      	strb	r2, [r3, #0]
        	current_y++;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000ec8:	701a      	strb	r2, [r3, #0]
        	break;
 8000eca:	e027      	b.n	8000f1c <rotate_tetromino+0x1dc>
        case 2:
        	current_x--;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000ed6:	701a      	strb	r2, [r3, #0]
        	current_x--;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <rotate_tetromino+0x1ec>)
 8000ee2:	701a      	strb	r2, [r3, #0]
        	break;
 8000ee4:	e01a      	b.n	8000f1c <rotate_tetromino+0x1dc>
        case 3:
            current_y--;
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000ef0:	701a      	strb	r2, [r3, #0]
            current_y--;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <rotate_tetromino+0x1f0>)
 8000efc:	701a      	strb	r2, [r3, #0]
            break;
 8000efe:	e00d      	b.n	8000f1c <rotate_tetromino+0x1dc>
                }
            }
        }
    }
    else {
    	current_rotation = (current_rotation+1)%4;
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <rotate_tetromino+0x1e8>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	425a      	negs	r2, r3
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	f002 0203 	and.w	r2, r2, #3
 8000f10:	bf58      	it	pl
 8000f12:	4253      	negpl	r3, r2
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <rotate_tetromino+0x1e8>)
 8000f18:	701a      	strb	r2, [r3, #0]
    }


}
 8000f1a:	e7ff      	b.n	8000f1c <rotate_tetromino+0x1dc>
 8000f1c:	bf00      	nop
 8000f1e:	3750      	adds	r7, #80	@ 0x50
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000025c 	.word	0x2000025c
 8000f28:	2000026e 	.word	0x2000026e
 8000f2c:	2000026c 	.word	0x2000026c
 8000f30:	2000026d 	.word	0x2000026d

08000f34 <check_collision>:


int check_collision(int x, int y) {
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e033      	b.n	8000fac <check_collision+0x78>
        for (int j = 0; j < 4; j++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	e02a      	b.n	8000fa0 <check_collision+0x6c>
            if (current_tetromino[i][j]) {
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc0 <check_collision+0x8c>)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	441a      	add	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d01e      	beq.n	8000f9a <check_collision+0x66>
                int board_x = x + j;
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4413      	add	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]
                int board_y = y + i;
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	4413      	add	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
                if (board_x < 0 || board_x >= BOARD_WIDTH || board_y >= BOARD_HEIGHT || (board_y >= 0 && board[board_y][board_x])) {
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db11      	blt.n	8000f96 <check_collision+0x62>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	dc0e      	bgt.n	8000f96 <check_collision+0x62>
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2b13      	cmp	r3, #19
 8000f7c:	dc0b      	bgt.n	8000f96 <check_collision+0x62>
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <check_collision+0x66>
 8000f84:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc4 <check_collision+0x90>)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	441a      	add	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <check_collision+0x66>
                    return 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00c      	b.n	8000fb4 <check_collision+0x80>
        for (int j = 0; j < 4; j++) {
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	ddd1      	ble.n	8000f4a <check_collision+0x16>
    for (int i = 0; i < 4; i++) {
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	ddc8      	ble.n	8000f44 <check_collision+0x10>
                }
            }
        }
    }
    return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	2000025c 	.word	0x2000025c
 8000fc4:	2000011c 	.word	0x2000011c

08000fc8 <move_down>:


void move_down() {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
    if (!check_collision(current_x, current_y + 1)) {
 8000fce:	4b27      	ldr	r3, [pc, #156]	@ (800106c <move_down+0xa4>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <move_down+0xa8>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4610      	mov	r0, r2
 8000fde:	f7ff ffa9 	bl	8000f34 <check_collision>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d106      	bne.n	8000ff6 <move_down+0x2e>
        current_y++;
 8000fe8:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <move_down+0xa8>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <move_down+0xa8>)
 8000ff2:	701a      	strb	r2, [r3, #0]
        }
        else {
        spawn_tetromino();
        }
    }
}
 8000ff4:	e035      	b.n	8001062 <move_down+0x9a>
        for (int i = 0; i < 4; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	e024      	b.n	8001046 <move_down+0x7e>
            for (int j = 0; j < 4; j++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	e01b      	b.n	800103a <move_down+0x72>
                if (current_tetromino[i][j]) {
 8001002:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <move_down+0xac>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	441a      	add	r2, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00f      	beq.n	8001034 <move_down+0x6c>
                    board[current_y + i][current_x + j] = 1;
 8001014:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <move_down+0xa8>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	441a      	add	r2, r3
 800101e:	4b13      	ldr	r3, [pc, #76]	@ (800106c <move_down+0xa4>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	440b      	add	r3, r1
 8001028:	4913      	ldr	r1, [pc, #76]	@ (8001078 <move_down+0xb0>)
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	440a      	add	r2, r1
 800102e:	4413      	add	r3, r2
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < 4; j++) {
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2b03      	cmp	r3, #3
 800103e:	dde0      	ble.n	8001002 <move_down+0x3a>
        for (int i = 0; i < 4; i++) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b03      	cmp	r3, #3
 800104a:	ddd7      	ble.n	8000ffc <move_down+0x34>
        clear_lines();
 800104c:	f000 f84a 	bl	80010e4 <clear_lines>
        if(current_y==0) {
 8001050:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <move_down+0xa8>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <move_down+0x96>
        	game_over();
 8001058:	f000 f916 	bl	8001288 <game_over>
}
 800105c:	e001      	b.n	8001062 <move_down+0x9a>
        spawn_tetromino();
 800105e:	f7ff fe17 	bl	8000c90 <spawn_tetromino>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000026c 	.word	0x2000026c
 8001070:	2000026d 	.word	0x2000026d
 8001074:	2000025c 	.word	0x2000025c
 8001078:	2000011c 	.word	0x2000011c

0800107c <move_left>:
    while (!check_collision(current_x, current_y + 1)) {
        current_y++;
    }
}

void move_left() {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    if (!check_collision(current_x - 1, current_y)) {
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <move_left+0x2c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <move_left+0x30>)
 8001088:	7812      	ldrb	r2, [r2, #0]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff51 	bl	8000f34 <check_collision>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d105      	bne.n	80010a4 <move_left+0x28>
        current_x--;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <move_left+0x2c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b01      	ldr	r3, [pc, #4]	@ (80010a8 <move_left+0x2c>)
 80010a2:	701a      	strb	r2, [r3, #0]
    }
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000026c 	.word	0x2000026c
 80010ac:	2000026d 	.word	0x2000026d

080010b0 <move_right>:


void move_right() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
    if (!check_collision(current_x + 1, current_y)) {
 80010b4:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <move_right+0x2c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	4a09      	ldr	r2, [pc, #36]	@ (80010e0 <move_right+0x30>)
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff37 	bl	8000f34 <check_collision>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d105      	bne.n	80010d8 <move_right+0x28>
        current_x++;
 80010cc:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <move_right+0x2c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b01      	ldr	r3, [pc, #4]	@ (80010dc <move_right+0x2c>)
 80010d6:	701a      	strb	r2, [r3, #0]
    }
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000026c 	.word	0x2000026c
 80010e0:	2000026d 	.word	0x2000026d

080010e4 <clear_lines>:

void clear_lines() {
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	@ 0x24
 80010e8:	af00      	add	r7, sp, #0
	uint8_t LinesCleared=0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	77fb      	strb	r3, [r7, #31]
    for (int y = BOARD_HEIGHT - 1; y >= 0; y--) {
 80010ee:	2313      	movs	r3, #19
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	e052      	b.n	800119a <clear_lines+0xb6>
        int full = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
        for (int x = 0; x < BOARD_WIDTH; x++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	e00e      	b.n	800111c <clear_lines+0x38>
            if (board[y][x] == 0) {
 80010fe:	4a3f      	ldr	r2, [pc, #252]	@ (80011fc <clear_lines+0x118>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	441a      	add	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <clear_lines+0x32>
                full = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
                break;
 8001114:	e005      	b.n	8001122 <clear_lines+0x3e>
        for (int x = 0; x < BOARD_WIDTH; x++) {
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	3301      	adds	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	dded      	ble.n	80010fe <clear_lines+0x1a>
            }
        }

        if (full) {
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d035      	beq.n	8001194 <clear_lines+0xb0>
            for (int i = y; i > 0; i--) {
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	e01b      	b.n	8001166 <clear_lines+0x82>
                for (int x = 0; x < BOARD_WIDTH; x++) {
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	e012      	b.n	800115a <clear_lines+0x76>
                    board[i][x] = board[i - 1][x];
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3b01      	subs	r3, #1
 8001138:	4a30      	ldr	r2, [pc, #192]	@ (80011fc <clear_lines+0x118>)
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	441a      	add	r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	4413      	add	r3, r2
 8001142:	7819      	ldrb	r1, [r3, #0]
 8001144:	4a2d      	ldr	r2, [pc, #180]	@ (80011fc <clear_lines+0x118>)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	441a      	add	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4413      	add	r3, r2
 8001150:	460a      	mov	r2, r1
 8001152:	701a      	strb	r2, [r3, #0]
                for (int x = 0; x < BOARD_WIDTH; x++) {
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3301      	adds	r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	dde9      	ble.n	8001134 <clear_lines+0x50>
            for (int i = y; i > 0; i--) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3b01      	subs	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	dce0      	bgt.n	800112e <clear_lines+0x4a>
                }
            }
            for (int x = 0; x < BOARD_WIDTH; x++) {
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	e007      	b.n	8001182 <clear_lines+0x9e>
                board[0][x] = 0;
 8001172:	4a22      	ldr	r2, [pc, #136]	@ (80011fc <clear_lines+0x118>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
            for (int x = 0; x < BOARD_WIDTH; x++) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	ddf4      	ble.n	8001172 <clear_lines+0x8e>
            }
            y++;
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	3301      	adds	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
            LinesCleared++;
 800118e:	7ffb      	ldrb	r3, [r7, #31]
 8001190:	3301      	adds	r3, #1
 8001192:	77fb      	strb	r3, [r7, #31]
    for (int y = BOARD_HEIGHT - 1; y >= 0; y--) {
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	3b01      	subs	r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	daa9      	bge.n	80010f4 <clear_lines+0x10>
        }
    }
    if(LinesCleared){
 80011a0:	7ffb      	ldrb	r3, [r7, #31]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d024      	beq.n	80011f0 <clear_lines+0x10c>
    	if(LinesCleared%2) {
 80011a6:	7ffb      	ldrb	r3, [r7, #31]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d012      	beq.n	80011d8 <clear_lines+0xf4>
    		LinesCleared--;
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	77fb      	strb	r3, [r7, #31]
    		singles++;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <clear_lines+0x11c>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <clear_lines+0x11c>)
 80011c2:	801a      	strh	r2, [r3, #0]
    	}

    	while(LinesCleared>=4) {
 80011c4:	e008      	b.n	80011d8 <clear_lines+0xf4>
    		LinesCleared -= 4;
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
 80011c8:	3b04      	subs	r3, #4
 80011ca:	77fb      	strb	r3, [r7, #31]
    		tetris++;
 80011cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <clear_lines+0x120>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <clear_lines+0x120>)
 80011d6:	801a      	strh	r2, [r3, #0]
    	while(LinesCleared>=4) {
 80011d8:	7ffb      	ldrb	r3, [r7, #31]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d8f3      	bhi.n	80011c6 <clear_lines+0xe2>
    	}
    	if(LinesCleared) {
 80011de:	7ffb      	ldrb	r3, [r7, #31]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <clear_lines+0x10c>
    		doubles++;
 80011e4:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <clear_lines+0x124>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <clear_lines+0x124>)
 80011ee:	801a      	strh	r2, [r3, #0]
    	}
    }

}
 80011f0:	bf00      	nop
 80011f2:	3724      	adds	r7, #36	@ 0x24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	2000011c 	.word	0x2000011c
 8001200:	20000270 	.word	0x20000270
 8001204:	20000274 	.word	0x20000274
 8001208:	20000272 	.word	0x20000272

0800120c <place_tetromino>:

void place_tetromino() {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; i++) {
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	e026      	b.n	8001266 <place_tetromino+0x5a>
        for (uint8_t j = 0; j < 4; j++) {
 8001218:	2300      	movs	r3, #0
 800121a:	71bb      	strb	r3, [r7, #6]
 800121c:	e01d      	b.n	800125a <place_tetromino+0x4e>
            if (current_tetromino[i][j]) {
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	4915      	ldr	r1, [pc, #84]	@ (8001278 <place_tetromino+0x6c>)
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	440a      	add	r2, r1
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d011      	beq.n	8001254 <place_tetromino+0x48>
                uint8_t x = current_x + j;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <place_tetromino+0x70>)
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	4413      	add	r3, r2
 8001238:	717b      	strb	r3, [r7, #5]
                uint8_t y = current_y + i;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <place_tetromino+0x74>)
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4413      	add	r3, r2
 8001242:	713b      	strb	r3, [r7, #4]
                if (y >= 0) {
                    board[y][x] = 1;
 8001244:	793a      	ldrb	r2, [r7, #4]
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	490e      	ldr	r1, [pc, #56]	@ (8001284 <place_tetromino+0x78>)
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	440a      	add	r2, r1
 800124e:	4413      	add	r3, r2
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 4; j++) {
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	3301      	adds	r3, #1
 8001258:	71bb      	strb	r3, [r7, #6]
 800125a:	79bb      	ldrb	r3, [r7, #6]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d9de      	bls.n	800121e <place_tetromino+0x12>
    for (uint8_t i = 0; i < 4; i++) {
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	3301      	adds	r3, #1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d9d5      	bls.n	8001218 <place_tetromino+0xc>
                }
            }
        }
    }
    clear_lines();
 800126c:	f7ff ff3a 	bl	80010e4 <clear_lines>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000025c 	.word	0x2000025c
 800127c:	2000026c 	.word	0x2000026c
 8001280:	2000026d 	.word	0x2000026d
 8001284:	2000011c 	.word	0x2000011c

08001288 <game_over>:

void game_over() {
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	@ 0x30
 800128c:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_RED);
 800128e:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8001292:	2000      	movs	r0, #0
 8001294:	f000 fb54 	bl	8001940 <LCD_Clear>
	Timer2_Stop();
 8001298:	f000 fd35 	bl	8001d06 <Timer2_Stop>
	int Time_Played = (int) GetGameTime();
 800129c:	f000 fd4e 	bl	8001d3c <GetGameTime>
 80012a0:	4603      	mov	r3, r0
 80012a2:	613b      	str	r3, [r7, #16]

	LCD_SetTextColor(LCD_COLOR_BLACK);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 fb6d 	bl	8001984 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80012aa:	48ba      	ldr	r0, [pc, #744]	@ (8001594 <game_over+0x30c>)
 80012ac:	f000 fb7a 	bl	80019a4 <LCD_SetFont>

	LCD_DisplayChar(60,40,'T');
 80012b0:	2254      	movs	r2, #84	@ 0x54
 80012b2:	2128      	movs	r1, #40	@ 0x28
 80012b4:	203c      	movs	r0, #60	@ 0x3c
 80012b6:	f000 fbf3 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(70,40,'I');
 80012ba:	2249      	movs	r2, #73	@ 0x49
 80012bc:	2128      	movs	r1, #40	@ 0x28
 80012be:	2046      	movs	r0, #70	@ 0x46
 80012c0:	f000 fbee 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(80,40,'M');
 80012c4:	224d      	movs	r2, #77	@ 0x4d
 80012c6:	2128      	movs	r1, #40	@ 0x28
 80012c8:	2050      	movs	r0, #80	@ 0x50
 80012ca:	f000 fbe9 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(95,40,'E');
 80012ce:	2245      	movs	r2, #69	@ 0x45
 80012d0:	2128      	movs	r1, #40	@ 0x28
 80012d2:	205f      	movs	r0, #95	@ 0x5f
 80012d4:	f000 fbe4 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(105,40,' ');
 80012d8:	2220      	movs	r2, #32
 80012da:	2128      	movs	r1, #40	@ 0x28
 80012dc:	2069      	movs	r0, #105	@ 0x69
 80012de:	f000 fbdf 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(115,40,'P');
 80012e2:	2250      	movs	r2, #80	@ 0x50
 80012e4:	2128      	movs	r1, #40	@ 0x28
 80012e6:	2073      	movs	r0, #115	@ 0x73
 80012e8:	f000 fbda 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(130,40,'L');
 80012ec:	224c      	movs	r2, #76	@ 0x4c
 80012ee:	2128      	movs	r1, #40	@ 0x28
 80012f0:	2082      	movs	r0, #130	@ 0x82
 80012f2:	f000 fbd5 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(145,40,'A');
 80012f6:	2241      	movs	r2, #65	@ 0x41
 80012f8:	2128      	movs	r1, #40	@ 0x28
 80012fa:	2091      	movs	r0, #145	@ 0x91
 80012fc:	f000 fbd0 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(160,40,'Y');
 8001300:	2259      	movs	r2, #89	@ 0x59
 8001302:	2128      	movs	r1, #40	@ 0x28
 8001304:	20a0      	movs	r0, #160	@ 0xa0
 8001306:	f000 fbcb 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(175,40,'E');
 800130a:	2245      	movs	r2, #69	@ 0x45
 800130c:	2128      	movs	r1, #40	@ 0x28
 800130e:	20af      	movs	r0, #175	@ 0xaf
 8001310:	f000 fbc6 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(190,40,'D');
 8001314:	2244      	movs	r2, #68	@ 0x44
 8001316:	2128      	movs	r1, #40	@ 0x28
 8001318:	20be      	movs	r0, #190	@ 0xbe
 800131a:	f000 fbc1 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(205,40,':');
 800131e:	223a      	movs	r2, #58	@ 0x3a
 8001320:	2128      	movs	r1, #40	@ 0x28
 8001322:	20cd      	movs	r0, #205	@ 0xcd
 8001324:	f000 fbbc 	bl	8001aa0 <LCD_DisplayChar>

	LCD_DisplayChar(60,80,'S');
 8001328:	2253      	movs	r2, #83	@ 0x53
 800132a:	2150      	movs	r1, #80	@ 0x50
 800132c:	203c      	movs	r0, #60	@ 0x3c
 800132e:	f000 fbb7 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'I');
 8001332:	2249      	movs	r2, #73	@ 0x49
 8001334:	2150      	movs	r1, #80	@ 0x50
 8001336:	2046      	movs	r0, #70	@ 0x46
 8001338:	f000 fbb2 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(82,80,'N');
 800133c:	224e      	movs	r2, #78	@ 0x4e
 800133e:	2150      	movs	r1, #80	@ 0x50
 8001340:	2052      	movs	r0, #82	@ 0x52
 8001342:	f000 fbad 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(96,80,'G');
 8001346:	2247      	movs	r2, #71	@ 0x47
 8001348:	2150      	movs	r1, #80	@ 0x50
 800134a:	2060      	movs	r0, #96	@ 0x60
 800134c:	f000 fba8 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(110,80,'L');
 8001350:	224c      	movs	r2, #76	@ 0x4c
 8001352:	2150      	movs	r1, #80	@ 0x50
 8001354:	206e      	movs	r0, #110	@ 0x6e
 8001356:	f000 fba3 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(123,80,'E');
 800135a:	2245      	movs	r2, #69	@ 0x45
 800135c:	2150      	movs	r1, #80	@ 0x50
 800135e:	207b      	movs	r0, #123	@ 0x7b
 8001360:	f000 fb9e 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(136,80,'S');
 8001364:	2253      	movs	r2, #83	@ 0x53
 8001366:	2150      	movs	r1, #80	@ 0x50
 8001368:	2088      	movs	r0, #136	@ 0x88
 800136a:	f000 fb99 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(147,80,':');
 800136e:	223a      	movs	r2, #58	@ 0x3a
 8001370:	2150      	movs	r1, #80	@ 0x50
 8001372:	2093      	movs	r0, #147	@ 0x93
 8001374:	f000 fb94 	bl	8001aa0 <LCD_DisplayChar>

	LCD_DisplayChar(60,120,'D');
 8001378:	2244      	movs	r2, #68	@ 0x44
 800137a:	2178      	movs	r1, #120	@ 0x78
 800137c:	203c      	movs	r0, #60	@ 0x3c
 800137e:	f000 fb8f 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(75,120,'O');
 8001382:	224f      	movs	r2, #79	@ 0x4f
 8001384:	2178      	movs	r1, #120	@ 0x78
 8001386:	204b      	movs	r0, #75	@ 0x4b
 8001388:	f000 fb8a 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(90,120,'U');
 800138c:	2255      	movs	r2, #85	@ 0x55
 800138e:	2178      	movs	r1, #120	@ 0x78
 8001390:	205a      	movs	r0, #90	@ 0x5a
 8001392:	f000 fb85 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(105,120,'B');
 8001396:	2242      	movs	r2, #66	@ 0x42
 8001398:	2178      	movs	r1, #120	@ 0x78
 800139a:	2069      	movs	r0, #105	@ 0x69
 800139c:	f000 fb80 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(120,120,'L');
 80013a0:	224c      	movs	r2, #76	@ 0x4c
 80013a2:	2178      	movs	r1, #120	@ 0x78
 80013a4:	2078      	movs	r0, #120	@ 0x78
 80013a6:	f000 fb7b 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(135,120,'E');
 80013aa:	2245      	movs	r2, #69	@ 0x45
 80013ac:	2178      	movs	r1, #120	@ 0x78
 80013ae:	2087      	movs	r0, #135	@ 0x87
 80013b0:	f000 fb76 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(150,120,'S');
 80013b4:	2253      	movs	r2, #83	@ 0x53
 80013b6:	2178      	movs	r1, #120	@ 0x78
 80013b8:	2096      	movs	r0, #150	@ 0x96
 80013ba:	f000 fb71 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(160,120,':');
 80013be:	223a      	movs	r2, #58	@ 0x3a
 80013c0:	2178      	movs	r1, #120	@ 0x78
 80013c2:	20a0      	movs	r0, #160	@ 0xa0
 80013c4:	f000 fb6c 	bl	8001aa0 <LCD_DisplayChar>

	LCD_DisplayChar(60,160,'T');
 80013c8:	2254      	movs	r2, #84	@ 0x54
 80013ca:	21a0      	movs	r1, #160	@ 0xa0
 80013cc:	203c      	movs	r0, #60	@ 0x3c
 80013ce:	f000 fb67 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(75,160,'E');
 80013d2:	2245      	movs	r2, #69	@ 0x45
 80013d4:	21a0      	movs	r1, #160	@ 0xa0
 80013d6:	204b      	movs	r0, #75	@ 0x4b
 80013d8:	f000 fb62 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(90,160,'T');
 80013dc:	2254      	movs	r2, #84	@ 0x54
 80013de:	21a0      	movs	r1, #160	@ 0xa0
 80013e0:	205a      	movs	r0, #90	@ 0x5a
 80013e2:	f000 fb5d 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(105,160,'R');
 80013e6:	2252      	movs	r2, #82	@ 0x52
 80013e8:	21a0      	movs	r1, #160	@ 0xa0
 80013ea:	2069      	movs	r0, #105	@ 0x69
 80013ec:	f000 fb58 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(115,160,'I');
 80013f0:	2249      	movs	r2, #73	@ 0x49
 80013f2:	21a0      	movs	r1, #160	@ 0xa0
 80013f4:	2073      	movs	r0, #115	@ 0x73
 80013f6:	f000 fb53 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'S');
 80013fa:	2253      	movs	r2, #83	@ 0x53
 80013fc:	21a0      	movs	r1, #160	@ 0xa0
 80013fe:	207d      	movs	r0, #125	@ 0x7d
 8001400:	f000 fb4e 	bl	8001aa0 <LCD_DisplayChar>
	LCD_DisplayChar(135,160,':');
 8001404:	223a      	movs	r2, #58	@ 0x3a
 8001406:	21a0      	movs	r1, #160	@ 0xa0
 8001408:	2087      	movs	r0, #135	@ 0x87
 800140a:	f000 fb49 	bl	8001aa0 <LCD_DisplayChar>


	char time_string[10];
	sprintf(time_string, "%d", Time_Played);
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4961      	ldr	r1, [pc, #388]	@ (8001598 <game_over+0x310>)
 8001414:	4618      	mov	r0, r3
 8001416:	f005 f9d9 	bl	80067cc <siprintf>

	for(int i=0; i < 10; i++) {
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800141e:	e01f      	b.n	8001460 <game_over+0x1d8>
		if(time_string[i]>=0x30 && time_string[i]<=0x39) LCD_DisplayChar(90 + 12*i,60,time_string[i]);
 8001420:	1d3a      	adds	r2, r7, #4
 8001422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b2f      	cmp	r3, #47	@ 0x2f
 800142a:	d916      	bls.n	800145a <game_over+0x1d2>
 800142c:	1d3a      	adds	r2, r7, #4
 800142e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b39      	cmp	r3, #57	@ 0x39
 8001436:	d810      	bhi.n	800145a <game_over+0x1d2>
 8001438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800143a:	b29b      	uxth	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	0052      	lsls	r2, r2, #1
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	b29b      	uxth	r3, r3
 8001446:	335a      	adds	r3, #90	@ 0x5a
 8001448:	b298      	uxth	r0, r3
 800144a:	1d3a      	adds	r2, r7, #4
 800144c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	213c      	movs	r1, #60	@ 0x3c
 8001456:	f000 fb23 	bl	8001aa0 <LCD_DisplayChar>
	for(int i=0; i < 10; i++) {
 800145a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800145c:	3301      	adds	r3, #1
 800145e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001462:	2b09      	cmp	r3, #9
 8001464:	dddc      	ble.n	8001420 <game_over+0x198>
	}

	LCD_DisplayChar(210 ,60,'s');
 8001466:	2273      	movs	r2, #115	@ 0x73
 8001468:	213c      	movs	r1, #60	@ 0x3c
 800146a:	20d2      	movs	r0, #210	@ 0xd2
 800146c:	f000 fb18 	bl	8001aa0 <LCD_DisplayChar>

	for(int i=0; i < 10; i++) {
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001474:	e007      	b.n	8001486 <game_over+0x1fe>
		time_string[i]='\0';
 8001476:	1d3a      	adds	r2, r7, #4
 8001478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800147a:	4413      	add	r3, r2
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 10; i++) {
 8001480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001482:	3301      	adds	r3, #1
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001488:	2b09      	cmp	r3, #9
 800148a:	ddf4      	ble.n	8001476 <game_over+0x1ee>
	}

	sprintf(time_string, "%d", singles);
 800148c:	4b43      	ldr	r3, [pc, #268]	@ (800159c <game_over+0x314>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	4940      	ldr	r1, [pc, #256]	@ (8001598 <game_over+0x310>)
 8001496:	4618      	mov	r0, r3
 8001498:	f005 f998 	bl	80067cc <siprintf>

	for(int i=0; i < 10; i++) {
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a0:	e01f      	b.n	80014e2 <game_over+0x25a>
		if(time_string[i]>=0x30 && time_string[i]<=0x39) LCD_DisplayChar(90 + 12*i,100,time_string[i]);
 80014a2:	1d3a      	adds	r2, r7, #4
 80014a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80014ac:	d916      	bls.n	80014dc <game_over+0x254>
 80014ae:	1d3a      	adds	r2, r7, #4
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b39      	cmp	r3, #57	@ 0x39
 80014b8:	d810      	bhi.n	80014dc <game_over+0x254>
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	b29b      	uxth	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	0052      	lsls	r2, r2, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	335a      	adds	r3, #90	@ 0x5a
 80014ca:	b298      	uxth	r0, r3
 80014cc:	1d3a      	adds	r2, r7, #4
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	4413      	add	r3, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	2164      	movs	r1, #100	@ 0x64
 80014d8:	f000 fae2 	bl	8001aa0 <LCD_DisplayChar>
	for(int i=0; i < 10; i++) {
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	3301      	adds	r3, #1
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	dddc      	ble.n	80014a2 <game_over+0x21a>
	}

	for(int i=0; i < 10; i++) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
 80014ec:	e007      	b.n	80014fe <game_over+0x276>
		time_string[i]='\0';
 80014ee:	1d3a      	adds	r2, r7, #4
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	4413      	add	r3, r2
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 10; i++) {
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	3301      	adds	r3, #1
 80014fc:	623b      	str	r3, [r7, #32]
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	2b09      	cmp	r3, #9
 8001502:	ddf4      	ble.n	80014ee <game_over+0x266>
	}

	sprintf(time_string, "%d", doubles);
 8001504:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <game_over+0x318>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4922      	ldr	r1, [pc, #136]	@ (8001598 <game_over+0x310>)
 800150e:	4618      	mov	r0, r3
 8001510:	f005 f95c 	bl	80067cc <siprintf>

	for(int i=0; i < 10; i++) {
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	e01f      	b.n	800155a <game_over+0x2d2>
		if(time_string[i]>=0x30 && time_string[i]<=0x39) LCD_DisplayChar(90 + 12*i,140,time_string[i]);
 800151a:	1d3a      	adds	r2, r7, #4
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b2f      	cmp	r3, #47	@ 0x2f
 8001524:	d916      	bls.n	8001554 <game_over+0x2cc>
 8001526:	1d3a      	adds	r2, r7, #4
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b39      	cmp	r3, #57	@ 0x39
 8001530:	d810      	bhi.n	8001554 <game_over+0x2cc>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	b29b      	uxth	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	b29b      	uxth	r3, r3
 8001540:	335a      	adds	r3, #90	@ 0x5a
 8001542:	b298      	uxth	r0, r3
 8001544:	1d3a      	adds	r2, r7, #4
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	4413      	add	r3, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	218c      	movs	r1, #140	@ 0x8c
 8001550:	f000 faa6 	bl	8001aa0 <LCD_DisplayChar>
	for(int i=0; i < 10; i++) {
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	3301      	adds	r3, #1
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	2b09      	cmp	r3, #9
 800155e:	dddc      	ble.n	800151a <game_over+0x292>
	}

	for(int i=0; i < 10; i++) {
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	e007      	b.n	8001576 <game_over+0x2ee>
		time_string[i]='\0';
 8001566:	1d3a      	adds	r2, r7, #4
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	4413      	add	r3, r2
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 10; i++) {
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	3301      	adds	r3, #1
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b09      	cmp	r3, #9
 800157a:	ddf4      	ble.n	8001566 <game_over+0x2de>
	}

	sprintf(time_string, "%d", tetris);
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <game_over+0x31c>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4904      	ldr	r1, [pc, #16]	@ (8001598 <game_over+0x310>)
 8001586:	4618      	mov	r0, r3
 8001588:	f005 f920 	bl	80067cc <siprintf>

	for(int i=0; i < 10; i++) {
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e02a      	b.n	80015e8 <game_over+0x360>
 8001592:	bf00      	nop
 8001594:	20000074 	.word	0x20000074
 8001598:	0800789c 	.word	0x0800789c
 800159c:	20000270 	.word	0x20000270
 80015a0:	20000272 	.word	0x20000272
 80015a4:	20000274 	.word	0x20000274
		if(time_string[i]>=0x30 && time_string[i]<=0x39) LCD_DisplayChar(90 + 12*i,180,time_string[i]);
 80015a8:	1d3a      	adds	r2, r7, #4
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80015b2:	d916      	bls.n	80015e2 <game_over+0x35a>
 80015b4:	1d3a      	adds	r2, r7, #4
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b39      	cmp	r3, #57	@ 0x39
 80015be:	d810      	bhi.n	80015e2 <game_over+0x35a>
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	0052      	lsls	r2, r2, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	335a      	adds	r3, #90	@ 0x5a
 80015d0:	b298      	uxth	r0, r3
 80015d2:	1d3a      	adds	r2, r7, #4
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	21b4      	movs	r1, #180	@ 0xb4
 80015de:	f000 fa5f 	bl	8001aa0 <LCD_DisplayChar>
	for(int i=0; i < 10; i++) {
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b09      	cmp	r3, #9
 80015ec:	dddc      	ble.n	80015a8 <game_over+0x320>
	}

	while(1);
 80015ee:	bf00      	nop
 80015f0:	e7fd      	b.n	80015ee <game_over+0x366>
 80015f2:	bf00      	nop

080015f4 <Game_RNG_Init>:
}

void Game_RNG_Init() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	HRNG.Instance = RNG;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <Game_RNG_Init+0x38>)
 80015fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <Game_RNG_Init+0x3c>)
 80015fe:	601a      	str	r2, [r3, #0]
	__HAL_RCC_RNG_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <Game_RNG_Init+0x40>)
 8001606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001608:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <Game_RNG_Init+0x40>)
 800160a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800160e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <Game_RNG_Init+0x40>)
 8001612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
	HAL_RNG_Init(&HRNG);
 800161c:	4803      	ldr	r0, [pc, #12]	@ (800162c <Game_RNG_Init+0x38>)
 800161e:	f004 fc2f 	bl	8005e80 <HAL_RNG_Init>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000278 	.word	0x20000278
 8001630:	50060800 	.word	0x50060800
 8001634:	40023800 	.word	0x40023800

08001638 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	@ 0x30
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	4b5a      	ldr	r3, [pc, #360]	@ (80017ac <LCD_GPIO_Init+0x174>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	4a59      	ldr	r2, [pc, #356]	@ (80017ac <LCD_GPIO_Init+0x174>)
 8001648:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800164c:	6453      	str	r3, [r2, #68]	@ 0x44
 800164e:	4b57      	ldr	r3, [pc, #348]	@ (80017ac <LCD_GPIO_Init+0x174>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	4b53      	ldr	r3, [pc, #332]	@ (80017ac <LCD_GPIO_Init+0x174>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a52      	ldr	r2, [pc, #328]	@ (80017ac <LCD_GPIO_Init+0x174>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b50      	ldr	r3, [pc, #320]	@ (80017ac <LCD_GPIO_Init+0x174>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b4c      	ldr	r3, [pc, #304]	@ (80017ac <LCD_GPIO_Init+0x174>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a4b      	ldr	r2, [pc, #300]	@ (80017ac <LCD_GPIO_Init+0x174>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b49      	ldr	r3, [pc, #292]	@ (80017ac <LCD_GPIO_Init+0x174>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b45      	ldr	r3, [pc, #276]	@ (80017ac <LCD_GPIO_Init+0x174>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a44      	ldr	r2, [pc, #272]	@ (80017ac <LCD_GPIO_Init+0x174>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <LCD_GPIO_Init+0x174>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	4b3e      	ldr	r3, [pc, #248]	@ (80017ac <LCD_GPIO_Init+0x174>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a3d      	ldr	r2, [pc, #244]	@ (80017ac <LCD_GPIO_Init+0x174>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b3b      	ldr	r3, [pc, #236]	@ (80017ac <LCD_GPIO_Init+0x174>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <LCD_GPIO_Init+0x174>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a36      	ldr	r2, [pc, #216]	@ (80017ac <LCD_GPIO_Init+0x174>)
 80016d4:	f043 0320 	orr.w	r3, r3, #32
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b34      	ldr	r3, [pc, #208]	@ (80017ac <LCD_GPIO_Init+0x174>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b30      	ldr	r3, [pc, #192]	@ (80017ac <LCD_GPIO_Init+0x174>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a2f      	ldr	r2, [pc, #188]	@ (80017ac <LCD_GPIO_Init+0x174>)
 80016f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b2d      	ldr	r3, [pc, #180]	@ (80017ac <LCD_GPIO_Init+0x174>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001702:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001706:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001710:	2302      	movs	r3, #2
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001714:	230e      	movs	r3, #14
 8001716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	4824      	ldr	r0, [pc, #144]	@ (80017b0 <LCD_GPIO_Init+0x178>)
 8001720:	f001 ffce 	bl	80036c0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001724:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001728:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	4820      	ldr	r0, [pc, #128]	@ (80017b4 <LCD_GPIO_Init+0x17c>)
 8001732:	f001 ffc5 	bl	80036c0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001736:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800173a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4619      	mov	r1, r3
 8001742:	481d      	ldr	r0, [pc, #116]	@ (80017b8 <LCD_GPIO_Init+0x180>)
 8001744:	f001 ffbc 	bl	80036c0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001748:	2348      	movs	r3, #72	@ 0x48
 800174a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	481a      	ldr	r0, [pc, #104]	@ (80017bc <LCD_GPIO_Init+0x184>)
 8001754:	f001 ffb4 	bl	80036c0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800175c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4816      	ldr	r0, [pc, #88]	@ (80017c0 <LCD_GPIO_Init+0x188>)
 8001766:	f001 ffab 	bl	80036c0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800176a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800176e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	4813      	ldr	r0, [pc, #76]	@ (80017c4 <LCD_GPIO_Init+0x18c>)
 8001778:	f001 ffa2 	bl	80036c0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800177c:	2303      	movs	r3, #3
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001780:	2309      	movs	r3, #9
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	480a      	ldr	r0, [pc, #40]	@ (80017b4 <LCD_GPIO_Init+0x17c>)
 800178c:	f001 ff98 	bl	80036c0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001790:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4809      	ldr	r0, [pc, #36]	@ (80017c4 <LCD_GPIO_Init+0x18c>)
 800179e:	f001 ff8f 	bl	80036c0 <HAL_GPIO_Init>
}
 80017a2:	bf00      	nop
 80017a4:	3730      	adds	r7, #48	@ 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40020800 	.word	0x40020800
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	40021400 	.word	0x40021400
 80017c4:	40021800 	.word	0x40021800

080017c8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b090      	sub	sp, #64	@ 0x40
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80017d6:	23f0      	movs	r3, #240	@ 0xf0
 80017d8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80017de:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80017e2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80017e4:	2302      	movs	r3, #2
 80017e6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80017e8:	23ff      	movs	r3, #255	@ 0xff
 80017ea:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80017f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80017f6:	2305      	movs	r3, #5
 80017f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <LTCD_Layer_Init+0x78>)
 8001802:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001804:	23f0      	movs	r3, #240	@ 0xf0
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001808:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800180c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001820:	79fa      	ldrb	r2, [r7, #7]
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	4619      	mov	r1, r3
 8001828:	4806      	ldr	r0, [pc, #24]	@ (8001844 <LTCD_Layer_Init+0x7c>)
 800182a:	f003 fb0f 	bl	8004e4c <HAL_LTDC_ConfigLayer>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001834:	f000 f956 	bl	8001ae4 <LCD_Error_Handler>
	}
}
 8001838:	bf00      	nop
 800183a:	3740      	adds	r7, #64	@ 0x40
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000364 	.word	0x20000364
 8001844:	20000288 	.word	0x20000288

08001848 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800184c:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <LTCD__Init+0xb0>)
 800184e:	4a2b      	ldr	r2, [pc, #172]	@ (80018fc <LTCD__Init+0xb4>)
 8001850:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001852:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <LTCD__Init+0xb0>)
 8001854:	2209      	movs	r2, #9
 8001856:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001858:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <LTCD__Init+0xb0>)
 800185a:	2201      	movs	r2, #1
 800185c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800185e:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <LTCD__Init+0xb0>)
 8001860:	221d      	movs	r2, #29
 8001862:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001864:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <LTCD__Init+0xb0>)
 8001866:	2203      	movs	r2, #3
 8001868:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800186a:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <LTCD__Init+0xb0>)
 800186c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001870:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001872:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <LTCD__Init+0xb0>)
 8001874:	f240 1243 	movw	r2, #323	@ 0x143
 8001878:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800187a:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <LTCD__Init+0xb0>)
 800187c:	f240 1217 	movw	r2, #279	@ 0x117
 8001880:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001882:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <LTCD__Init+0xb0>)
 8001884:	f240 1247 	movw	r2, #327	@ 0x147
 8001888:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <LTCD__Init+0xb0>)
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <LTCD__Init+0xb0>)
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800189a:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <LTCD__Init+0xb0>)
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80018a2:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <LTCD__Init+0xb8>)
 80018a4:	2208      	movs	r2, #8
 80018a6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <LTCD__Init+0xb8>)
 80018aa:	22c0      	movs	r2, #192	@ 0xc0
 80018ac:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80018ae:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <LTCD__Init+0xb8>)
 80018b0:	2204      	movs	r2, #4
 80018b2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <LTCD__Init+0xb8>)
 80018b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018ba:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80018bc:	4810      	ldr	r0, [pc, #64]	@ (8001900 <LTCD__Init+0xb8>)
 80018be:	f004 f91f 	bl	8005b00 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <LTCD__Init+0xb0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <LTCD__Init+0xb0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <LTCD__Init+0xb0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018d4:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <LTCD__Init+0xb0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80018da:	f7ff fead 	bl	8001638 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80018de:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <LTCD__Init+0xb0>)
 80018e0:	f003 f9e4 	bl	8004cac <HAL_LTDC_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80018ea:	f000 f8fb 	bl	8001ae4 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80018ee:	f000 fa5b 	bl	8001da8 <ili9341_Init>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000288 	.word	0x20000288
 80018fc:	40016800 	.word	0x40016800
 8001900:	20000330 	.word	0x20000330

08001904 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
 800190e:	460b      	mov	r3, r1
 8001910:	80bb      	strh	r3, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001916:	88ba      	ldrh	r2, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	461a      	mov	r2, r3
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4413      	add	r3, r2
 8001926:	4905      	ldr	r1, [pc, #20]	@ (800193c <LCD_Draw_Pixel+0x38>)
 8001928:	887a      	ldrh	r2, [r7, #2]
 800192a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000364 	.word	0x20000364

08001940 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	460a      	mov	r2, r1
 800194a:	71fb      	strb	r3, [r7, #7]
 800194c:	4613      	mov	r3, r2
 800194e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10e      	bne.n	8001974 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e007      	b.n	800196c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 800195c:	4908      	ldr	r1, [pc, #32]	@ (8001980 <LCD_Clear+0x40>)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	88ba      	ldrh	r2, [r7, #4]
 8001962:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3301      	adds	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001972:	d3f3      	bcc.n	800195c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	20000364 	.word	0x20000364

08001984 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800198e:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <LCD_SetTextColor+0x1c>)
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	8013      	strh	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000070 	.word	0x20000070

080019a4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80019ac:	4a04      	ldr	r2, [pc, #16]	@ (80019c0 <LCD_SetFont+0x1c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000360 	.word	0x20000360

080019c4 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	603a      	str	r2, [r7, #0]
 80019ce:	80fb      	strh	r3, [r7, #6]
 80019d0:	460b      	mov	r3, r1
 80019d2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e04c      	b.n	8001a7c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	e03f      	b.n	8001a68 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	4619      	mov	r1, r3
 80019f4:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <LCD_Draw_Char+0xd0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	889b      	ldrh	r3, [r3, #4]
 80019fa:	4a27      	ldr	r2, [pc, #156]	@ (8001a98 <LCD_Draw_Char+0xd4>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	08db      	lsrs	r3, r3, #3
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	2280      	movs	r2, #128	@ 0x80
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	fa42 f303 	asr.w	r3, r2, r3
 8001a10:	400b      	ands	r3, r1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d104      	bne.n	8001a20 <LCD_Draw_Char+0x5c>
 8001a16:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <LCD_Draw_Char+0xd0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	889b      	ldrh	r3, [r3, #4]
 8001a1c:	2b0c      	cmp	r3, #12
 8001a1e:	d920      	bls.n	8001a62 <LCD_Draw_Char+0x9e>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	fa42 f303 	asr.w	r3, r2, r3
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d104      	bne.n	8001a44 <LCD_Draw_Char+0x80>
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <LCD_Draw_Char+0xd0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	889b      	ldrh	r3, [r3, #4]
 8001a40:	2b0c      	cmp	r3, #12
 8001a42:	d80e      	bhi.n	8001a62 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b298      	uxth	r0, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	88bb      	ldrh	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4a10      	ldr	r2, [pc, #64]	@ (8001a9c <LCD_Draw_Char+0xd8>)
 8001a5a:	8812      	ldrh	r2, [r2, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff ff51 	bl	8001904 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <LCD_Draw_Char+0xd0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	889b      	ldrh	r3, [r3, #4]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d3b8      	bcc.n	80019e8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <LCD_Draw_Char+0xd0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	88db      	ldrh	r3, [r3, #6]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d3ab      	bcc.n	80019e2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000360 	.word	0x20000360
 8001a98:	aaaaaaab 	.word	0xaaaaaaab
 8001a9c:	20000070 	.word	0x20000070

08001aa0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	80bb      	strh	r3, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	3b20      	subs	r3, #32
 8001ab6:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <LCD_DisplayChar+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	4907      	ldr	r1, [pc, #28]	@ (8001ae0 <LCD_DisplayChar+0x40>)
 8001ac2:	6809      	ldr	r1, [r1, #0]
 8001ac4:	88c9      	ldrh	r1, [r1, #6]
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	441a      	add	r2, r3
 8001ace:	88b9      	ldrh	r1, [r7, #4]
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff76 	bl	80019c4 <LCD_Draw_Char>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000360 	.word	0x20000360

08001ae4 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
}
 8001aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <LCD_Error_Handler+0x8>

08001af0 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001af4:	f000 ff88 	bl	8002a08 <STMPE811_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d001      	beq.n	8001b02 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001afe:	bf00      	nop
 8001b00:	e7fd      	b.n	8001afe <InitializeLCDTouch+0xe>
  }
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f001 f864 	bl	8002bdc <STMPE811_DetermineTouchPosition>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 f834 	bl	8002b96 <STMPE811_Read>
 8001b2e:	4603      	mov	r3, r0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460a      	mov	r2, r1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8001b48:	79ba      	ldrb	r2, [r7, #6]
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 f832 	bl	8002bb8 <STMPE811_Write>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <addSchedulerEvent>:
 */

#include "Scheduler.h"
static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t event){
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
scheduledEvents |= event;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <addSchedulerEvent+0x20>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	4a03      	ldr	r2, [pc, #12]	@ (8001b7c <addSchedulerEvent+0x20>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	20025b64 	.word	0x20025b64

08001b80 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event){
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <removeSchedulerEvent+0x24>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4013      	ands	r3, r2
 8001b92:	4a04      	ldr	r2, [pc, #16]	@ (8001ba4 <removeSchedulerEvent+0x24>)
 8001b94:	6013      	str	r3, [r2, #0]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20025b64 	.word	0x20025b64

08001ba8 <getScheduledEvents>:

uint32_t getScheduledEvents() {
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <getScheduledEvents+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20025b64 	.word	0x20025b64

08001bc0 <Timer2_Init>:
 *      Author: 14408
 */
#include "Timer_Driver.h"
volatile uint32_t Game_Time = 0;

void Timer2_Init(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001bc4:	4b46      	ldr	r3, [pc, #280]	@ (8001ce0 <Timer2_Init+0x120>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	4a45      	ldr	r2, [pc, #276]	@ (8001ce0 <Timer2_Init+0x120>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->CR1 &= ~(0x3 << CKD_OFFSET);
 8001bd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bde:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(0x1 << ARPE_OFFSET);
 8001be0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bee:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(0x3 << CMS_OFFSET);
 8001bf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bfa:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001bfe:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(0x1 << DIR_OFFSET);
 8001c00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c0a:	f023 0310 	bic.w	r3, r3, #16
 8001c0e:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(0x1 << OPM_OFFSET);
 8001c10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c1a:	f023 0308 	bic.w	r3, r3, #8
 8001c1e:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(0x1 << UDIS_OFFSET);
 8001c20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c2a:	f023 0302 	bic.w	r3, r3, #2
 8001c2e:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= TIM_CKD_1 << CKD_OFFSET;
 8001c30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_ARPE_NO << ARPE_OFFSET;
 8001c3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CMS_UP << CMS_OFFSET;
 8001c48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c56:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CD_NO << DIR_OFFSET;
 8001c58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_OPM_NO << OPM_OFFSET;
 8001c64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_UDIS_ENABLE << UDIS_OFFSET;
 8001c70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6013      	str	r3, [r2, #0]

	TIM2->CR2 &= ~(0x7 << MMS_OFFSET);
 8001c7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c8a:	6053      	str	r3, [r2, #4]
	TIM2->CR2 |= TIM_MMS_EN << MMS_OFFSET;
 8001c8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	6053      	str	r3, [r2, #4]

	TIM2-> DIER &= ~(0x1 << UIE_OFFSET);
 8001c9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	60d3      	str	r3, [r2, #12]
	TIM2-> DIER |= TIM_UIE_ENABLE << UIE_OFFSET;
 8001cac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	60d3      	str	r3, [r2, #12]

    TIM2->ARR = 82900000;
 8001cbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cc0:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <Timer2_Init+0x124>)
 8001cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->DIER |= TIM_DIER_UIE;
 8001cc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	60d3      	str	r3, [r2, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cd4:	201c      	movs	r0, #28
 8001cd6:	f001 fca4 	bl	8003622 <HAL_NVIC_EnableIRQ>

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	04f0f420 	.word	0x04f0f420

08001ce8 <Timer2_Start>:
void Timer2_Start(void) {
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
    TIM2->CR1 |= TIM_CR1_CEN;
 8001cec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <Timer2_Stop>:

void Timer2_Stop(void) {
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
    TIM2->CR1 &= ~TIM_CR1_CEN;
 8001d0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	6013      	str	r3, [r2, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <Timer2_Reset>:

void Timer2_Reset(void) {
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
    TIM2->CNT = 0;
 8001d28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <GetGameTime>:

uint32_t GetGameTime() {
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
	return Game_Time;
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <GetGameTime+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20025b68 	.word	0x20025b68

08001d54 <TIM2_IRQHandler>:
void TIM2_IRQHandler() {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8001d58:	201c      	movs	r0, #28
 8001d5a:	f001 fc70 	bl	800363e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 8001d5e:	201c      	movs	r0, #28
 8001d60:	f001 fc87 	bl	8003672 <HAL_NVIC_ClearPendingIRQ>
    TIM2->SR &= ~(0x1);
 8001d64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6113      	str	r3, [r2, #16]

    Game_Time++;
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <TIM2_IRQHandler+0x50>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <TIM2_IRQHandler+0x50>)
 8001d7c:	6013      	str	r3, [r2, #0]
    TIM2->SR &= ~(0x1);
 8001d7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6113      	str	r3, [r2, #16]
    TIM2->CNT =0;
 8001d8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24
    Timer2_Start();
 8001d96:	f7ff ffa7 	bl	8001ce8 <Timer2_Start>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d9a:	201c      	movs	r0, #28
 8001d9c:	f001 fc41 	bl	8003622 <HAL_NVIC_EnableIRQ>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20025b68 	.word	0x20025b68

08001da8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001dac:	f000 f9fe 	bl	80021ac <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001db0:	20ca      	movs	r0, #202	@ 0xca
 8001db2:	f000 f943 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001db6:	20c3      	movs	r0, #195	@ 0xc3
 8001db8:	f000 f94d 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001dbc:	2008      	movs	r0, #8
 8001dbe:	f000 f94a 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001dc2:	2050      	movs	r0, #80	@ 0x50
 8001dc4:	f000 f947 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001dc8:	20cf      	movs	r0, #207	@ 0xcf
 8001dca:	f000 f937 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f000 f941 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001dd4:	20c1      	movs	r0, #193	@ 0xc1
 8001dd6:	f000 f93e 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001dda:	2030      	movs	r0, #48	@ 0x30
 8001ddc:	f000 f93b 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001de0:	20ed      	movs	r0, #237	@ 0xed
 8001de2:	f000 f92b 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001de6:	2064      	movs	r0, #100	@ 0x64
 8001de8:	f000 f935 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 f932 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001df2:	2012      	movs	r0, #18
 8001df4:	f000 f92f 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001df8:	2081      	movs	r0, #129	@ 0x81
 8001dfa:	f000 f92c 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001dfe:	20e8      	movs	r0, #232	@ 0xe8
 8001e00:	f000 f91c 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001e04:	2085      	movs	r0, #133	@ 0x85
 8001e06:	f000 f926 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f000 f923 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001e10:	2078      	movs	r0, #120	@ 0x78
 8001e12:	f000 f920 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001e16:	20cb      	movs	r0, #203	@ 0xcb
 8001e18:	f000 f910 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001e1c:	2039      	movs	r0, #57	@ 0x39
 8001e1e:	f000 f91a 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001e22:	202c      	movs	r0, #44	@ 0x2c
 8001e24:	f000 f917 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f000 f914 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001e2e:	2034      	movs	r0, #52	@ 0x34
 8001e30:	f000 f911 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001e34:	2002      	movs	r0, #2
 8001e36:	f000 f90e 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001e3a:	20f7      	movs	r0, #247	@ 0xf7
 8001e3c:	f000 f8fe 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001e40:	2020      	movs	r0, #32
 8001e42:	f000 f908 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001e46:	20ea      	movs	r0, #234	@ 0xea
 8001e48:	f000 f8f8 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f000 f902 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 f8ff 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001e58:	20b1      	movs	r0, #177	@ 0xb1
 8001e5a:	f000 f8ef 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 f8f9 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001e64:	201b      	movs	r0, #27
 8001e66:	f000 f8f6 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001e6a:	20b6      	movs	r0, #182	@ 0xb6
 8001e6c:	f000 f8e6 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001e70:	200a      	movs	r0, #10
 8001e72:	f000 f8f0 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001e76:	20a2      	movs	r0, #162	@ 0xa2
 8001e78:	f000 f8ed 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001e7c:	20c0      	movs	r0, #192	@ 0xc0
 8001e7e:	f000 f8dd 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001e82:	2010      	movs	r0, #16
 8001e84:	f000 f8e7 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001e88:	20c1      	movs	r0, #193	@ 0xc1
 8001e8a:	f000 f8d7 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001e8e:	2010      	movs	r0, #16
 8001e90:	f000 f8e1 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001e94:	20c5      	movs	r0, #197	@ 0xc5
 8001e96:	f000 f8d1 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001e9a:	2045      	movs	r0, #69	@ 0x45
 8001e9c:	f000 f8db 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001ea0:	2015      	movs	r0, #21
 8001ea2:	f000 f8d8 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001ea6:	20c7      	movs	r0, #199	@ 0xc7
 8001ea8:	f000 f8c8 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001eac:	2090      	movs	r0, #144	@ 0x90
 8001eae:	f000 f8d2 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001eb2:	2036      	movs	r0, #54	@ 0x36
 8001eb4:	f000 f8c2 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001eb8:	20c8      	movs	r0, #200	@ 0xc8
 8001eba:	f000 f8cc 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001ebe:	20f2      	movs	r0, #242	@ 0xf2
 8001ec0:	f000 f8bc 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f000 f8c6 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001eca:	20b0      	movs	r0, #176	@ 0xb0
 8001ecc:	f000 f8b6 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001ed0:	20c2      	movs	r0, #194	@ 0xc2
 8001ed2:	f000 f8c0 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001ed6:	20b6      	movs	r0, #182	@ 0xb6
 8001ed8:	f000 f8b0 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001edc:	200a      	movs	r0, #10
 8001ede:	f000 f8ba 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001ee2:	20a7      	movs	r0, #167	@ 0xa7
 8001ee4:	f000 f8b7 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001ee8:	2027      	movs	r0, #39	@ 0x27
 8001eea:	f000 f8b4 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001eee:	2004      	movs	r0, #4
 8001ef0:	f000 f8b1 	bl	8002056 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001ef4:	202a      	movs	r0, #42	@ 0x2a
 8001ef6:	f000 f8a1 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 f8ab 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f000 f8a8 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 f8a5 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001f0c:	20ef      	movs	r0, #239	@ 0xef
 8001f0e:	f000 f8a2 	bl	8002056 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001f12:	202b      	movs	r0, #43	@ 0x2b
 8001f14:	f000 f892 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f000 f89c 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f000 f899 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f000 f896 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001f2a:	203f      	movs	r0, #63	@ 0x3f
 8001f2c:	f000 f893 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001f30:	20f6      	movs	r0, #246	@ 0xf6
 8001f32:	f000 f883 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f000 f88d 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f88a 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001f42:	2006      	movs	r0, #6
 8001f44:	f000 f887 	bl	8002056 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001f48:	202c      	movs	r0, #44	@ 0x2c
 8001f4a:	f000 f877 	bl	800203c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001f4e:	20c8      	movs	r0, #200	@ 0xc8
 8001f50:	f000 f9e8 	bl	8002324 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001f54:	2026      	movs	r0, #38	@ 0x26
 8001f56:	f000 f871 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f000 f87b 	bl	8002056 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001f60:	20e0      	movs	r0, #224	@ 0xe0
 8001f62:	f000 f86b 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001f66:	200f      	movs	r0, #15
 8001f68:	f000 f875 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001f6c:	2029      	movs	r0, #41	@ 0x29
 8001f6e:	f000 f872 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001f72:	2024      	movs	r0, #36	@ 0x24
 8001f74:	f000 f86f 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001f78:	200c      	movs	r0, #12
 8001f7a:	f000 f86c 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001f7e:	200e      	movs	r0, #14
 8001f80:	f000 f869 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001f84:	2009      	movs	r0, #9
 8001f86:	f000 f866 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001f8a:	204e      	movs	r0, #78	@ 0x4e
 8001f8c:	f000 f863 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001f90:	2078      	movs	r0, #120	@ 0x78
 8001f92:	f000 f860 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001f96:	203c      	movs	r0, #60	@ 0x3c
 8001f98:	f000 f85d 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001f9c:	2009      	movs	r0, #9
 8001f9e:	f000 f85a 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001fa2:	2013      	movs	r0, #19
 8001fa4:	f000 f857 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001fa8:	2005      	movs	r0, #5
 8001faa:	f000 f854 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001fae:	2017      	movs	r0, #23
 8001fb0:	f000 f851 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001fb4:	2011      	movs	r0, #17
 8001fb6:	f000 f84e 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f000 f84b 	bl	8002056 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001fc0:	20e1      	movs	r0, #225	@ 0xe1
 8001fc2:	f000 f83b 	bl	800203c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f000 f845 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001fcc:	2016      	movs	r0, #22
 8001fce:	f000 f842 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001fd2:	201b      	movs	r0, #27
 8001fd4:	f000 f83f 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001fd8:	2004      	movs	r0, #4
 8001fda:	f000 f83c 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001fde:	2011      	movs	r0, #17
 8001fe0:	f000 f839 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001fe4:	2007      	movs	r0, #7
 8001fe6:	f000 f836 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001fea:	2031      	movs	r0, #49	@ 0x31
 8001fec:	f000 f833 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001ff0:	2033      	movs	r0, #51	@ 0x33
 8001ff2:	f000 f830 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001ff6:	2042      	movs	r0, #66	@ 0x42
 8001ff8:	f000 f82d 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001ffc:	2005      	movs	r0, #5
 8001ffe:	f000 f82a 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002002:	200c      	movs	r0, #12
 8002004:	f000 f827 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002008:	200a      	movs	r0, #10
 800200a:	f000 f824 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800200e:	2028      	movs	r0, #40	@ 0x28
 8002010:	f000 f821 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002014:	202f      	movs	r0, #47	@ 0x2f
 8002016:	f000 f81e 	bl	8002056 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800201a:	200f      	movs	r0, #15
 800201c:	f000 f81b 	bl	8002056 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002020:	2011      	movs	r0, #17
 8002022:	f000 f80b 	bl	800203c <ili9341_Write_Reg>
  LCD_Delay(200);
 8002026:	20c8      	movs	r0, #200	@ 0xc8
 8002028:	f000 f97c 	bl	8002324 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800202c:	2029      	movs	r0, #41	@ 0x29
 800202e:	f000 f805 	bl	800203c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002032:	202c      	movs	r0, #44	@ 0x2c
 8002034:	f000 f802 	bl	800203c <ili9341_Write_Reg>
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}

0800203c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	4618      	mov	r0, r3
 800204a:	f000 f949 	bl	80022e0 <LCD_IO_WriteReg>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f91a 	bl	800229c <LCD_IO_WriteData>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002074:	4819      	ldr	r0, [pc, #100]	@ (80020dc <SPI_Init+0x6c>)
 8002076:	f004 f98d 	bl	8006394 <HAL_SPI_GetState>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d12b      	bne.n	80020d8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <SPI_Init+0x6c>)
 8002082:	4a17      	ldr	r2, [pc, #92]	@ (80020e0 <SPI_Init+0x70>)
 8002084:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <SPI_Init+0x6c>)
 8002088:	2218      	movs	r2, #24
 800208a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800208c:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <SPI_Init+0x6c>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002092:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <SPI_Init+0x6c>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002098:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <SPI_Init+0x6c>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800209e:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <SPI_Init+0x6c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80020a4:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <SPI_Init+0x6c>)
 80020a6:	2207      	movs	r2, #7
 80020a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80020aa:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <SPI_Init+0x6c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <SPI_Init+0x6c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <SPI_Init+0x6c>)
 80020b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020bc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80020be:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <SPI_Init+0x6c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <SPI_Init+0x6c>)
 80020c6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020ca:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80020cc:	4803      	ldr	r0, [pc, #12]	@ (80020dc <SPI_Init+0x6c>)
 80020ce:	f000 f833 	bl	8002138 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80020d2:	4802      	ldr	r0, [pc, #8]	@ (80020dc <SPI_Init+0x6c>)
 80020d4:	f003 ff69 	bl	8005faa <HAL_SPI_Init>
  }
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20025b6c 	.word	0x20025b6c
 80020e0:	40015000 	.word	0x40015000

080020e4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <SPI_Write+0x34>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	1db9      	adds	r1, r7, #6
 80020f8:	2201      	movs	r2, #1
 80020fa:	4808      	ldr	r0, [pc, #32]	@ (800211c <SPI_Write+0x38>)
 80020fc:	f004 f806 	bl	800610c <HAL_SPI_Transmit>
 8002100:	4603      	mov	r3, r0
 8002102:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800210a:	f000 f809 	bl	8002120 <SPI_Error>
  }
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000007c 	.word	0x2000007c
 800211c:	20025b6c 	.word	0x20025b6c

08002120 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002124:	4803      	ldr	r0, [pc, #12]	@ (8002134 <SPI_Error+0x14>)
 8002126:	f003 ffc9 	bl	80060bc <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800212a:	f7ff ffa1 	bl	8002070 <SPI_Init>
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20025b6c 	.word	0x20025b6c

08002138 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	@ 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	4b17      	ldr	r3, [pc, #92]	@ (80021a4 <SPI_MspInit+0x6c>)
 8002146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002148:	4a16      	ldr	r2, [pc, #88]	@ (80021a4 <SPI_MspInit+0x6c>)
 800214a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800214e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002150:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <SPI_MspInit+0x6c>)
 8002152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <SPI_MspInit+0x6c>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	4a0f      	ldr	r2, [pc, #60]	@ (80021a4 <SPI_MspInit+0x6c>)
 8002166:	f043 0320 	orr.w	r3, r3, #32
 800216a:	6313      	str	r3, [r2, #48]	@ 0x30
 800216c:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <SPI_MspInit+0x6c>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002178:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002182:	2302      	movs	r3, #2
 8002184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002186:	2301      	movs	r3, #1
 8002188:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800218a:	2305      	movs	r3, #5
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	4804      	ldr	r0, [pc, #16]	@ (80021a8 <SPI_MspInit+0x70>)
 8002196:	f001 fa93 	bl	80036c0 <HAL_GPIO_Init>
}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	@ 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40021400 	.word	0x40021400

080021ac <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80021b2:	4b36      	ldr	r3, [pc, #216]	@ (800228c <LCD_IO_Init+0xe0>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d164      	bne.n	8002284 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80021ba:	4b34      	ldr	r3, [pc, #208]	@ (800228c <LCD_IO_Init+0xe0>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	4b32      	ldr	r3, [pc, #200]	@ (8002290 <LCD_IO_Init+0xe4>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	4a31      	ldr	r2, [pc, #196]	@ (8002290 <LCD_IO_Init+0xe4>)
 80021ca:	f043 0308 	orr.w	r3, r3, #8
 80021ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002290 <LCD_IO_Init+0xe4>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80021dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	4619      	mov	r1, r3
 80021f4:	4827      	ldr	r0, [pc, #156]	@ (8002294 <LCD_IO_Init+0xe8>)
 80021f6:	f001 fa63 	bl	80036c0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	4b24      	ldr	r3, [pc, #144]	@ (8002290 <LCD_IO_Init+0xe4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4a23      	ldr	r2, [pc, #140]	@ (8002290 <LCD_IO_Init+0xe4>)
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	6313      	str	r3, [r2, #48]	@ 0x30
 800220a:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <LCD_IO_Init+0xe4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800221a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800221c:	2301      	movs	r3, #1
 800221e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002224:	2302      	movs	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4619      	mov	r1, r3
 800222e:	4819      	ldr	r0, [pc, #100]	@ (8002294 <LCD_IO_Init+0xe8>)
 8002230:	f001 fa46 	bl	80036c0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <LCD_IO_Init+0xe4>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223c:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <LCD_IO_Init+0xe4>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6313      	str	r3, [r2, #48]	@ 0x30
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <LCD_IO_Init+0xe4>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002250:	2304      	movs	r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800225c:	2302      	movs	r3, #2
 800225e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4619      	mov	r1, r3
 8002266:	480c      	ldr	r0, [pc, #48]	@ (8002298 <LCD_IO_Init+0xec>)
 8002268:	f001 fa2a 	bl	80036c0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 800226c:	2200      	movs	r2, #0
 800226e:	2104      	movs	r1, #4
 8002270:	4809      	ldr	r0, [pc, #36]	@ (8002298 <LCD_IO_Init+0xec>)
 8002272:	f001 fcdd 	bl	8003c30 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002276:	2201      	movs	r2, #1
 8002278:	2104      	movs	r1, #4
 800227a:	4807      	ldr	r0, [pc, #28]	@ (8002298 <LCD_IO_Init+0xec>)
 800227c:	f001 fcd8 	bl	8003c30 <HAL_GPIO_WritePin>

    SPI_Init();
 8002280:	f7ff fef6 	bl	8002070 <SPI_Init>
  }
}
 8002284:	bf00      	nop
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20025bc4 	.word	0x20025bc4
 8002290:	40023800 	.word	0x40023800
 8002294:	40020c00 	.word	0x40020c00
 8002298:	40020800 	.word	0x40020800

0800229c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022ac:	480a      	ldr	r0, [pc, #40]	@ (80022d8 <LCD_IO_WriteData+0x3c>)
 80022ae:	f001 fcbf 	bl	8003c30 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80022b2:	2200      	movs	r2, #0
 80022b4:	2104      	movs	r1, #4
 80022b6:	4809      	ldr	r0, [pc, #36]	@ (80022dc <LCD_IO_WriteData+0x40>)
 80022b8:	f001 fcba 	bl	8003c30 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff10 	bl	80020e4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022c4:	2201      	movs	r2, #1
 80022c6:	2104      	movs	r1, #4
 80022c8:	4804      	ldr	r0, [pc, #16]	@ (80022dc <LCD_IO_WriteData+0x40>)
 80022ca:	f001 fcb1 	bl	8003c30 <HAL_GPIO_WritePin>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40020800 	.word	0x40020800

080022e0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022f0:	480a      	ldr	r0, [pc, #40]	@ (800231c <LCD_IO_WriteReg+0x3c>)
 80022f2:	f001 fc9d 	bl	8003c30 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80022f6:	2200      	movs	r2, #0
 80022f8:	2104      	movs	r1, #4
 80022fa:	4809      	ldr	r0, [pc, #36]	@ (8002320 <LCD_IO_WriteReg+0x40>)
 80022fc:	f001 fc98 	bl	8003c30 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	b29b      	uxth	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff feed 	bl	80020e4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800230a:	2201      	movs	r2, #1
 800230c:	2104      	movs	r1, #4
 800230e:	4804      	ldr	r0, [pc, #16]	@ (8002320 <LCD_IO_WriteReg+0x40>)
 8002310:	f001 fc8e 	bl	8003c30 <HAL_GPIO_WritePin>
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40020c00 	.word	0x40020c00
 8002320:	40020800 	.word	0x40020800

08002324 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f001 f81b 	bl	8003368 <HAL_Delay>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002342:	f000 ff9f 	bl	8003284 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8002346:	f000 f881 	bl	800244c <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 800234a:	f7fe f919 	bl	8000580 <ApplicationInit>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return
  Display_Start_Screen();
 800234e:	f7fe fa53 	bl	80007f8 <Display_Start_Screen>
  draw_board();
 8002352:	f7fe fc35 	bl	8000bc0 <draw_board>

  LCD_SetTextColor(LCD_COLOR_BLUE);
 8002356:	201f      	movs	r0, #31
 8002358:	f7ff fb14 	bl	8001984 <LCD_SetTextColor>
  LCD_SetFont(&Font16x24);
 800235c:	483a      	ldr	r0, [pc, #232]	@ (8002448 <main+0x10c>)
 800235e:	f7ff fb21 	bl	80019a4 <LCD_SetFont>
  LCD_DisplayChar(60,40,'T');
 8002362:	2254      	movs	r2, #84	@ 0x54
 8002364:	2128      	movs	r1, #40	@ 0x28
 8002366:	203c      	movs	r0, #60	@ 0x3c
 8002368:	f7ff fb9a 	bl	8001aa0 <LCD_DisplayChar>
  LCD_DisplayChar(75,40,'O');
 800236c:	224f      	movs	r2, #79	@ 0x4f
 800236e:	2128      	movs	r1, #40	@ 0x28
 8002370:	204b      	movs	r0, #75	@ 0x4b
 8002372:	f7ff fb95 	bl	8001aa0 <LCD_DisplayChar>
  LCD_DisplayChar(90,40,'U');
 8002376:	2255      	movs	r2, #85	@ 0x55
 8002378:	2128      	movs	r1, #40	@ 0x28
 800237a:	205a      	movs	r0, #90	@ 0x5a
 800237c:	f7ff fb90 	bl	8001aa0 <LCD_DisplayChar>
  LCD_DisplayChar(105,40,'C');
 8002380:	2243      	movs	r2, #67	@ 0x43
 8002382:	2128      	movs	r1, #40	@ 0x28
 8002384:	2069      	movs	r0, #105	@ 0x69
 8002386:	f7ff fb8b 	bl	8001aa0 <LCD_DisplayChar>
  LCD_DisplayChar(120,40,'H');
 800238a:	2248      	movs	r2, #72	@ 0x48
 800238c:	2128      	movs	r1, #40	@ 0x28
 800238e:	2078      	movs	r0, #120	@ 0x78
 8002390:	f7ff fb86 	bl	8001aa0 <LCD_DisplayChar>
  LCD_DisplayChar(60,60,'T');
 8002394:	2254      	movs	r2, #84	@ 0x54
 8002396:	213c      	movs	r1, #60	@ 0x3c
 8002398:	203c      	movs	r0, #60	@ 0x3c
 800239a:	f7ff fb81 	bl	8001aa0 <LCD_DisplayChar>
  LCD_DisplayChar(75,60,'O');
 800239e:	224f      	movs	r2, #79	@ 0x4f
 80023a0:	213c      	movs	r1, #60	@ 0x3c
 80023a2:	204b      	movs	r0, #75	@ 0x4b
 80023a4:	f7ff fb7c 	bl	8001aa0 <LCD_DisplayChar>
  LCD_DisplayChar(60,80,'S');
 80023a8:	2253      	movs	r2, #83	@ 0x53
 80023aa:	2150      	movs	r1, #80	@ 0x50
 80023ac:	203c      	movs	r0, #60	@ 0x3c
 80023ae:	f7ff fb77 	bl	8001aa0 <LCD_DisplayChar>
  LCD_DisplayChar(75,80,'T');
 80023b2:	2254      	movs	r2, #84	@ 0x54
 80023b4:	2150      	movs	r1, #80	@ 0x50
 80023b6:	204b      	movs	r0, #75	@ 0x4b
 80023b8:	f7ff fb72 	bl	8001aa0 <LCD_DisplayChar>
  LCD_DisplayChar(90,80,'A');
 80023bc:	2241      	movs	r2, #65	@ 0x41
 80023be:	2150      	movs	r1, #80	@ 0x50
 80023c0:	205a      	movs	r0, #90	@ 0x5a
 80023c2:	f7ff fb6d 	bl	8001aa0 <LCD_DisplayChar>
  LCD_DisplayChar(105,80,'R');
 80023c6:	2252      	movs	r2, #82	@ 0x52
 80023c8:	2150      	movs	r1, #80	@ 0x50
 80023ca:	2069      	movs	r0, #105	@ 0x69
 80023cc:	f7ff fb68 	bl	8001aa0 <LCD_DisplayChar>
  LCD_DisplayChar(120,80,'T');
 80023d0:	2254      	movs	r2, #84	@ 0x54
 80023d2:	2150      	movs	r1, #80	@ 0x50
 80023d4:	2078      	movs	r0, #120	@ 0x78
 80023d6:	f7ff fb63 	bl	8001aa0 <LCD_DisplayChar>

  while(Check_Start()==0) {
 80023da:	e002      	b.n	80023e2 <main+0xa6>
	  HAL_Delay(10);
 80023dc:	200a      	movs	r0, #10
 80023de:	f000 ffc3 	bl	8003368 <HAL_Delay>
  while(Check_Start()==0) {
 80023e2:	f7fe f9fd 	bl	80007e0 <Check_Start>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f7      	beq.n	80023dc <main+0xa0>
  }
  initialize_game();
 80023ec:	f7fe fb88 	bl	8000b00 <initialize_game>
  draw_board();
 80023f0:	f7fe fbe6 	bl	8000bc0 <draw_board>
  uint32_t events;

  while (1)
  {
	  move_down();
 80023f4:	f7fe fde8 	bl	8000fc8 <move_down>
	  events = getScheduledEvents();
 80023f8:	f7ff fbd6 	bl	8001ba8 <getScheduledEvents>
 80023fc:	6078      	str	r0, [r7, #4]
	  if(events & ROTATE_EVENT) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <main+0xd6>
		  rotate_tetromino();
 8002408:	f7fe fc9a 	bl	8000d40 <rotate_tetromino>
		  removeSchedulerEvent(ROTATE_EVENT);
 800240c:	2002      	movs	r0, #2
 800240e:	f7ff fbb7 	bl	8001b80 <removeSchedulerEvent>
	  }
	  if(events & MOVE_LEFT_EVENT){
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <main+0xea>
		  move_left();
 800241c:	f7fe fe2e 	bl	800107c <move_left>
		  removeSchedulerEvent(MOVE_LEFT_EVENT);
 8002420:	2004      	movs	r0, #4
 8002422:	f7ff fbad 	bl	8001b80 <removeSchedulerEvent>
	  }
	  if(events & MOVE_RIGHT_EVENT){
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <main+0xfe>
		  move_right();
 8002430:	f7fe fe3e 	bl	80010b0 <move_right>
		  removeSchedulerEvent(MOVE_RIGHT_EVENT);
 8002434:	2008      	movs	r0, #8
 8002436:	f7ff fba3 	bl	8001b80 <removeSchedulerEvent>
	  }

	  draw_board();
 800243a:	f7fe fbc1 	bl	8000bc0 <draw_board>
	  HAL_Delay(1000);
 800243e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002442:	f000 ff91 	bl	8003368 <HAL_Delay>
	  move_down();
 8002446:	e7d5      	b.n	80023f4 <main+0xb8>
 8002448:	20000074 	.word	0x20000074

0800244c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b092      	sub	sp, #72	@ 0x48
 8002450:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <SystemClockOverride+0x7c>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	4a1b      	ldr	r2, [pc, #108]	@ (80024c8 <SystemClockOverride+0x7c>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002460:	6413      	str	r3, [r2, #64]	@ 0x40
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <SystemClockOverride+0x7c>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800246e:	2301      	movs	r3, #1
 8002470:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002476:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002478:	2302      	movs	r3, #2
 800247a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800247c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002480:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002482:	2308      	movs	r3, #8
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002486:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800248a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800248c:	2302      	movs	r3, #2
 800248e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002490:	2307      	movs	r3, #7
 8002492:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	4618      	mov	r0, r3
 8002498:	f002 feae 	bl	80051f8 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800249c:	230f      	movs	r3, #15
 800249e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024a0:	2302      	movs	r3, #2
 80024a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024b2:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80024b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024b8:	2105      	movs	r1, #5
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 f914 	bl	80056e8 <HAL_RCC_ClockConfig>
}
 80024c0:	bf00      	nop
 80024c2:	3748      	adds	r7, #72	@ 0x48
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800

080024cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80024d0:	b672      	cpsid	i
}
 80024d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <Error_Handler+0x8>

080024d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <HAL_MspInit+0x4c>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002524 <HAL_MspInit+0x4c>)
 80024e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <HAL_MspInit+0x4c>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_MspInit+0x4c>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	4a08      	ldr	r2, [pc, #32]	@ (8002524 <HAL_MspInit+0x4c>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	@ 0x40
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_MspInit+0x4c>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002516:	2007      	movs	r0, #7
 8002518:	f001 f85c 	bl	80035d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40023800 	.word	0x40023800

08002528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	@ 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a29      	ldr	r2, [pc, #164]	@ (80025ec <HAL_I2C_MspInit+0xc4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d14b      	bne.n	80025e2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	4b28      	ldr	r3, [pc, #160]	@ (80025f0 <HAL_I2C_MspInit+0xc8>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	4a27      	ldr	r2, [pc, #156]	@ (80025f0 <HAL_I2C_MspInit+0xc8>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6313      	str	r3, [r2, #48]	@ 0x30
 800255a:	4b25      	ldr	r3, [pc, #148]	@ (80025f0 <HAL_I2C_MspInit+0xc8>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <HAL_I2C_MspInit+0xc8>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	4a20      	ldr	r2, [pc, #128]	@ (80025f0 <HAL_I2C_MspInit+0xc8>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6313      	str	r3, [r2, #48]	@ 0x30
 8002576:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <HAL_I2C_MspInit+0xc8>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002582:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002588:	2312      	movs	r3, #18
 800258a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002594:	2304      	movs	r3, #4
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	4815      	ldr	r0, [pc, #84]	@ (80025f4 <HAL_I2C_MspInit+0xcc>)
 80025a0:	f001 f88e 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80025a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025aa:	2312      	movs	r3, #18
 80025ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025b6:	2304      	movs	r3, #4
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	480d      	ldr	r0, [pc, #52]	@ (80025f8 <HAL_I2C_MspInit+0xd0>)
 80025c2:	f001 f87d 	bl	80036c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <HAL_I2C_MspInit+0xc8>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	4a08      	ldr	r2, [pc, #32]	@ (80025f0 <HAL_I2C_MspInit+0xc8>)
 80025d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_I2C_MspInit+0xc8>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	@ 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40005c00 	.word	0x40005c00
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020000 	.word	0x40020000

080025fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b09a      	sub	sp, #104	@ 0x68
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002618:	2230      	movs	r2, #48	@ 0x30
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f004 f9cd 	bl	80069bc <memset>
  if(hltdc->Instance==LTDC)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a85      	ldr	r2, [pc, #532]	@ (800283c <HAL_LTDC_MspInit+0x240>)
 8002628:	4293      	cmp	r3, r2
 800262a:	f040 8102 	bne.w	8002832 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800262e:	2308      	movs	r3, #8
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002632:	2332      	movs	r3, #50	@ 0x32
 8002634:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002636:	2302      	movs	r3, #2
 8002638:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800263a:	2300      	movs	r3, #0
 800263c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800263e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fa5c 	bl	8005b00 <HAL_RCCEx_PeriphCLKConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800264e:	f7ff ff3d 	bl	80024cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
 8002656:	4b7a      	ldr	r3, [pc, #488]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	4a79      	ldr	r2, [pc, #484]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 800265c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002660:	6453      	str	r3, [r2, #68]	@ 0x44
 8002662:	4b77      	ldr	r3, [pc, #476]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	4b73      	ldr	r3, [pc, #460]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a72      	ldr	r2, [pc, #456]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 8002678:	f043 0320 	orr.w	r3, r3, #32
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b70      	ldr	r3, [pc, #448]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	4b6c      	ldr	r3, [pc, #432]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a6b      	ldr	r2, [pc, #428]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b69      	ldr	r3, [pc, #420]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	4b65      	ldr	r3, [pc, #404]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a64      	ldr	r2, [pc, #400]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b62      	ldr	r3, [pc, #392]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 80026cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b57      	ldr	r3, [pc, #348]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a56      	ldr	r2, [pc, #344]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b54      	ldr	r3, [pc, #336]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b50      	ldr	r3, [pc, #320]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	4a4f      	ldr	r2, [pc, #316]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	6313      	str	r3, [r2, #48]	@ 0x30
 800270a:	4b4d      	ldr	r3, [pc, #308]	@ (8002840 <HAL_LTDC_MspInit+0x244>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800271a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002728:	230e      	movs	r3, #14
 800272a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800272c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002730:	4619      	mov	r1, r3
 8002732:	4844      	ldr	r0, [pc, #272]	@ (8002844 <HAL_LTDC_MspInit+0x248>)
 8002734:	f000 ffc4 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002738:	f641 0358 	movw	r3, #6232	@ 0x1858
 800273c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800274a:	230e      	movs	r3, #14
 800274c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002752:	4619      	mov	r1, r3
 8002754:	483c      	ldr	r0, [pc, #240]	@ (8002848 <HAL_LTDC_MspInit+0x24c>)
 8002756:	f000 ffb3 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800275a:	2303      	movs	r3, #3
 800275c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800276a:	2309      	movs	r3, #9
 800276c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002772:	4619      	mov	r1, r3
 8002774:	4835      	ldr	r0, [pc, #212]	@ (800284c <HAL_LTDC_MspInit+0x250>)
 8002776:	f000 ffa3 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800277a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800277e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002788:	2300      	movs	r3, #0
 800278a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800278c:	230e      	movs	r3, #14
 800278e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002790:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002794:	4619      	mov	r1, r3
 8002796:	482d      	ldr	r0, [pc, #180]	@ (800284c <HAL_LTDC_MspInit+0x250>)
 8002798:	f000 ff92 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800279c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80027a0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027ae:	230e      	movs	r3, #14
 80027b0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027b6:	4619      	mov	r1, r3
 80027b8:	4825      	ldr	r0, [pc, #148]	@ (8002850 <HAL_LTDC_MspInit+0x254>)
 80027ba:	f000 ff81 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80027be:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80027c2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027d0:	230e      	movs	r3, #14
 80027d2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027d8:	4619      	mov	r1, r3
 80027da:	481e      	ldr	r0, [pc, #120]	@ (8002854 <HAL_LTDC_MspInit+0x258>)
 80027dc:	f000 ff70 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80027e0:	2348      	movs	r3, #72	@ 0x48
 80027e2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2300      	movs	r3, #0
 80027ee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027f0:	230e      	movs	r3, #14
 80027f2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027f8:	4619      	mov	r1, r3
 80027fa:	4817      	ldr	r0, [pc, #92]	@ (8002858 <HAL_LTDC_MspInit+0x25c>)
 80027fc:	f000 ff60 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002800:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002804:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002812:	2309      	movs	r3, #9
 8002814:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002816:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800281a:	4619      	mov	r1, r3
 800281c:	480c      	ldr	r0, [pc, #48]	@ (8002850 <HAL_LTDC_MspInit+0x254>)
 800281e:	f000 ff4f 	bl	80036c0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	2058      	movs	r0, #88	@ 0x58
 8002828:	f000 fedf 	bl	80035ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800282c:	2058      	movs	r0, #88	@ 0x58
 800282e:	f000 fef8 	bl	8003622 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002832:	bf00      	nop
 8002834:	3768      	adds	r7, #104	@ 0x68
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40016800 	.word	0x40016800
 8002840:	40023800 	.word	0x40023800
 8002844:	40021400 	.word	0x40021400
 8002848:	40020000 	.word	0x40020000
 800284c:	40020400 	.word	0x40020400
 8002850:	40021800 	.word	0x40021800
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00

0800285c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0b      	ldr	r2, [pc, #44]	@ (8002898 <HAL_RNG_MspInit+0x3c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10d      	bne.n	800288a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <HAL_RNG_MspInit+0x40>)
 8002874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002876:	4a09      	ldr	r2, [pc, #36]	@ (800289c <HAL_RNG_MspInit+0x40>)
 8002878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800287c:	6353      	str	r3, [r2, #52]	@ 0x34
 800287e:	4b07      	ldr	r3, [pc, #28]	@ (800289c <HAL_RNG_MspInit+0x40>)
 8002880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	50060800 	.word	0x50060800
 800289c:	40023800 	.word	0x40023800

080028a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	@ 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	@ (8002924 <HAL_SPI_MspInit+0x84>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d12c      	bne.n	800291c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <HAL_SPI_MspInit+0x88>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	4a17      	ldr	r2, [pc, #92]	@ (8002928 <HAL_SPI_MspInit+0x88>)
 80028cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_SPI_MspInit+0x88>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_SPI_MspInit+0x88>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	4a10      	ldr	r2, [pc, #64]	@ (8002928 <HAL_SPI_MspInit+0x88>)
 80028e8:	f043 0320 	orr.w	r3, r3, #32
 80028ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <HAL_SPI_MspInit+0x88>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80028fa:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80028fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800290c:	2305      	movs	r3, #5
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	4805      	ldr	r0, [pc, #20]	@ (800292c <HAL_SPI_MspInit+0x8c>)
 8002918:	f000 fed2 	bl	80036c0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800291c:	bf00      	nop
 800291e:	3728      	adds	r7, #40	@ 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40015000 	.word	0x40015000
 8002928:	40023800 	.word	0x40023800
 800292c:	40021400 	.word	0x40021400

08002930 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a08      	ldr	r2, [pc, #32]	@ (8002960 <HAL_SPI_MspDeInit+0x30>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10a      	bne.n	8002958 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <HAL_SPI_MspDeInit+0x34>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <HAL_SPI_MspDeInit+0x34>)
 8002948:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800294c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800294e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002952:	4805      	ldr	r0, [pc, #20]	@ (8002968 <HAL_SPI_MspDeInit+0x38>)
 8002954:	f001 f860 	bl	8003a18 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40015000 	.word	0x40015000
 8002964:	40023800 	.word	0x40023800
 8002968:	40021400 	.word	0x40021400

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <NMI_Handler+0x4>

08002974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <HardFault_Handler+0x4>

0800297c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <MemManage_Handler+0x4>

08002984 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <UsageFault_Handler+0x4>

08002994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c2:	f000 fcb1 	bl	8003328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db0b      	blt.n	80029f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4907      	ldr	r1, [pc, #28]	@ (8002a04 <__NVIC_EnableIRQ+0x38>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f202 	lsl.w	r2, r0, r2
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports
    I2C3_MspInit();
 8002a0e:	f000 f9dd 	bl	8002dcc <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002a12:	f000 f99d 	bl	8002d50 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002a16:	2202      	movs	r2, #2
 8002a18:	2103      	movs	r1, #3
 8002a1a:	2082      	movs	r0, #130	@ 0x82
 8002a1c:	f000 fa2a 	bl	8002e74 <I2C3_Write>
    HAL_Delay(5);
 8002a20:	2005      	movs	r0, #5
 8002a22:	f000 fca1 	bl	8003368 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2103      	movs	r1, #3
 8002a2a:	2082      	movs	r0, #130	@ 0x82
 8002a2c:	f000 fa22 	bl	8002e74 <I2C3_Write>
    HAL_Delay(2);
 8002a30:	2002      	movs	r0, #2
 8002a32:	f000 fc99 	bl	8003368 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002a36:	1cba      	adds	r2, r7, #2
 8002a38:	2302      	movs	r3, #2
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	2082      	movs	r0, #130	@ 0x82
 8002a3e:	f000 fa69 	bl	8002f14 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	f640 0211 	movw	r2, #2065	@ 0x811
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d001      	beq.n	8002a62 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e095      	b.n	8002b8e <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002a62:	2202      	movs	r2, #2
 8002a64:	2103      	movs	r1, #3
 8002a66:	2082      	movs	r0, #130	@ 0x82
 8002a68:	f000 fa04 	bl	8002e74 <I2C3_Write>
    HAL_Delay(5);
 8002a6c:	2005      	movs	r0, #5
 8002a6e:	f000 fc7b 	bl	8003368 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2103      	movs	r1, #3
 8002a76:	2082      	movs	r0, #130	@ 0x82
 8002a78:	f000 f9fc 	bl	8002e74 <I2C3_Write>
    HAL_Delay(2);
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f000 fc73 	bl	8003368 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002a82:	2004      	movs	r0, #4
 8002a84:	f000 f887 	bl	8002b96 <STMPE811_Read>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002a8c:	797b      	ldrb	r3, [r7, #5]
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002a94:	797b      	ldrb	r3, [r7, #5]
 8002a96:	461a      	mov	r2, r3
 8002a98:	2104      	movs	r1, #4
 8002a9a:	2082      	movs	r0, #130	@ 0x82
 8002a9c:	f000 f9ea 	bl	8002e74 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002aa0:	2004      	movs	r0, #4
 8002aa2:	f000 f878 	bl	8002b96 <STMPE811_Read>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002aaa:	797b      	ldrb	r3, [r7, #5]
 8002aac:	f023 0302 	bic.w	r3, r3, #2
 8002ab0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002ab2:	797b      	ldrb	r3, [r7, #5]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2104      	movs	r1, #4
 8002ab8:	2082      	movs	r0, #130	@ 0x82
 8002aba:	f000 f9db 	bl	8002e74 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002abe:	2249      	movs	r2, #73	@ 0x49
 8002ac0:	2120      	movs	r1, #32
 8002ac2:	2082      	movs	r0, #130	@ 0x82
 8002ac4:	f000 f9d6 	bl	8002e74 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f000 fc4d 	bl	8003368 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002ace:	2201      	movs	r2, #1
 8002ad0:	2121      	movs	r1, #33	@ 0x21
 8002ad2:	2082      	movs	r0, #130	@ 0x82
 8002ad4:	f000 f9ce 	bl	8002e74 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002ad8:	2017      	movs	r0, #23
 8002ada:	f000 f85c 	bl	8002b96 <STMPE811_Read>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002ae2:	797b      	ldrb	r3, [r7, #5]
 8002ae4:	f043 031e 	orr.w	r3, r3, #30
 8002ae8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002aea:	797b      	ldrb	r3, [r7, #5]
 8002aec:	461a      	mov	r2, r3
 8002aee:	2117      	movs	r1, #23
 8002af0:	2082      	movs	r0, #130	@ 0x82
 8002af2:	f000 f9bf 	bl	8002e74 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002af6:	229a      	movs	r2, #154	@ 0x9a
 8002af8:	2141      	movs	r1, #65	@ 0x41
 8002afa:	2082      	movs	r0, #130	@ 0x82
 8002afc:	f000 f9ba 	bl	8002e74 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002b00:	2201      	movs	r2, #1
 8002b02:	214a      	movs	r1, #74	@ 0x4a
 8002b04:	2082      	movs	r0, #130	@ 0x82
 8002b06:	f000 f9b5 	bl	8002e74 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	214b      	movs	r1, #75	@ 0x4b
 8002b0e:	2082      	movs	r0, #130	@ 0x82
 8002b10:	f000 f9b0 	bl	8002e74 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002b14:	2200      	movs	r2, #0
 8002b16:	214b      	movs	r1, #75	@ 0x4b
 8002b18:	2082      	movs	r0, #130	@ 0x82
 8002b1a:	f000 f9ab 	bl	8002e74 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2156      	movs	r1, #86	@ 0x56
 8002b22:	2082      	movs	r0, #130	@ 0x82
 8002b24:	f000 f9a6 	bl	8002e74 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2158      	movs	r1, #88	@ 0x58
 8002b2c:	2082      	movs	r0, #130	@ 0x82
 8002b2e:	f000 f9a1 	bl	8002e74 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002b32:	2203      	movs	r2, #3
 8002b34:	2140      	movs	r1, #64	@ 0x40
 8002b36:	2082      	movs	r0, #130	@ 0x82
 8002b38:	f000 f99c 	bl	8002e74 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002b3c:	22ff      	movs	r2, #255	@ 0xff
 8002b3e:	210b      	movs	r1, #11
 8002b40:	2082      	movs	r0, #130	@ 0x82
 8002b42:	f000 f997 	bl	8002e74 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8002b46:	f000 f8c1 	bl	8002ccc <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8002b4a:	2009      	movs	r0, #9
 8002b4c:	f000 f823 	bl	8002b96 <STMPE811_Read>
 8002b50:	4603      	mov	r3, r0
 8002b52:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002b54:	797b      	ldrb	r3, [r7, #5]
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8002b5c:	797b      	ldrb	r3, [r7, #5]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2109      	movs	r1, #9
 8002b62:	2082      	movs	r0, #130	@ 0x82
 8002b64:	f000 f986 	bl	8002e74 <I2C3_Write>

    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8002b68:	200a      	movs	r0, #10
 8002b6a:	f000 f814 	bl	8002b96 <STMPE811_Read>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002b72:	797b      	ldrb	r3, [r7, #5]
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8002b7a:	797b      	ldrb	r3, [r7, #5]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	210a      	movs	r1, #10
 8002b80:	2082      	movs	r0, #130	@ 0x82
 8002b82:	f000 f977 	bl	8002e74 <I2C3_Write>

    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT

    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002b86:	20c8      	movs	r0, #200	@ 0xc8
 8002b88:	f000 fbee 	bl	8003368 <HAL_Delay>

    return STMPE811_State_Ok;
 8002b8c:	2302      	movs	r3, #2

}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002ba0:	f107 020f 	add.w	r2, r7, #15
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	2082      	movs	r0, #130	@ 0x82
 8002baa:	f000 f98d 	bl	8002ec8 <I2C3_Read>

    return readData;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	460a      	mov	r2, r1
 8002bc2:	71fb      	strb	r3, [r7, #7]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8002bc8:	79ba      	ldrb	r2, [r7, #6]
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	2082      	movs	r0, #130	@ 0x82
 8002bd0:	f000 f950 	bl	8002e74 <I2C3_Write>
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	799b      	ldrb	r3, [r3, #6]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d117      	bne.n	8002c1c <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f9b1 	bl	8002f58 <TM_STMPE811_ReadX>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	885b      	ldrh	r3, [r3, #2]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fa04 	bl	8003014 <TM_STMPE811_ReadY>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002c12:	3301      	adds	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	805a      	strh	r2, [r3, #2]
 8002c1a:	e048      	b.n	8002cae <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	799b      	ldrb	r3, [r3, #6]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d112      	bne.n	8002c4a <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 f995 	bl	8002f58 <TM_STMPE811_ReadX>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461a      	mov	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	885b      	ldrh	r3, [r3, #2]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f9ea 	bl	8003014 <TM_STMPE811_ReadY>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	805a      	strh	r2, [r3, #2]
 8002c48:	e031      	b.n	8002cae <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	799b      	ldrb	r3, [r3, #6]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d115      	bne.n	8002c7e <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	885b      	ldrh	r3, [r3, #2]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f97e 	bl	8002f58 <TM_STMPE811_ReadX>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f9d3 	bl	8003014 <TM_STMPE811_ReadY>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002c74:	3301      	adds	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	e017      	b.n	8002cae <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	799b      	ldrb	r3, [r3, #6]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d113      	bne.n	8002cae <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f964 	bl	8002f58 <TM_STMPE811_ReadX>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 f9b7 	bl	8003014 <TM_STMPE811_ReadY>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002cae:	2201      	movs	r2, #1
 8002cb0:	214b      	movs	r1, #75	@ 0x4b
 8002cb2:	2082      	movs	r0, #130	@ 0x82
 8002cb4:	f000 f8de 	bl	8002e74 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	214b      	movs	r1, #75	@ 0x4b
 8002cbc:	2082      	movs	r0, #130	@ 0x82
 8002cbe:	f000 f8d9 	bl	8002e74 <I2C3_Write>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <enableInterruptSupportForTouch+0x5c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	4a13      	ldr	r2, [pc, #76]	@ (8002d28 <enableInterruptSupportForTouch+0x5c>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce2:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <enableInterruptSupportForTouch+0x5c>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d00:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002d02:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002d06:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	4619      	mov	r1, r3
 8002d14:	4805      	ldr	r0, [pc, #20]	@ (8002d2c <enableInterruptSupportForTouch+0x60>)
 8002d16:	f000 fcd3 	bl	80036c0 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d1a:	2028      	movs	r0, #40	@ 0x28
 8002d1c:	f7ff fe56 	bl	80029cc <__NVIC_EnableIRQ>

}
 8002d20:	bf00      	nop
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40020000 	.word	0x40020000

08002d30 <verifyHAL_I2C_IS_OKAY>:

#endif


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20025c1c 	.word	0x20025c1c

08002d50 <I2C3_Init>:

static void I2C3_Init()
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	4b18      	ldr	r3, [pc, #96]	@ (8002dbc <I2C3_Init+0x6c>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	4a17      	ldr	r2, [pc, #92]	@ (8002dbc <I2C3_Init+0x6c>)
 8002d60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d66:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <I2C3_Init+0x6c>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002d72:	4b13      	ldr	r3, [pc, #76]	@ (8002dc0 <I2C3_Init+0x70>)
 8002d74:	4a13      	ldr	r2, [pc, #76]	@ (8002dc4 <I2C3_Init+0x74>)
 8002d76:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002d78:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <I2C3_Init+0x70>)
 8002d7a:	4a13      	ldr	r2, [pc, #76]	@ (8002dc8 <I2C3_Init+0x78>)
 8002d7c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <I2C3_Init+0x70>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002d84:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <I2C3_Init+0x70>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <I2C3_Init+0x70>)
 8002d8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d90:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <I2C3_Init+0x70>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d98:	4b09      	ldr	r3, [pc, #36]	@ (8002dc0 <I2C3_Init+0x70>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode?

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002d9e:	4808      	ldr	r0, [pc, #32]	@ (8002dc0 <I2C3_Init+0x70>)
 8002da0:	f000 ff60 	bl	8003c64 <HAL_I2C_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002dae:	bf00      	nop
 8002db0:	e7fd      	b.n	8002dae <I2C3_Init+0x5e>
    }
    return;
 8002db2:	bf00      	nop
}
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	20025bc8 	.word	0x20025bc8
 8002dc4:	40005c00 	.word	0x40005c00
 8002dc8:	000186a0 	.word	0x000186a0

08002dcc <I2C3_MspInit>:

// GPIO Initializations
static void I2C3_MspInit(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd2:	f107 030c 	add.w	r3, r7, #12
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	4b20      	ldr	r3, [pc, #128]	@ (8002e68 <I2C3_MspInit+0x9c>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	4a1f      	ldr	r2, [pc, #124]	@ (8002e68 <I2C3_MspInit+0x9c>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <I2C3_MspInit+0x9c>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]

    // GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <I2C3_MspInit+0x9c>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	4a18      	ldr	r2, [pc, #96]	@ (8002e68 <I2C3_MspInit+0x9c>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0e:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <I2C3_MspInit+0x9c>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002e1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e20:	2312      	movs	r3, #18
 8002e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	4619      	mov	r1, r3
 8002e36:	480d      	ldr	r0, [pc, #52]	@ (8002e6c <I2C3_MspInit+0xa0>)
 8002e38:	f000 fc42 	bl	80036c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002e3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e42:	2312      	movs	r3, #18
 8002e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e4e:	2304      	movs	r3, #4
 8002e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e52:	f107 030c 	add.w	r3, r7, #12
 8002e56:	4619      	mov	r1, r3
 8002e58:	4805      	ldr	r0, [pc, #20]	@ (8002e70 <I2C3_MspInit+0xa4>)
 8002e5a:	f000 fc31 	bl	80036c0 <HAL_GPIO_Init>

}
 8002e5e:	bf00      	nop
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	40020000 	.word	0x40020000

08002e74 <I2C3_Write>:

// This function should only be used for single BYTE transfers
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af04      	add	r7, sp, #16
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	80fb      	strh	r3, [r7, #6]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	717b      	strb	r3, [r7, #5]
 8002e82:	4613      	mov	r3, r2
 8002e84:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002e86:	793b      	ldrb	r3, [r7, #4]
 8002e88:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call?
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002e8a:	797b      	ldrb	r3, [r7, #5]
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	88f9      	ldrh	r1, [r7, #6]
 8002e90:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <I2C3_Write+0x48>)
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	2301      	movs	r3, #1
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	f107 030f 	add.w	r3, r7, #15
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	4807      	ldr	r0, [pc, #28]	@ (8002ec0 <I2C3_Write+0x4c>)
 8002ea2:	f001 f823 	bl	8003eec <HAL_I2C_Mem_Write>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <I2C3_Write+0x50>)
 8002eac:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002eae:	f7ff ff3f 	bl	8002d30 <verifyHAL_I2C_IS_OKAY>
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	0003d090 	.word	0x0003d090
 8002ec0:	20025bc8 	.word	0x20025bc8
 8002ec4:	20025c1c 	.word	0x20025c1c

08002ec8 <I2C3_Read>:

// This function should only be used for single BYTE transfers
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af04      	add	r7, sp, #16
 8002ece:	4603      	mov	r3, r0
 8002ed0:	603a      	str	r2, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	b299      	uxth	r1, r3
 8002edc:	79bb      	ldrb	r3, [r7, #6]
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <I2C3_Read+0x40>)
 8002ee2:	9302      	str	r3, [sp, #8]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2301      	movs	r3, #1
 8002eee:	4807      	ldr	r0, [pc, #28]	@ (8002f0c <I2C3_Read+0x44>)
 8002ef0:	f001 f8f6 	bl	80040e0 <HAL_I2C_Mem_Read>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <I2C3_Read+0x48>)
 8002efa:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002efc:	f7ff ff18 	bl	8002d30 <verifyHAL_I2C_IS_OKAY>
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	0003d090 	.word	0x0003d090
 8002f0c:	20025bc8 	.word	0x20025bc8
 8002f10:	20025c1c 	.word	0x20025c1c

08002f14 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af04      	add	r7, sp, #16
 8002f1a:	603a      	str	r2, [r7, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
 8002f22:	460b      	mov	r3, r1
 8002f24:	71bb      	strb	r3, [r7, #6]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	b299      	uxth	r1, r3
 8002f2e:	79bb      	ldrb	r3, [r7, #6]
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <I2C3_MulitByteRead+0x3c>)
 8002f34:	9302      	str	r3, [sp, #8]
 8002f36:	88bb      	ldrh	r3, [r7, #4]
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	4804      	ldr	r0, [pc, #16]	@ (8002f54 <I2C3_MulitByteRead+0x40>)
 8002f42:	f001 f8cd 	bl	80040e0 <HAL_I2C_Mem_Read>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	0003d090 	.word	0x0003d090
 8002f54:	20025bc8 	.word	0x20025bc8

08002f58 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002f62:	204d      	movs	r0, #77	@ 0x4d
 8002f64:	f7ff fe17 	bl	8002b96 <STMPE811_Read>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002f6c:	204e      	movs	r0, #78	@ 0x4e
 8002f6e:	f7ff fe12 	bl	8002b96 <STMPE811_Read>
 8002f72:	4603      	mov	r3, r0
 8002f74:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002f76:	7a7b      	ldrb	r3, [r7, #9]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	b21a      	sxth	r2, r3
 8002f7c:	7a3b      	ldrb	r3, [r7, #8]
 8002f7e:	b21b      	sxth	r3, r3
 8002f80:	4313      	orrs	r3, r2
 8002f82:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002f84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f88:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	dc06      	bgt.n	8002f9e <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002f90:	89fb      	ldrh	r3, [r7, #14]
 8002f92:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002f96:	330c      	adds	r3, #12
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	81fb      	strh	r3, [r7, #14]
 8002f9c:	e005      	b.n	8002faa <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002f9e:	89fb      	ldrh	r3, [r7, #14]
 8002fa0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fae:	4a18      	ldr	r2, [pc, #96]	@ (8003010 <TM_STMPE811_ReadX+0xb8>)
 8002fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8002fb4:	441a      	add	r2, r3
 8002fb6:	10d2      	asrs	r2, r2, #3
 8002fb8:	17db      	asrs	r3, r3, #31
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002fbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fc2:	2bef      	cmp	r3, #239	@ 0xef
 8002fc4:	dd02      	ble.n	8002fcc <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002fc6:	23ef      	movs	r3, #239	@ 0xef
 8002fc8:	81fb      	strh	r3, [r7, #14]
 8002fca:	e005      	b.n	8002fd8 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002fcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da01      	bge.n	8002fd8 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002fd8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	dd05      	ble.n	8002fee <TM_STMPE811_ReadX+0x96>
 8002fe2:	89fa      	ldrh	r2, [r7, #14]
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	b21b      	sxth	r3, r3
 8002fec:	e004      	b.n	8002ff8 <TM_STMPE811_ReadX+0xa0>
 8002fee:	89fb      	ldrh	r3, [r7, #14]
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b21b      	sxth	r3, r3
 8002ff8:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002ffa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	dd01      	ble.n	8003006 <TM_STMPE811_ReadX+0xae>
        return val;
 8003002:	89fb      	ldrh	r3, [r7, #14]
 8003004:	e000      	b.n	8003008 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003006:	88fb      	ldrh	r3, [r7, #6]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	88888889 	.word	0x88888889

08003014 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800301e:	204f      	movs	r0, #79	@ 0x4f
 8003020:	f7ff fdb9 	bl	8002b96 <STMPE811_Read>
 8003024:	4603      	mov	r3, r0
 8003026:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003028:	2050      	movs	r0, #80	@ 0x50
 800302a:	f7ff fdb4 	bl	8002b96 <STMPE811_Read>
 800302e:	4603      	mov	r3, r0
 8003030:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003032:	7a7b      	ldrb	r3, [r7, #9]
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	b21a      	sxth	r2, r3
 8003038:	7a3b      	ldrb	r3, [r7, #8]
 800303a:	b21b      	sxth	r3, r3
 800303c:	4313      	orrs	r3, r2
 800303e:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003040:	89fb      	ldrh	r3, [r7, #14]
 8003042:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003046:	b29b      	uxth	r3, r3
 8003048:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800304a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800304e:	4a19      	ldr	r2, [pc, #100]	@ (80030b4 <TM_STMPE811_ReadY+0xa0>)
 8003050:	fb82 1203 	smull	r1, r2, r2, r3
 8003054:	1052      	asrs	r2, r2, #1
 8003056:	17db      	asrs	r3, r3, #31
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800305c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003060:	2b00      	cmp	r3, #0
 8003062:	dc02      	bgt.n	800306a <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	81fb      	strh	r3, [r7, #14]
 8003068:	e007      	b.n	800307a <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800306a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800306e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003072:	db02      	blt.n	800307a <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003074:	f240 133f 	movw	r3, #319	@ 0x13f
 8003078:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800307a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	429a      	cmp	r2, r3
 8003082:	dd05      	ble.n	8003090 <TM_STMPE811_ReadY+0x7c>
 8003084:	89fa      	ldrh	r2, [r7, #14]
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	b29b      	uxth	r3, r3
 800308c:	b21b      	sxth	r3, r3
 800308e:	e004      	b.n	800309a <TM_STMPE811_ReadY+0x86>
 8003090:	89fb      	ldrh	r3, [r7, #14]
 8003092:	88fa      	ldrh	r2, [r7, #6]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	b29b      	uxth	r3, r3
 8003098:	b21b      	sxth	r3, r3
 800309a:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 800309c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	dd01      	ble.n	80030a8 <TM_STMPE811_ReadY+0x94>
        return val;
 80030a4:	89fb      	ldrh	r3, [r7, #14]
 80030a6:	e000      	b.n	80030aa <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80030a8:	88fb      	ldrh	r3, [r7, #6]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	2e8ba2e9 	.word	0x2e8ba2e9

080030b8 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	e00a      	b.n	80030ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030d8:	f3af 8000 	nop.w
 80030dc:	4601      	mov	r1, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	60ba      	str	r2, [r7, #8]
 80030e4:	b2ca      	uxtb	r2, r1
 80030e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	3301      	adds	r3, #1
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	dbf0      	blt.n	80030d8 <_read+0x12>
  }

  return len;
 80030f6:	687b      	ldr	r3, [r7, #4]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e009      	b.n	8003126 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	60ba      	str	r2, [r7, #8]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3301      	adds	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	dbf1      	blt.n	8003112 <_write+0x12>
  }
  return len;
 800312e:	687b      	ldr	r3, [r7, #4]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_close>:

int _close(int file)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003160:	605a      	str	r2, [r3, #4]
  return 0;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <_isatty>:

int _isatty(int file)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003178:	2301      	movs	r3, #1
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a8:	4a14      	ldr	r2, [pc, #80]	@ (80031fc <_sbrk+0x5c>)
 80031aa:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <_sbrk+0x60>)
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031b4:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <_sbrk+0x64>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031bc:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <_sbrk+0x64>)
 80031be:	4a12      	ldr	r2, [pc, #72]	@ (8003208 <_sbrk+0x68>)
 80031c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031c2:	4b10      	ldr	r3, [pc, #64]	@ (8003204 <_sbrk+0x64>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d207      	bcs.n	80031e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031d0:	f003 fc42 	bl	8006a58 <__errno>
 80031d4:	4603      	mov	r3, r0
 80031d6:	220c      	movs	r2, #12
 80031d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
 80031de:	e009      	b.n	80031f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031e0:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <_sbrk+0x64>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031e6:	4b07      	ldr	r3, [pc, #28]	@ (8003204 <_sbrk+0x64>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	4a05      	ldr	r2, [pc, #20]	@ (8003204 <_sbrk+0x64>)
 80031f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031f2:	68fb      	ldr	r3, [r7, #12]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20030000 	.word	0x20030000
 8003200:	00000400 	.word	0x00000400
 8003204:	20025c20 	.word	0x20025c20
 8003208:	20025d78 	.word	0x20025d78

0800320c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003210:	4b06      	ldr	r3, [pc, #24]	@ (800322c <SystemInit+0x20>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003216:	4a05      	ldr	r2, [pc, #20]	@ (800322c <SystemInit+0x20>)
 8003218:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800321c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003230:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003268 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003234:	f7ff ffea 	bl	800320c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003238:	480c      	ldr	r0, [pc, #48]	@ (800326c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800323a:	490d      	ldr	r1, [pc, #52]	@ (8003270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800323c:	4a0d      	ldr	r2, [pc, #52]	@ (8003274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800323e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003240:	e002      	b.n	8003248 <LoopCopyDataInit>

08003242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003246:	3304      	adds	r3, #4

08003248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800324a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800324c:	d3f9      	bcc.n	8003242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800324e:	4a0a      	ldr	r2, [pc, #40]	@ (8003278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003250:	4c0a      	ldr	r4, [pc, #40]	@ (800327c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003254:	e001      	b.n	800325a <LoopFillZerobss>

08003256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003258:	3204      	adds	r2, #4

0800325a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800325a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800325c:	d3fb      	bcc.n	8003256 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800325e:	f003 fc01 	bl	8006a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003262:	f7ff f86b 	bl	800233c <main>
  bx  lr    
 8003266:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003268:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800326c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003270:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8003274:	08008acc 	.word	0x08008acc
  ldr r2, =_sbss
 8003278:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 800327c:	20025d74 	.word	0x20025d74

08003280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003280:	e7fe      	b.n	8003280 <ADC_IRQHandler>
	...

08003284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003288:	4b0e      	ldr	r3, [pc, #56]	@ (80032c4 <HAL_Init+0x40>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0d      	ldr	r2, [pc, #52]	@ (80032c4 <HAL_Init+0x40>)
 800328e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003294:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_Init+0x40>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a0a      	ldr	r2, [pc, #40]	@ (80032c4 <HAL_Init+0x40>)
 800329a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800329e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032a0:	4b08      	ldr	r3, [pc, #32]	@ (80032c4 <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a07      	ldr	r2, [pc, #28]	@ (80032c4 <HAL_Init+0x40>)
 80032a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ac:	2003      	movs	r0, #3
 80032ae:	f000 f991 	bl	80035d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f000 f808 	bl	80032c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032b8:	f7ff f90e 	bl	80024d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023c00 	.word	0x40023c00

080032c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032d0:	4b12      	ldr	r3, [pc, #72]	@ (800331c <HAL_InitTick+0x54>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b12      	ldr	r3, [pc, #72]	@ (8003320 <HAL_InitTick+0x58>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	4619      	mov	r1, r3
 80032da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032de:	fbb3 f3f1 	udiv	r3, r3, r1
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f9b7 	bl	800365a <HAL_SYSTICK_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e00e      	b.n	8003314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b0f      	cmp	r3, #15
 80032fa:	d80a      	bhi.n	8003312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032fc:	2200      	movs	r2, #0
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	f000 f971 	bl	80035ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003308:	4a06      	ldr	r2, [pc, #24]	@ (8003324 <HAL_InitTick+0x5c>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000080 	.word	0x20000080
 8003320:	20000088 	.word	0x20000088
 8003324:	20000084 	.word	0x20000084

08003328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_IncTick+0x20>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <HAL_IncTick+0x24>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4413      	add	r3, r2
 8003338:	4a04      	ldr	r2, [pc, #16]	@ (800334c <HAL_IncTick+0x24>)
 800333a:	6013      	str	r3, [r2, #0]
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000088 	.word	0x20000088
 800334c:	20025c24 	.word	0x20025c24

08003350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return uwTick;
 8003354:	4b03      	ldr	r3, [pc, #12]	@ (8003364 <HAL_GetTick+0x14>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20025c24 	.word	0x20025c24

08003368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7ff ffee 	bl	8003350 <HAL_GetTick>
 8003374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d005      	beq.n	800338e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003382:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <HAL_Delay+0x44>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800338e:	bf00      	nop
 8003390:	f7ff ffde 	bl	8003350 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	429a      	cmp	r2, r3
 800339e:	d8f7      	bhi.n	8003390 <HAL_Delay+0x28>
  {
  }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000088 	.word	0x20000088

080033b0 <__NVIC_SetPriorityGrouping>:
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c0:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e2:	4a04      	ldr	r2, [pc, #16]	@ (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	60d3      	str	r3, [r2, #12]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_GetPriorityGrouping>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033fc:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <__NVIC_GetPriorityGrouping+0x18>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0307 	and.w	r3, r3, #7
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_EnableIRQ>:
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db0b      	blt.n	800343e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	4907      	ldr	r1, [pc, #28]	@ (800344c <__NVIC_EnableIRQ+0x38>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000e100 	.word	0xe000e100

08003450 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	db12      	blt.n	8003488 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	490a      	ldr	r1, [pc, #40]	@ (8003494 <__NVIC_DisableIRQ+0x44>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2001      	movs	r0, #1
 8003472:	fa00 f202 	lsl.w	r2, r0, r2
 8003476:	3320      	adds	r3, #32
 8003478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800347c:	f3bf 8f4f 	dsb	sy
}
 8003480:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003482:	f3bf 8f6f 	isb	sy
}
 8003486:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000e100 	.word	0xe000e100

08003498 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	db0c      	blt.n	80034c4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	f003 021f 	and.w	r2, r3, #31
 80034b0:	4907      	ldr	r1, [pc, #28]	@ (80034d0 <__NVIC_ClearPendingIRQ+0x38>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2001      	movs	r0, #1
 80034ba:	fa00 f202 	lsl.w	r2, r0, r2
 80034be:	3360      	adds	r3, #96	@ 0x60
 80034c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000e100 	.word	0xe000e100

080034d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	db0a      	blt.n	80034fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	490c      	ldr	r1, [pc, #48]	@ (8003520 <__NVIC_SetPriority+0x4c>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	440b      	add	r3, r1
 80034f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034fc:	e00a      	b.n	8003514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4908      	ldr	r1, [pc, #32]	@ (8003524 <__NVIC_SetPriority+0x50>)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	3b04      	subs	r3, #4
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	440b      	add	r3, r1
 8003512:	761a      	strb	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000e100 	.word	0xe000e100
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	@ 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f1c3 0307 	rsb	r3, r3, #7
 8003542:	2b04      	cmp	r3, #4
 8003544:	bf28      	it	cs
 8003546:	2304      	movcs	r3, #4
 8003548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3304      	adds	r3, #4
 800354e:	2b06      	cmp	r3, #6
 8003550:	d902      	bls.n	8003558 <NVIC_EncodePriority+0x30>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3b03      	subs	r3, #3
 8003556:	e000      	b.n	800355a <NVIC_EncodePriority+0x32>
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	f04f 32ff 	mov.w	r2, #4294967295
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	401a      	ands	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43d9      	mvns	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	4313      	orrs	r3, r2
         );
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	@ 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035a0:	d301      	bcc.n	80035a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a2:	2301      	movs	r3, #1
 80035a4:	e00f      	b.n	80035c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a6:	4a0a      	ldr	r2, [pc, #40]	@ (80035d0 <SysTick_Config+0x40>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ae:	210f      	movs	r1, #15
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	f7ff ff8e 	bl	80034d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b8:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <SysTick_Config+0x40>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035be:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <SysTick_Config+0x40>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	e000e010 	.word	0xe000e010

080035d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff fee7 	bl	80033b0 <__NVIC_SetPriorityGrouping>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035fc:	f7ff fefc 	bl	80033f8 <__NVIC_GetPriorityGrouping>
 8003600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	6978      	ldr	r0, [r7, #20]
 8003608:	f7ff ff8e 	bl	8003528 <NVIC_EncodePriority>
 800360c:	4602      	mov	r2, r0
 800360e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff5d 	bl	80034d4 <__NVIC_SetPriority>
}
 800361a:	bf00      	nop
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff feef 	bl	8003414 <__NVIC_EnableIRQ>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff feff 	bl	8003450 <__NVIC_DisableIRQ>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ff94 	bl	8003590 <SysTick_Config>
 8003668:	4603      	mov	r3, r0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff09 	bl	8003498 <__NVIC_ClearPendingIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	2201      	movs	r2, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80036aa:	4a04      	ldr	r2, [pc, #16]	@ (80036bc <HAL_EXTI_ClearPending+0x2c>)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6153      	str	r3, [r2, #20]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40013c00 	.word	0x40013c00

080036c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	@ 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e177      	b.n	80039cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036dc:	2201      	movs	r2, #1
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	f040 8166 	bne.w	80039c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d005      	beq.n	8003712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370e:	2b02      	cmp	r3, #2
 8003710:	d130      	bne.n	8003774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2203      	movs	r2, #3
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003748:	2201      	movs	r2, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 0201 	and.w	r2, r3, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b03      	cmp	r3, #3
 800377e:	d017      	beq.n	80037b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	2203      	movs	r2, #3
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d123      	bne.n	8003804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	08da      	lsrs	r2, r3, #3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3208      	adds	r2, #8
 80037c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	220f      	movs	r2, #15
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	08da      	lsrs	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3208      	adds	r2, #8
 80037fe:	69b9      	ldr	r1, [r7, #24]
 8003800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	2203      	movs	r2, #3
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0203 	and.w	r2, r3, #3
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80c0 	beq.w	80039c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	4b66      	ldr	r3, [pc, #408]	@ (80039e4 <HAL_GPIO_Init+0x324>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384e:	4a65      	ldr	r2, [pc, #404]	@ (80039e4 <HAL_GPIO_Init+0x324>)
 8003850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003854:	6453      	str	r3, [r2, #68]	@ 0x44
 8003856:	4b63      	ldr	r3, [pc, #396]	@ (80039e4 <HAL_GPIO_Init+0x324>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003862:	4a61      	ldr	r2, [pc, #388]	@ (80039e8 <HAL_GPIO_Init+0x328>)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	3302      	adds	r3, #2
 800386a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	220f      	movs	r2, #15
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a58      	ldr	r2, [pc, #352]	@ (80039ec <HAL_GPIO_Init+0x32c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d037      	beq.n	80038fe <HAL_GPIO_Init+0x23e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a57      	ldr	r2, [pc, #348]	@ (80039f0 <HAL_GPIO_Init+0x330>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d031      	beq.n	80038fa <HAL_GPIO_Init+0x23a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a56      	ldr	r2, [pc, #344]	@ (80039f4 <HAL_GPIO_Init+0x334>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <HAL_GPIO_Init+0x236>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a55      	ldr	r2, [pc, #340]	@ (80039f8 <HAL_GPIO_Init+0x338>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d025      	beq.n	80038f2 <HAL_GPIO_Init+0x232>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a54      	ldr	r2, [pc, #336]	@ (80039fc <HAL_GPIO_Init+0x33c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01f      	beq.n	80038ee <HAL_GPIO_Init+0x22e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a53      	ldr	r2, [pc, #332]	@ (8003a00 <HAL_GPIO_Init+0x340>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d019      	beq.n	80038ea <HAL_GPIO_Init+0x22a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a52      	ldr	r2, [pc, #328]	@ (8003a04 <HAL_GPIO_Init+0x344>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_GPIO_Init+0x226>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a51      	ldr	r2, [pc, #324]	@ (8003a08 <HAL_GPIO_Init+0x348>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00d      	beq.n	80038e2 <HAL_GPIO_Init+0x222>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a50      	ldr	r2, [pc, #320]	@ (8003a0c <HAL_GPIO_Init+0x34c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <HAL_GPIO_Init+0x21e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003a10 <HAL_GPIO_Init+0x350>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_GPIO_Init+0x21a>
 80038d6:	2309      	movs	r3, #9
 80038d8:	e012      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038da:	230a      	movs	r3, #10
 80038dc:	e010      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038de:	2308      	movs	r3, #8
 80038e0:	e00e      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038e2:	2307      	movs	r3, #7
 80038e4:	e00c      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038e6:	2306      	movs	r3, #6
 80038e8:	e00a      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038ea:	2305      	movs	r3, #5
 80038ec:	e008      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038ee:	2304      	movs	r3, #4
 80038f0:	e006      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038f2:	2303      	movs	r3, #3
 80038f4:	e004      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e002      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038fe:	2300      	movs	r3, #0
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	f002 0203 	and.w	r2, r2, #3
 8003906:	0092      	lsls	r2, r2, #2
 8003908:	4093      	lsls	r3, r2
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003910:	4935      	ldr	r1, [pc, #212]	@ (80039e8 <HAL_GPIO_Init+0x328>)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	3302      	adds	r3, #2
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800391e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a14 <HAL_GPIO_Init+0x354>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003942:	4a34      	ldr	r2, [pc, #208]	@ (8003a14 <HAL_GPIO_Init+0x354>)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003948:	4b32      	ldr	r3, [pc, #200]	@ (8003a14 <HAL_GPIO_Init+0x354>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800396c:	4a29      	ldr	r2, [pc, #164]	@ (8003a14 <HAL_GPIO_Init+0x354>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003972:	4b28      	ldr	r3, [pc, #160]	@ (8003a14 <HAL_GPIO_Init+0x354>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003996:	4a1f      	ldr	r2, [pc, #124]	@ (8003a14 <HAL_GPIO_Init+0x354>)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800399c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <HAL_GPIO_Init+0x354>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039c0:	4a14      	ldr	r2, [pc, #80]	@ (8003a14 <HAL_GPIO_Init+0x354>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3301      	adds	r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b0f      	cmp	r3, #15
 80039d0:	f67f ae84 	bls.w	80036dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
 80039d8:	3724      	adds	r7, #36	@ 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40013800 	.word	0x40013800
 80039ec:	40020000 	.word	0x40020000
 80039f0:	40020400 	.word	0x40020400
 80039f4:	40020800 	.word	0x40020800
 80039f8:	40020c00 	.word	0x40020c00
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40021400 	.word	0x40021400
 8003a04:	40021800 	.word	0x40021800
 8003a08:	40021c00 	.word	0x40021c00
 8003a0c:	40022000 	.word	0x40022000
 8003a10:	40022400 	.word	0x40022400
 8003a14:	40013c00 	.word	0x40013c00

08003a18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e0d9      	b.n	8003be8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a34:	2201      	movs	r2, #1
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4013      	ands	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	f040 80c9 	bne.w	8003be2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a50:	4a6b      	ldr	r2, [pc, #428]	@ (8003c00 <HAL_GPIO_DeInit+0x1e8>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	3302      	adds	r3, #2
 8003a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	220f      	movs	r2, #15
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a63      	ldr	r2, [pc, #396]	@ (8003c04 <HAL_GPIO_DeInit+0x1ec>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d037      	beq.n	8003aea <HAL_GPIO_DeInit+0xd2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a62      	ldr	r2, [pc, #392]	@ (8003c08 <HAL_GPIO_DeInit+0x1f0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d031      	beq.n	8003ae6 <HAL_GPIO_DeInit+0xce>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a61      	ldr	r2, [pc, #388]	@ (8003c0c <HAL_GPIO_DeInit+0x1f4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d02b      	beq.n	8003ae2 <HAL_GPIO_DeInit+0xca>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a60      	ldr	r2, [pc, #384]	@ (8003c10 <HAL_GPIO_DeInit+0x1f8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d025      	beq.n	8003ade <HAL_GPIO_DeInit+0xc6>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a5f      	ldr	r2, [pc, #380]	@ (8003c14 <HAL_GPIO_DeInit+0x1fc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01f      	beq.n	8003ada <HAL_GPIO_DeInit+0xc2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c18 <HAL_GPIO_DeInit+0x200>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d019      	beq.n	8003ad6 <HAL_GPIO_DeInit+0xbe>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a5d      	ldr	r2, [pc, #372]	@ (8003c1c <HAL_GPIO_DeInit+0x204>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_GPIO_DeInit+0xba>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a5c      	ldr	r2, [pc, #368]	@ (8003c20 <HAL_GPIO_DeInit+0x208>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00d      	beq.n	8003ace <HAL_GPIO_DeInit+0xb6>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a5b      	ldr	r2, [pc, #364]	@ (8003c24 <HAL_GPIO_DeInit+0x20c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <HAL_GPIO_DeInit+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a5a      	ldr	r2, [pc, #360]	@ (8003c28 <HAL_GPIO_DeInit+0x210>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <HAL_GPIO_DeInit+0xae>
 8003ac2:	2309      	movs	r3, #9
 8003ac4:	e012      	b.n	8003aec <HAL_GPIO_DeInit+0xd4>
 8003ac6:	230a      	movs	r3, #10
 8003ac8:	e010      	b.n	8003aec <HAL_GPIO_DeInit+0xd4>
 8003aca:	2308      	movs	r3, #8
 8003acc:	e00e      	b.n	8003aec <HAL_GPIO_DeInit+0xd4>
 8003ace:	2307      	movs	r3, #7
 8003ad0:	e00c      	b.n	8003aec <HAL_GPIO_DeInit+0xd4>
 8003ad2:	2306      	movs	r3, #6
 8003ad4:	e00a      	b.n	8003aec <HAL_GPIO_DeInit+0xd4>
 8003ad6:	2305      	movs	r3, #5
 8003ad8:	e008      	b.n	8003aec <HAL_GPIO_DeInit+0xd4>
 8003ada:	2304      	movs	r3, #4
 8003adc:	e006      	b.n	8003aec <HAL_GPIO_DeInit+0xd4>
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e004      	b.n	8003aec <HAL_GPIO_DeInit+0xd4>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e002      	b.n	8003aec <HAL_GPIO_DeInit+0xd4>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_GPIO_DeInit+0xd4>
 8003aea:	2300      	movs	r3, #0
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	f002 0203 	and.w	r2, r2, #3
 8003af2:	0092      	lsls	r2, r2, #2
 8003af4:	4093      	lsls	r3, r2
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d132      	bne.n	8003b62 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003afc:	4b4b      	ldr	r3, [pc, #300]	@ (8003c2c <HAL_GPIO_DeInit+0x214>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	4949      	ldr	r1, [pc, #292]	@ (8003c2c <HAL_GPIO_DeInit+0x214>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003b0a:	4b48      	ldr	r3, [pc, #288]	@ (8003c2c <HAL_GPIO_DeInit+0x214>)
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	43db      	mvns	r3, r3
 8003b12:	4946      	ldr	r1, [pc, #280]	@ (8003c2c <HAL_GPIO_DeInit+0x214>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003b18:	4b44      	ldr	r3, [pc, #272]	@ (8003c2c <HAL_GPIO_DeInit+0x214>)
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	4942      	ldr	r1, [pc, #264]	@ (8003c2c <HAL_GPIO_DeInit+0x214>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003b26:	4b41      	ldr	r3, [pc, #260]	@ (8003c2c <HAL_GPIO_DeInit+0x214>)
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	493f      	ldr	r1, [pc, #252]	@ (8003c2c <HAL_GPIO_DeInit+0x214>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003b44:	4a2e      	ldr	r2, [pc, #184]	@ (8003c00 <HAL_GPIO_DeInit+0x1e8>)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	43da      	mvns	r2, r3
 8003b54:	482a      	ldr	r0, [pc, #168]	@ (8003c00 <HAL_GPIO_DeInit+0x1e8>)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	400a      	ands	r2, r1
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2103      	movs	r1, #3
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	401a      	ands	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	08da      	lsrs	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3208      	adds	r2, #8
 8003b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	220f      	movs	r2, #15
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	08d2      	lsrs	r2, r2, #3
 8003b98:	4019      	ands	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3208      	adds	r2, #8
 8003b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2103      	movs	r1, #3
 8003bac:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	2103      	movs	r1, #3
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	401a      	ands	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	3301      	adds	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b0f      	cmp	r3, #15
 8003bec:	f67f af22 	bls.w	8003a34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40013800 	.word	0x40013800
 8003c04:	40020000 	.word	0x40020000
 8003c08:	40020400 	.word	0x40020400
 8003c0c:	40020800 	.word	0x40020800
 8003c10:	40020c00 	.word	0x40020c00
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40021400 	.word	0x40021400
 8003c1c:	40021800 	.word	0x40021800
 8003c20:	40021c00 	.word	0x40021c00
 8003c24:	40022000 	.word	0x40022000
 8003c28:	40022400 	.word	0x40022400
 8003c2c:	40013c00 	.word	0x40013c00

08003c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c40:	787b      	ldrb	r3, [r7, #1]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c46:	887a      	ldrh	r2, [r7, #2]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c4c:	e003      	b.n	8003c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	041a      	lsls	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	619a      	str	r2, [r3, #24]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e12b      	b.n	8003ece <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fe fc4c 	bl	8002528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	@ 0x24
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cc8:	f001 ff06 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8003ccc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4a81      	ldr	r2, [pc, #516]	@ (8003ed8 <HAL_I2C_Init+0x274>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d807      	bhi.n	8003ce8 <HAL_I2C_Init+0x84>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a80      	ldr	r2, [pc, #512]	@ (8003edc <HAL_I2C_Init+0x278>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	bf94      	ite	ls
 8003ce0:	2301      	movls	r3, #1
 8003ce2:	2300      	movhi	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e006      	b.n	8003cf6 <HAL_I2C_Init+0x92>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a7d      	ldr	r2, [pc, #500]	@ (8003ee0 <HAL_I2C_Init+0x27c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	bf94      	ite	ls
 8003cf0:	2301      	movls	r3, #1
 8003cf2:	2300      	movhi	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0e7      	b.n	8003ece <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4a78      	ldr	r2, [pc, #480]	@ (8003ee4 <HAL_I2C_Init+0x280>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0c9b      	lsrs	r3, r3, #18
 8003d08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ed8 <HAL_I2C_Init+0x274>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d802      	bhi.n	8003d38 <HAL_I2C_Init+0xd4>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	3301      	adds	r3, #1
 8003d36:	e009      	b.n	8003d4c <HAL_I2C_Init+0xe8>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	4a69      	ldr	r2, [pc, #420]	@ (8003ee8 <HAL_I2C_Init+0x284>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	099b      	lsrs	r3, r3, #6
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	495c      	ldr	r1, [pc, #368]	@ (8003ed8 <HAL_I2C_Init+0x274>)
 8003d68:	428b      	cmp	r3, r1
 8003d6a:	d819      	bhi.n	8003da0 <HAL_I2C_Init+0x13c>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1e59      	subs	r1, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d7a:	1c59      	adds	r1, r3, #1
 8003d7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d80:	400b      	ands	r3, r1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_I2C_Init+0x138>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1e59      	subs	r1, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9a:	e051      	b.n	8003e40 <HAL_I2C_Init+0x1dc>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	e04f      	b.n	8003e40 <HAL_I2C_Init+0x1dc>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d111      	bne.n	8003dcc <HAL_I2C_Init+0x168>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1e58      	subs	r0, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6859      	ldr	r1, [r3, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	440b      	add	r3, r1
 8003db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e012      	b.n	8003df2 <HAL_I2C_Init+0x18e>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1e58      	subs	r0, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	0099      	lsls	r1, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de2:	3301      	adds	r3, #1
 8003de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Init+0x196>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e022      	b.n	8003e40 <HAL_I2C_Init+0x1dc>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10e      	bne.n	8003e20 <HAL_I2C_Init+0x1bc>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1e58      	subs	r0, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	440b      	add	r3, r1
 8003e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e14:	3301      	adds	r3, #1
 8003e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e1e:	e00f      	b.n	8003e40 <HAL_I2C_Init+0x1dc>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	1e58      	subs	r0, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6859      	ldr	r1, [r3, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	0099      	lsls	r1, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e36:	3301      	adds	r3, #1
 8003e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	6809      	ldr	r1, [r1, #0]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6911      	ldr	r1, [r2, #16]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68d2      	ldr	r2, [r2, #12]
 8003e7a:	4311      	orrs	r1, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	000186a0 	.word	0x000186a0
 8003edc:	001e847f 	.word	0x001e847f
 8003ee0:	003d08ff 	.word	0x003d08ff
 8003ee4:	431bde83 	.word	0x431bde83
 8003ee8:	10624dd3 	.word	0x10624dd3

08003eec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	817b      	strh	r3, [r7, #10]
 8003efe:	460b      	mov	r3, r1
 8003f00:	813b      	strh	r3, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f06:	f7ff fa23 	bl	8003350 <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	f040 80d9 	bne.w	80040cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	2319      	movs	r3, #25
 8003f20:	2201      	movs	r2, #1
 8003f22:	496d      	ldr	r1, [pc, #436]	@ (80040d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fc8b 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
 8003f32:	e0cc      	b.n	80040ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_I2C_Mem_Write+0x56>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e0c5      	b.n	80040ce <HAL_I2C_Mem_Write+0x1e2>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d007      	beq.n	8003f68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2221      	movs	r2, #33	@ 0x21
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2240      	movs	r2, #64	@ 0x40
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4a4d      	ldr	r2, [pc, #308]	@ (80040dc <HAL_I2C_Mem_Write+0x1f0>)
 8003fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003faa:	88f8      	ldrh	r0, [r7, #6]
 8003fac:	893a      	ldrh	r2, [r7, #8]
 8003fae:	8979      	ldrh	r1, [r7, #10]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	4603      	mov	r3, r0
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 fac2 	bl	8004544 <I2C_RequestMemoryWrite>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d052      	beq.n	800406c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e081      	b.n	80040ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fd50 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00d      	beq.n	8003ff6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d107      	bne.n	8003ff2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e06b      	b.n	80040ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b04      	cmp	r3, #4
 8004032:	d11b      	bne.n	800406c <HAL_I2C_Mem_Write+0x180>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	d017      	beq.n	800406c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	781a      	ldrb	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1aa      	bne.n	8003fca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fd43 	bl	8004b04 <I2C_WaitOnBTFFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00d      	beq.n	80040a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	2b04      	cmp	r3, #4
 800408a:	d107      	bne.n	800409c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800409a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e016      	b.n	80040ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e000      	b.n	80040ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040cc:	2302      	movs	r3, #2
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	00100002 	.word	0x00100002
 80040dc:	ffff0000 	.word	0xffff0000

080040e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	@ 0x30
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	461a      	mov	r2, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	817b      	strh	r3, [r7, #10]
 80040f2:	460b      	mov	r3, r1
 80040f4:	813b      	strh	r3, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040fa:	f7ff f929 	bl	8003350 <HAL_GetTick>
 80040fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b20      	cmp	r3, #32
 800410a:	f040 8214 	bne.w	8004536 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2319      	movs	r3, #25
 8004114:	2201      	movs	r2, #1
 8004116:	497b      	ldr	r1, [pc, #492]	@ (8004304 <HAL_I2C_Mem_Read+0x224>)
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fb91 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
 8004126:	e207      	b.n	8004538 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_I2C_Mem_Read+0x56>
 8004132:	2302      	movs	r3, #2
 8004134:	e200      	b.n	8004538 <HAL_I2C_Mem_Read+0x458>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d007      	beq.n	800415c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2222      	movs	r2, #34	@ 0x22
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2240      	movs	r2, #64	@ 0x40
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004186:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800418c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a5b      	ldr	r2, [pc, #364]	@ (8004308 <HAL_I2C_Mem_Read+0x228>)
 800419c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800419e:	88f8      	ldrh	r0, [r7, #6]
 80041a0:	893a      	ldrh	r2, [r7, #8]
 80041a2:	8979      	ldrh	r1, [r7, #10]
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4603      	mov	r3, r0
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fa5e 	bl	8004670 <I2C_RequestMemoryRead>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e1bc      	b.n	8004538 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d113      	bne.n	80041ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c6:	2300      	movs	r3, #0
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	623b      	str	r3, [r7, #32]
 80041da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e190      	b.n	8004510 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d11b      	bne.n	800422e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e170      	b.n	8004510 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004232:	2b02      	cmp	r3, #2
 8004234:	d11b      	bne.n	800426e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004244:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004254:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	e150      	b.n	8004510 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004284:	e144      	b.n	8004510 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428a:	2b03      	cmp	r3, #3
 800428c:	f200 80f1 	bhi.w	8004472 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004294:	2b01      	cmp	r3, #1
 8004296:	d123      	bne.n	80042e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 fc79 	bl	8004b94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e145      	b.n	8004538 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042de:	e117      	b.n	8004510 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d14e      	bne.n	8004386 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ee:	2200      	movs	r2, #0
 80042f0:	4906      	ldr	r1, [pc, #24]	@ (800430c <HAL_I2C_Mem_Read+0x22c>)
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 faa4 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e11a      	b.n	8004538 <HAL_I2C_Mem_Read+0x458>
 8004302:	bf00      	nop
 8004304:	00100002 	.word	0x00100002
 8004308:	ffff0000 	.word	0xffff0000
 800430c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800431e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004384:	e0c4      	b.n	8004510 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438c:	2200      	movs	r2, #0
 800438e:	496c      	ldr	r1, [pc, #432]	@ (8004540 <HAL_I2C_Mem_Read+0x460>)
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fa55 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0cb      	b.n	8004538 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e8:	2200      	movs	r2, #0
 80043ea:	4955      	ldr	r1, [pc, #340]	@ (8004540 <HAL_I2C_Mem_Read+0x460>)
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 fa27 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e09d      	b.n	8004538 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800440a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004470:	e04e      	b.n	8004510 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004474:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fb8c 	bl	8004b94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e058      	b.n	8004538 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d124      	bne.n	8004510 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d107      	bne.n	80044de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004514:	2b00      	cmp	r3, #0
 8004516:	f47f aeb6 	bne.w	8004286 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e000      	b.n	8004538 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	3728      	adds	r7, #40	@ 0x28
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	00010004 	.word	0x00010004

08004544 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	4608      	mov	r0, r1
 800454e:	4611      	mov	r1, r2
 8004550:	461a      	mov	r2, r3
 8004552:	4603      	mov	r3, r0
 8004554:	817b      	strh	r3, [r7, #10]
 8004556:	460b      	mov	r3, r1
 8004558:	813b      	strh	r3, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800456c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	2200      	movs	r2, #0
 8004576:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f960 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00d      	beq.n	80045a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004594:	d103      	bne.n	800459e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800459c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e05f      	b.n	8004662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045a2:	897b      	ldrh	r3, [r7, #10]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b4:	6a3a      	ldr	r2, [r7, #32]
 80045b6:	492d      	ldr	r1, [pc, #180]	@ (800466c <I2C_RequestMemoryWrite+0x128>)
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f9bb 	bl	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e04c      	b.n	8004662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e0:	6a39      	ldr	r1, [r7, #32]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fa46 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d107      	bne.n	8004606 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004604:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e02b      	b.n	8004662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d105      	bne.n	800461c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004610:	893b      	ldrh	r3, [r7, #8]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	611a      	str	r2, [r3, #16]
 800461a:	e021      	b.n	8004660 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800461c:	893b      	ldrh	r3, [r7, #8]
 800461e:	0a1b      	lsrs	r3, r3, #8
 8004620:	b29b      	uxth	r3, r3
 8004622:	b2da      	uxtb	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800462a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462c:	6a39      	ldr	r1, [r7, #32]
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fa20 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00d      	beq.n	8004656 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	2b04      	cmp	r3, #4
 8004640:	d107      	bne.n	8004652 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004650:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e005      	b.n	8004662 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004656:	893b      	ldrh	r3, [r7, #8]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	00010002 	.word	0x00010002

08004670 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	4608      	mov	r0, r1
 800467a:	4611      	mov	r1, r2
 800467c:	461a      	mov	r2, r3
 800467e:	4603      	mov	r3, r0
 8004680:	817b      	strh	r3, [r7, #10]
 8004682:	460b      	mov	r3, r1
 8004684:	813b      	strh	r3, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004698:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f8c2 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00d      	beq.n	80046de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d0:	d103      	bne.n	80046da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e0aa      	b.n	8004834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046de:	897b      	ldrh	r3, [r7, #10]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	4952      	ldr	r1, [pc, #328]	@ (800483c <I2C_RequestMemoryRead+0x1cc>)
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f91d 	bl	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e097      	b.n	8004834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800471c:	6a39      	ldr	r1, [r7, #32]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f9a8 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	2b04      	cmp	r3, #4
 8004730:	d107      	bne.n	8004742 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004740:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e076      	b.n	8004834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d105      	bne.n	8004758 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800474c:	893b      	ldrh	r3, [r7, #8]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	611a      	str	r2, [r3, #16]
 8004756:	e021      	b.n	800479c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004758:	893b      	ldrh	r3, [r7, #8]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	b29b      	uxth	r3, r3
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004768:	6a39      	ldr	r1, [r7, #32]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f982 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00d      	beq.n	8004792 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477a:	2b04      	cmp	r3, #4
 800477c:	d107      	bne.n	800478e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800478c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e050      	b.n	8004834 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004792:	893b      	ldrh	r3, [r7, #8]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800479c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479e:	6a39      	ldr	r1, [r7, #32]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f967 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00d      	beq.n	80047c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d107      	bne.n	80047c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e035      	b.n	8004834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2200      	movs	r2, #0
 80047e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f82b 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047fe:	d103      	bne.n	8004808 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e013      	b.n	8004834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800480c:	897b      	ldrh	r3, [r7, #10]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	b2da      	uxtb	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	6a3a      	ldr	r2, [r7, #32]
 8004820:	4906      	ldr	r1, [pc, #24]	@ (800483c <I2C_RequestMemoryRead+0x1cc>)
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f886 	bl	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	00010002 	.word	0x00010002

08004840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004850:	e048      	b.n	80048e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d044      	beq.n	80048e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485a:	f7fe fd79 	bl	8003350 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <I2C_WaitOnFlagUntilTimeout+0x30>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d139      	bne.n	80048e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	0c1b      	lsrs	r3, r3, #16
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10d      	bne.n	8004896 <I2C_WaitOnFlagUntilTimeout+0x56>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	43da      	mvns	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4013      	ands	r3, r2
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	461a      	mov	r2, r3
 8004894:	e00c      	b.n	80048b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	43da      	mvns	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4013      	ands	r3, r2
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d116      	bne.n	80048e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e023      	b.n	800492c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	0c1b      	lsrs	r3, r3, #16
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d10d      	bne.n	800490a <I2C_WaitOnFlagUntilTimeout+0xca>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	43da      	mvns	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4013      	ands	r3, r2
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	e00c      	b.n	8004924 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	43da      	mvns	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4013      	ands	r3, r2
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	429a      	cmp	r2, r3
 8004928:	d093      	beq.n	8004852 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004942:	e071      	b.n	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004952:	d123      	bne.n	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004962:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800496c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004988:	f043 0204 	orr.w	r2, r3, #4
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e067      	b.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d041      	beq.n	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a4:	f7fe fcd4 	bl	8003350 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d302      	bcc.n	80049ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d136      	bne.n	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d10c      	bne.n	80049de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	43da      	mvns	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bf14      	ite	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	2300      	moveq	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	e00b      	b.n	80049f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	43da      	mvns	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e021      	b.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	0c1b      	lsrs	r3, r3, #16
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d10c      	bne.n	8004a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	43da      	mvns	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e00b      	b.n	8004a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	43da      	mvns	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4013      	ands	r3, r2
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bf14      	ite	ne
 8004a5e:	2301      	movne	r3, #1
 8004a60:	2300      	moveq	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f47f af6d 	bne.w	8004944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a80:	e034      	b.n	8004aec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f8e3 	bl	8004c4e <I2C_IsAcknowledgeFailed>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e034      	b.n	8004afc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d028      	beq.n	8004aec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9a:	f7fe fc59 	bl	8003350 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d302      	bcc.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d11d      	bne.n	8004aec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aba:	2b80      	cmp	r3, #128	@ 0x80
 8004abc:	d016      	beq.n	8004aec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e007      	b.n	8004afc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af6:	2b80      	cmp	r3, #128	@ 0x80
 8004af8:	d1c3      	bne.n	8004a82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b10:	e034      	b.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f89b 	bl	8004c4e <I2C_IsAcknowledgeFailed>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e034      	b.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d028      	beq.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7fe fc11 	bl	8003350 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d11d      	bne.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d016      	beq.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	f043 0220 	orr.w	r2, r3, #32
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e007      	b.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d1c3      	bne.n	8004b12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ba0:	e049      	b.n	8004c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d119      	bne.n	8004be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0210 	mvn.w	r2, #16
 8004bb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e030      	b.n	8004c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be4:	f7fe fbb4 	bl	8003350 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d302      	bcc.n	8004bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d11d      	bne.n	8004c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c04:	2b40      	cmp	r3, #64	@ 0x40
 8004c06:	d016      	beq.n	8004c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	f043 0220 	orr.w	r2, r3, #32
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e007      	b.n	8004c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c40:	2b40      	cmp	r3, #64	@ 0x40
 8004c42:	d1ae      	bne.n	8004ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c64:	d11b      	bne.n	8004c9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	f043 0204 	orr.w	r2, r3, #4
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0bf      	b.n	8004e3e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fd fc92 	bl	80025fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004cee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6999      	ldr	r1, [r3, #24]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6899      	ldr	r1, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e48 <HAL_LTDC_Init+0x19c>)
 8004d20:	400b      	ands	r3, r1
 8004d22:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	041b      	lsls	r3, r3, #16
 8004d2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6899      	ldr	r1, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68d9      	ldr	r1, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e48 <HAL_LTDC_Init+0x19c>)
 8004d4e:	400b      	ands	r3, r1
 8004d50:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68d9      	ldr	r1, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1a      	ldr	r2, [r3, #32]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6919      	ldr	r1, [r3, #16]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b33      	ldr	r3, [pc, #204]	@ (8004e48 <HAL_LTDC_Init+0x19c>)
 8004d7c:	400b      	ands	r3, r1
 8004d7e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	041b      	lsls	r3, r3, #16
 8004d86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6919      	ldr	r1, [r3, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6959      	ldr	r1, [r3, #20]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b27      	ldr	r3, [pc, #156]	@ (8004e48 <HAL_LTDC_Init+0x19c>)
 8004daa:	400b      	ands	r3, r1
 8004dac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db2:	041b      	lsls	r3, r3, #16
 8004db4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6959      	ldr	r1, [r3, #20]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004dee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0206 	orr.w	r2, r2, #6
 8004e1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	f000f800 	.word	0xf000f800

08004e4c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e4c:	b5b0      	push	{r4, r5, r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_LTDC_ConfigLayer+0x1a>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e02c      	b.n	8004ec0 <HAL_LTDC_ConfigLayer+0x74>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2202      	movs	r2, #2
 8004e72:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2134      	movs	r1, #52	@ 0x34
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4614      	mov	r4, r2
 8004e8a:	461d      	mov	r5, r3
 8004e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f811 	bl	8004ec8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bdb0      	pop	{r4, r5, r7, pc}

08004ec8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b089      	sub	sp, #36	@ 0x24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee4:	4413      	add	r3, r2
 8004ee6:	041b      	lsls	r3, r3, #16
 8004ee8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	01db      	lsls	r3, r3, #7
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3384      	adds	r3, #132	@ 0x84
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	4611      	mov	r1, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	01d2      	lsls	r2, r2, #7
 8004f04:	440a      	add	r2, r1
 8004f06:	3284      	adds	r2, #132	@ 0x84
 8004f08:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f0c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	0c1b      	lsrs	r3, r3, #16
 8004f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f1e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f20:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4619      	mov	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	01db      	lsls	r3, r3, #7
 8004f2c:	440b      	add	r3, r1
 8004f2e:	3384      	adds	r3, #132	@ 0x84
 8004f30:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f36:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f46:	4413      	add	r3, r2
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	461a      	mov	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	01db      	lsls	r3, r3, #7
 8004f56:	4413      	add	r3, r2
 8004f58:	3384      	adds	r3, #132	@ 0x84
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	4611      	mov	r1, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	01d2      	lsls	r2, r2, #7
 8004f66:	440a      	add	r2, r1
 8004f68:	3284      	adds	r2, #132	@ 0x84
 8004f6a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f6e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f7e:	4413      	add	r3, r2
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	01db      	lsls	r3, r3, #7
 8004f8c:	440b      	add	r3, r1
 8004f8e:	3384      	adds	r3, #132	@ 0x84
 8004f90:	4619      	mov	r1, r3
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	01db      	lsls	r3, r3, #7
 8004fa2:	4413      	add	r3, r2
 8004fa4:	3384      	adds	r3, #132	@ 0x84
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	4611      	mov	r1, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	01d2      	lsls	r2, r2, #7
 8004fb2:	440a      	add	r2, r1
 8004fb4:	3284      	adds	r2, #132	@ 0x84
 8004fb6:	f023 0307 	bic.w	r3, r3, #7
 8004fba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	01db      	lsls	r3, r3, #7
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3384      	adds	r3, #132	@ 0x84
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004fe2:	041b      	lsls	r3, r3, #16
 8004fe4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	061b      	lsls	r3, r3, #24
 8004fec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	01db      	lsls	r3, r3, #7
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3384      	adds	r3, #132	@ 0x84
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	01db      	lsls	r3, r3, #7
 8005008:	4413      	add	r3, r2
 800500a:	3384      	adds	r3, #132	@ 0x84
 800500c:	461a      	mov	r2, r3
 800500e:	2300      	movs	r3, #0
 8005010:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005018:	461a      	mov	r2, r3
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	431a      	orrs	r2, r3
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	431a      	orrs	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4619      	mov	r1, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	01db      	lsls	r3, r3, #7
 800502c:	440b      	add	r3, r1
 800502e:	3384      	adds	r3, #132	@ 0x84
 8005030:	4619      	mov	r1, r3
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	01db      	lsls	r3, r3, #7
 8005042:	4413      	add	r3, r2
 8005044:	3384      	adds	r3, #132	@ 0x84
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	4611      	mov	r1, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	01d2      	lsls	r2, r2, #7
 8005052:	440a      	add	r2, r1
 8005054:	3284      	adds	r2, #132	@ 0x84
 8005056:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800505a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	01db      	lsls	r3, r3, #7
 8005066:	4413      	add	r3, r2
 8005068:	3384      	adds	r3, #132	@ 0x84
 800506a:	461a      	mov	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	01db      	lsls	r3, r3, #7
 800507c:	4413      	add	r3, r2
 800507e:	3384      	adds	r3, #132	@ 0x84
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	4611      	mov	r1, r2
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	01d2      	lsls	r2, r2, #7
 800508c:	440a      	add	r2, r1
 800508e:	3284      	adds	r2, #132	@ 0x84
 8005090:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005094:	f023 0307 	bic.w	r3, r3, #7
 8005098:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	69da      	ldr	r2, [r3, #28]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	6809      	ldr	r1, [r1, #0]
 80050a6:	4608      	mov	r0, r1
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	01c9      	lsls	r1, r1, #7
 80050ac:	4401      	add	r1, r0
 80050ae:	3184      	adds	r1, #132	@ 0x84
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	01db      	lsls	r3, r3, #7
 80050be:	4413      	add	r3, r2
 80050c0:	3384      	adds	r3, #132	@ 0x84
 80050c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	01db      	lsls	r3, r3, #7
 80050ce:	4413      	add	r3, r2
 80050d0:	3384      	adds	r3, #132	@ 0x84
 80050d2:	461a      	mov	r2, r3
 80050d4:	2300      	movs	r3, #0
 80050d6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	01db      	lsls	r3, r3, #7
 80050e2:	4413      	add	r3, r2
 80050e4:	3384      	adds	r3, #132	@ 0x84
 80050e6:	461a      	mov	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80050f6:	2304      	movs	r3, #4
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	e01b      	b.n	8005134 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d102      	bne.n	800510a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005104:	2303      	movs	r3, #3
 8005106:	61fb      	str	r3, [r7, #28]
 8005108:	e014      	b.n	8005134 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b04      	cmp	r3, #4
 8005110:	d00b      	beq.n	800512a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005116:	2b02      	cmp	r3, #2
 8005118:	d007      	beq.n	800512a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800511e:	2b03      	cmp	r3, #3
 8005120:	d003      	beq.n	800512a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005126:	2b07      	cmp	r3, #7
 8005128:	d102      	bne.n	8005130 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800512a:	2302      	movs	r3, #2
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	e001      	b.n	8005134 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005130:	2301      	movs	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	01db      	lsls	r3, r3, #7
 800513e:	4413      	add	r3, r2
 8005140:	3384      	adds	r3, #132	@ 0x84
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	4611      	mov	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	01d2      	lsls	r2, r2, #7
 800514e:	440a      	add	r2, r1
 8005150:	3284      	adds	r2, #132	@ 0x84
 8005152:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005156:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6859      	ldr	r1, [r3, #4]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	1acb      	subs	r3, r1, r3
 800516e:	69f9      	ldr	r1, [r7, #28]
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	6809      	ldr	r1, [r1, #0]
 800517a:	4608      	mov	r0, r1
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	01c9      	lsls	r1, r1, #7
 8005180:	4401      	add	r1, r0
 8005182:	3184      	adds	r1, #132	@ 0x84
 8005184:	4313      	orrs	r3, r2
 8005186:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	01db      	lsls	r3, r3, #7
 8005192:	4413      	add	r3, r2
 8005194:	3384      	adds	r3, #132	@ 0x84
 8005196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	4611      	mov	r1, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	01d2      	lsls	r2, r2, #7
 80051a2:	440a      	add	r2, r1
 80051a4:	3284      	adds	r2, #132	@ 0x84
 80051a6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80051aa:	f023 0307 	bic.w	r3, r3, #7
 80051ae:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	01db      	lsls	r3, r3, #7
 80051ba:	4413      	add	r3, r2
 80051bc:	3384      	adds	r3, #132	@ 0x84
 80051be:	461a      	mov	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	01db      	lsls	r3, r3, #7
 80051d0:	4413      	add	r3, r2
 80051d2:	3384      	adds	r3, #132	@ 0x84
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	4611      	mov	r1, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	01d2      	lsls	r2, r2, #7
 80051e0:	440a      	add	r2, r1
 80051e2:	3284      	adds	r2, #132	@ 0x84
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	6013      	str	r3, [r2, #0]
}
 80051ea:	bf00      	nop
 80051ec:	3724      	adds	r7, #36	@ 0x24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e267      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d075      	beq.n	8005302 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005216:	4b88      	ldr	r3, [pc, #544]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b04      	cmp	r3, #4
 8005220:	d00c      	beq.n	800523c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005222:	4b85      	ldr	r3, [pc, #532]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800522a:	2b08      	cmp	r3, #8
 800522c:	d112      	bne.n	8005254 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800522e:	4b82      	ldr	r3, [pc, #520]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800523a:	d10b      	bne.n	8005254 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800523c:	4b7e      	ldr	r3, [pc, #504]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d05b      	beq.n	8005300 <HAL_RCC_OscConfig+0x108>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d157      	bne.n	8005300 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e242      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525c:	d106      	bne.n	800526c <HAL_RCC_OscConfig+0x74>
 800525e:	4b76      	ldr	r3, [pc, #472]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a75      	ldr	r2, [pc, #468]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e01d      	b.n	80052a8 <HAL_RCC_OscConfig+0xb0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005274:	d10c      	bne.n	8005290 <HAL_RCC_OscConfig+0x98>
 8005276:	4b70      	ldr	r3, [pc, #448]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a6f      	ldr	r2, [pc, #444]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 800527c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	4b6d      	ldr	r3, [pc, #436]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a6c      	ldr	r2, [pc, #432]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	e00b      	b.n	80052a8 <HAL_RCC_OscConfig+0xb0>
 8005290:	4b69      	ldr	r3, [pc, #420]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a68      	ldr	r2, [pc, #416]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	4b66      	ldr	r3, [pc, #408]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a65      	ldr	r2, [pc, #404]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 80052a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d013      	beq.n	80052d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b0:	f7fe f84e 	bl	8003350 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b8:	f7fe f84a 	bl	8003350 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b64      	cmp	r3, #100	@ 0x64
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e207      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0xc0>
 80052d6:	e014      	b.n	8005302 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d8:	f7fe f83a 	bl	8003350 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052e0:	f7fe f836 	bl	8003350 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b64      	cmp	r3, #100	@ 0x64
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e1f3      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f2:	4b51      	ldr	r3, [pc, #324]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0xe8>
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d063      	beq.n	80053d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800530e:	4b4a      	ldr	r3, [pc, #296]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531a:	4b47      	ldr	r3, [pc, #284]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005322:	2b08      	cmp	r3, #8
 8005324:	d11c      	bne.n	8005360 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005326:	4b44      	ldr	r3, [pc, #272]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d116      	bne.n	8005360 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005332:	4b41      	ldr	r3, [pc, #260]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_RCC_OscConfig+0x152>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d001      	beq.n	800534a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e1c7      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534a:	4b3b      	ldr	r3, [pc, #236]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4937      	ldr	r1, [pc, #220]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 800535a:	4313      	orrs	r3, r2
 800535c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800535e:	e03a      	b.n	80053d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d020      	beq.n	80053aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005368:	4b34      	ldr	r3, [pc, #208]	@ (800543c <HAL_RCC_OscConfig+0x244>)
 800536a:	2201      	movs	r2, #1
 800536c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fd ffef 	bl	8003350 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005376:	f7fd ffeb 	bl	8003350 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e1a8      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005388:	4b2b      	ldr	r3, [pc, #172]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005394:	4b28      	ldr	r3, [pc, #160]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4925      	ldr	r1, [pc, #148]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	600b      	str	r3, [r1, #0]
 80053a8:	e015      	b.n	80053d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053aa:	4b24      	ldr	r3, [pc, #144]	@ (800543c <HAL_RCC_OscConfig+0x244>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b0:	f7fd ffce 	bl	8003350 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b8:	f7fd ffca 	bl	8003350 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e187      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d036      	beq.n	8005450 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d016      	beq.n	8005418 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ea:	4b15      	ldr	r3, [pc, #84]	@ (8005440 <HAL_RCC_OscConfig+0x248>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f0:	f7fd ffae 	bl	8003350 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053f8:	f7fd ffaa 	bl	8003350 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e167      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540a:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <HAL_RCC_OscConfig+0x240>)
 800540c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0x200>
 8005416:	e01b      	b.n	8005450 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005418:	4b09      	ldr	r3, [pc, #36]	@ (8005440 <HAL_RCC_OscConfig+0x248>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800541e:	f7fd ff97 	bl	8003350 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005424:	e00e      	b.n	8005444 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005426:	f7fd ff93 	bl	8003350 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d907      	bls.n	8005444 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e150      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
 8005438:	40023800 	.word	0x40023800
 800543c:	42470000 	.word	0x42470000
 8005440:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005444:	4b88      	ldr	r3, [pc, #544]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1ea      	bne.n	8005426 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 8097 	beq.w	800558c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800545e:	2300      	movs	r3, #0
 8005460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005462:	4b81      	ldr	r3, [pc, #516]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10f      	bne.n	800548e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	4b7d      	ldr	r3, [pc, #500]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	4a7c      	ldr	r2, [pc, #496]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800547c:	6413      	str	r3, [r2, #64]	@ 0x40
 800547e:	4b7a      	ldr	r3, [pc, #488]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005486:	60bb      	str	r3, [r7, #8]
 8005488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800548a:	2301      	movs	r3, #1
 800548c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548e:	4b77      	ldr	r3, [pc, #476]	@ (800566c <HAL_RCC_OscConfig+0x474>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d118      	bne.n	80054cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800549a:	4b74      	ldr	r3, [pc, #464]	@ (800566c <HAL_RCC_OscConfig+0x474>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a73      	ldr	r2, [pc, #460]	@ (800566c <HAL_RCC_OscConfig+0x474>)
 80054a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054a6:	f7fd ff53 	bl	8003350 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ae:	f7fd ff4f 	bl	8003350 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e10c      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c0:	4b6a      	ldr	r3, [pc, #424]	@ (800566c <HAL_RCC_OscConfig+0x474>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d106      	bne.n	80054e2 <HAL_RCC_OscConfig+0x2ea>
 80054d4:	4b64      	ldr	r3, [pc, #400]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 80054d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d8:	4a63      	ldr	r2, [pc, #396]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	6713      	str	r3, [r2, #112]	@ 0x70
 80054e0:	e01c      	b.n	800551c <HAL_RCC_OscConfig+0x324>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d10c      	bne.n	8005504 <HAL_RCC_OscConfig+0x30c>
 80054ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 80054ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ee:	4a5e      	ldr	r2, [pc, #376]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 80054f0:	f043 0304 	orr.w	r3, r3, #4
 80054f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fa:	4a5b      	ldr	r2, [pc, #364]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	6713      	str	r3, [r2, #112]	@ 0x70
 8005502:	e00b      	b.n	800551c <HAL_RCC_OscConfig+0x324>
 8005504:	4b58      	ldr	r3, [pc, #352]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005508:	4a57      	ldr	r2, [pc, #348]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005510:	4b55      	ldr	r3, [pc, #340]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005514:	4a54      	ldr	r2, [pc, #336]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005516:	f023 0304 	bic.w	r3, r3, #4
 800551a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d015      	beq.n	8005550 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005524:	f7fd ff14 	bl	8003350 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552a:	e00a      	b.n	8005542 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552c:	f7fd ff10 	bl	8003350 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800553a:	4293      	cmp	r3, r2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e0cb      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005542:	4b49      	ldr	r3, [pc, #292]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0ee      	beq.n	800552c <HAL_RCC_OscConfig+0x334>
 800554e:	e014      	b.n	800557a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005550:	f7fd fefe 	bl	8003350 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005556:	e00a      	b.n	800556e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005558:	f7fd fefa 	bl	8003350 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e0b5      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800556e:	4b3e      	ldr	r3, [pc, #248]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1ee      	bne.n	8005558 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800557a:	7dfb      	ldrb	r3, [r7, #23]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d105      	bne.n	800558c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005580:	4b39      	ldr	r3, [pc, #228]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005584:	4a38      	ldr	r2, [pc, #224]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005586:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800558a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80a1 	beq.w	80056d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005596:	4b34      	ldr	r3, [pc, #208]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 030c 	and.w	r3, r3, #12
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d05c      	beq.n	800565c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d141      	bne.n	800562e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055aa:	4b31      	ldr	r3, [pc, #196]	@ (8005670 <HAL_RCC_OscConfig+0x478>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b0:	f7fd fece 	bl	8003350 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b8:	f7fd feca 	bl	8003350 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e087      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ca:	4b27      	ldr	r3, [pc, #156]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f0      	bne.n	80055b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69da      	ldr	r2, [r3, #28]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e4:	019b      	lsls	r3, r3, #6
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	085b      	lsrs	r3, r3, #1
 80055ee:	3b01      	subs	r3, #1
 80055f0:	041b      	lsls	r3, r3, #16
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	491b      	ldr	r1, [pc, #108]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005600:	4b1b      	ldr	r3, [pc, #108]	@ (8005670 <HAL_RCC_OscConfig+0x478>)
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005606:	f7fd fea3 	bl	8003350 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800560e:	f7fd fe9f 	bl	8003350 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e05c      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005620:	4b11      	ldr	r3, [pc, #68]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_RCC_OscConfig+0x416>
 800562c:	e054      	b.n	80056d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562e:	4b10      	ldr	r3, [pc, #64]	@ (8005670 <HAL_RCC_OscConfig+0x478>)
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005634:	f7fd fe8c 	bl	8003350 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563c:	f7fd fe88 	bl	8003350 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e045      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564e:	4b06      	ldr	r3, [pc, #24]	@ (8005668 <HAL_RCC_OscConfig+0x470>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x444>
 800565a:	e03d      	b.n	80056d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d107      	bne.n	8005674 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e038      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
 8005668:	40023800 	.word	0x40023800
 800566c:	40007000 	.word	0x40007000
 8005670:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005674:	4b1b      	ldr	r3, [pc, #108]	@ (80056e4 <HAL_RCC_OscConfig+0x4ec>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d028      	beq.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800568c:	429a      	cmp	r2, r3
 800568e:	d121      	bne.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800569a:	429a      	cmp	r2, r3
 800569c:	d11a      	bne.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056a4:	4013      	ands	r3, r2
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d111      	bne.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	3b01      	subs	r3, #1
 80056be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d107      	bne.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40023800 	.word	0x40023800

080056e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e0cc      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056fc:	4b68      	ldr	r3, [pc, #416]	@ (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d90c      	bls.n	8005724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570a:	4b65      	ldr	r3, [pc, #404]	@ (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b63      	ldr	r3, [pc, #396]	@ (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d001      	beq.n	8005724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e0b8      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d020      	beq.n	8005772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800573c:	4b59      	ldr	r3, [pc, #356]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	4a58      	ldr	r2, [pc, #352]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005746:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005754:	4b53      	ldr	r3, [pc, #332]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	4a52      	ldr	r2, [pc, #328]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800575e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005760:	4b50      	ldr	r3, [pc, #320]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	494d      	ldr	r1, [pc, #308]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d044      	beq.n	8005808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d107      	bne.n	8005796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005786:	4b47      	ldr	r3, [pc, #284]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d119      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e07f      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d003      	beq.n	80057a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a6:	4b3f      	ldr	r3, [pc, #252]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e06f      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b6:	4b3b      	ldr	r3, [pc, #236]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e067      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057c6:	4b37      	ldr	r3, [pc, #220]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f023 0203 	bic.w	r2, r3, #3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	4934      	ldr	r1, [pc, #208]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057d8:	f7fd fdba 	bl	8003350 <HAL_GetTick>
 80057dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057de:	e00a      	b.n	80057f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e0:	f7fd fdb6 	bl	8003350 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e04f      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f6:	4b2b      	ldr	r3, [pc, #172]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 020c 	and.w	r2, r3, #12
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	429a      	cmp	r2, r3
 8005806:	d1eb      	bne.n	80057e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005808:	4b25      	ldr	r3, [pc, #148]	@ (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d20c      	bcs.n	8005830 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005816:	4b22      	ldr	r3, [pc, #136]	@ (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800581e:	4b20      	ldr	r3, [pc, #128]	@ (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d001      	beq.n	8005830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e032      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800583c:	4b19      	ldr	r3, [pc, #100]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4916      	ldr	r1, [pc, #88]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	4313      	orrs	r3, r2
 800584c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800585a:	4b12      	ldr	r3, [pc, #72]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	490e      	ldr	r1, [pc, #56]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800586e:	f000 f821 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 8005872:	4602      	mov	r2, r0
 8005874:	4b0b      	ldr	r3, [pc, #44]	@ (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	091b      	lsrs	r3, r3, #4
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	490a      	ldr	r1, [pc, #40]	@ (80058a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005880:	5ccb      	ldrb	r3, [r1, r3]
 8005882:	fa22 f303 	lsr.w	r3, r2, r3
 8005886:	4a09      	ldr	r2, [pc, #36]	@ (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 8005888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800588a:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <HAL_RCC_ClockConfig+0x1c8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f7fd fd1a 	bl	80032c8 <HAL_InitTick>

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40023c00 	.word	0x40023c00
 80058a4:	40023800 	.word	0x40023800
 80058a8:	08008a70 	.word	0x08008a70
 80058ac:	20000080 	.word	0x20000080
 80058b0:	20000084 	.word	0x20000084

080058b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058b8:	b094      	sub	sp, #80	@ 0x50
 80058ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058cc:	4b79      	ldr	r3, [pc, #484]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 030c 	and.w	r3, r3, #12
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d00d      	beq.n	80058f4 <HAL_RCC_GetSysClockFreq+0x40>
 80058d8:	2b08      	cmp	r3, #8
 80058da:	f200 80e1 	bhi.w	8005aa0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x34>
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d003      	beq.n	80058ee <HAL_RCC_GetSysClockFreq+0x3a>
 80058e6:	e0db      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058e8:	4b73      	ldr	r3, [pc, #460]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x204>)
 80058ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058ec:	e0db      	b.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058ee:	4b73      	ldr	r3, [pc, #460]	@ (8005abc <HAL_RCC_GetSysClockFreq+0x208>)
 80058f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058f2:	e0d8      	b.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058f4:	4b6f      	ldr	r3, [pc, #444]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058fe:	4b6d      	ldr	r3, [pc, #436]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d063      	beq.n	80059d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	099b      	lsrs	r3, r3, #6
 8005910:	2200      	movs	r2, #0
 8005912:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005914:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591c:	633b      	str	r3, [r7, #48]	@ 0x30
 800591e:	2300      	movs	r3, #0
 8005920:	637b      	str	r3, [r7, #52]	@ 0x34
 8005922:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005926:	4622      	mov	r2, r4
 8005928:	462b      	mov	r3, r5
 800592a:	f04f 0000 	mov.w	r0, #0
 800592e:	f04f 0100 	mov.w	r1, #0
 8005932:	0159      	lsls	r1, r3, #5
 8005934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005938:	0150      	lsls	r0, r2, #5
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4621      	mov	r1, r4
 8005940:	1a51      	subs	r1, r2, r1
 8005942:	6139      	str	r1, [r7, #16]
 8005944:	4629      	mov	r1, r5
 8005946:	eb63 0301 	sbc.w	r3, r3, r1
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005958:	4659      	mov	r1, fp
 800595a:	018b      	lsls	r3, r1, #6
 800595c:	4651      	mov	r1, sl
 800595e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005962:	4651      	mov	r1, sl
 8005964:	018a      	lsls	r2, r1, #6
 8005966:	4651      	mov	r1, sl
 8005968:	ebb2 0801 	subs.w	r8, r2, r1
 800596c:	4659      	mov	r1, fp
 800596e:	eb63 0901 	sbc.w	r9, r3, r1
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800597e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005986:	4690      	mov	r8, r2
 8005988:	4699      	mov	r9, r3
 800598a:	4623      	mov	r3, r4
 800598c:	eb18 0303 	adds.w	r3, r8, r3
 8005990:	60bb      	str	r3, [r7, #8]
 8005992:	462b      	mov	r3, r5
 8005994:	eb49 0303 	adc.w	r3, r9, r3
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059a6:	4629      	mov	r1, r5
 80059a8:	024b      	lsls	r3, r1, #9
 80059aa:	4621      	mov	r1, r4
 80059ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059b0:	4621      	mov	r1, r4
 80059b2:	024a      	lsls	r2, r1, #9
 80059b4:	4610      	mov	r0, r2
 80059b6:	4619      	mov	r1, r3
 80059b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ba:	2200      	movs	r2, #0
 80059bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059c4:	f7fa fc64 	bl	8000290 <__aeabi_uldivmod>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4613      	mov	r3, r2
 80059ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059d0:	e058      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d2:	4b38      	ldr	r3, [pc, #224]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	099b      	lsrs	r3, r3, #6
 80059d8:	2200      	movs	r2, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	4611      	mov	r1, r2
 80059de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	2300      	movs	r3, #0
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059ec:	4642      	mov	r2, r8
 80059ee:	464b      	mov	r3, r9
 80059f0:	f04f 0000 	mov.w	r0, #0
 80059f4:	f04f 0100 	mov.w	r1, #0
 80059f8:	0159      	lsls	r1, r3, #5
 80059fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059fe:	0150      	lsls	r0, r2, #5
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4641      	mov	r1, r8
 8005a06:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a24:	ebb2 040a 	subs.w	r4, r2, sl
 8005a28:	eb63 050b 	sbc.w	r5, r3, fp
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	00eb      	lsls	r3, r5, #3
 8005a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a3a:	00e2      	lsls	r2, r4, #3
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	461d      	mov	r5, r3
 8005a40:	4643      	mov	r3, r8
 8005a42:	18e3      	adds	r3, r4, r3
 8005a44:	603b      	str	r3, [r7, #0]
 8005a46:	464b      	mov	r3, r9
 8005a48:	eb45 0303 	adc.w	r3, r5, r3
 8005a4c:	607b      	str	r3, [r7, #4]
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	028b      	lsls	r3, r1, #10
 8005a5e:	4621      	mov	r1, r4
 8005a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a64:	4621      	mov	r1, r4
 8005a66:	028a      	lsls	r2, r1, #10
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a6e:	2200      	movs	r2, #0
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	61fa      	str	r2, [r7, #28]
 8005a74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a78:	f7fa fc0a 	bl	8000290 <__aeabi_uldivmod>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4613      	mov	r3, r2
 8005a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a84:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	0c1b      	lsrs	r3, r3, #16
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	3301      	adds	r3, #1
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a9e:	e002      	b.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aa0:	4b05      	ldr	r3, [pc, #20]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3750      	adds	r7, #80	@ 0x50
 8005aac:	46bd      	mov	sp, r7
 8005aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	00f42400 	.word	0x00f42400
 8005abc:	007a1200 	.word	0x007a1200

08005ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ac4:	4b03      	ldr	r3, [pc, #12]	@ (8005ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	20000080 	.word	0x20000080

08005ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005adc:	f7ff fff0 	bl	8005ac0 <HAL_RCC_GetHCLKFreq>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	4b05      	ldr	r3, [pc, #20]	@ (8005af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	0a9b      	lsrs	r3, r3, #10
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	4903      	ldr	r1, [pc, #12]	@ (8005afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aee:	5ccb      	ldrb	r3, [r1, r3]
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40023800 	.word	0x40023800
 8005afc:	08008a80 	.word	0x08008a80

08005b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d105      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d075      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b34:	4b91      	ldr	r3, [pc, #580]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b3a:	f7fd fc09 	bl	8003350 <HAL_GetTick>
 8005b3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b40:	e008      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b42:	f7fd fc05 	bl	8003350 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e189      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b54:	4b8a      	ldr	r3, [pc, #552]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f0      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	019a      	lsls	r2, r3, #6
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	071b      	lsls	r3, r3, #28
 8005b78:	4981      	ldr	r1, [pc, #516]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01f      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b8c:	4b7c      	ldr	r3, [pc, #496]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b92:	0f1b      	lsrs	r3, r3, #28
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	019a      	lsls	r2, r3, #6
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	061b      	lsls	r3, r3, #24
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	071b      	lsls	r3, r3, #28
 8005bac:	4974      	ldr	r1, [pc, #464]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bb4:	4b72      	ldr	r3, [pc, #456]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bba:	f023 021f 	bic.w	r2, r3, #31
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	496e      	ldr	r1, [pc, #440]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00d      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	019a      	lsls	r2, r3, #6
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	061b      	lsls	r3, r3, #24
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	071b      	lsls	r3, r3, #28
 8005bec:	4964      	ldr	r1, [pc, #400]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bf4:	4b61      	ldr	r3, [pc, #388]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bfa:	f7fd fba9 	bl	8003350 <HAL_GetTick>
 8005bfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c00:	e008      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c02:	f7fd fba5 	bl	8003350 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e129      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c14:	4b5a      	ldr	r3, [pc, #360]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d079      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c38:	4b52      	ldr	r3, [pc, #328]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c3e:	f7fd fb87 	bl	8003350 <HAL_GetTick>
 8005c42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c44:	e008      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c46:	f7fd fb83 	bl	8003350 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e107      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c58:	4b49      	ldr	r3, [pc, #292]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c64:	d0ef      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d020      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c72:	4b43      	ldr	r3, [pc, #268]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c78:	0f1b      	lsrs	r3, r3, #28
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	019a      	lsls	r2, r3, #6
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	061b      	lsls	r3, r3, #24
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	071b      	lsls	r3, r3, #28
 8005c92:	493b      	ldr	r1, [pc, #236]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c9a:	4b39      	ldr	r3, [pc, #228]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ca0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	4934      	ldr	r1, [pc, #208]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01e      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc6:	0e1b      	lsrs	r3, r3, #24
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	019a      	lsls	r2, r3, #6
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	061b      	lsls	r3, r3, #24
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	071b      	lsls	r3, r3, #28
 8005ce0:	4927      	ldr	r1, [pc, #156]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ce8:	4b25      	ldr	r3, [pc, #148]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	4922      	ldr	r1, [pc, #136]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005cfe:	4b21      	ldr	r3, [pc, #132]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d04:	f7fd fb24 	bl	8003350 <HAL_GetTick>
 8005d08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d0c:	f7fd fb20 	bl	8003350 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e0a4      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d1e:	4b18      	ldr	r3, [pc, #96]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d2a:	d1ef      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 808b 	beq.w	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	4a0f      	ldr	r2, [pc, #60]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d56:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d62:	f7fd faf5 	bl	8003350 <HAL_GetTick>
 8005d66:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d68:	e010      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6a:	f7fd faf1 	bl	8003350 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d909      	bls.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e075      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005d7c:	42470068 	.word	0x42470068
 8005d80:	40023800 	.word	0x40023800
 8005d84:	42470070 	.word	0x42470070
 8005d88:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d8c:	4b38      	ldr	r3, [pc, #224]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0e8      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d98:	4b36      	ldr	r3, [pc, #216]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d02f      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d028      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db6:	4b2f      	ldr	r3, [pc, #188]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dcc:	4a29      	ldr	r2, [pc, #164]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dd2:	4b28      	ldr	r3, [pc, #160]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d114      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dde:	f7fd fab7 	bl	8003350 <HAL_GetTick>
 8005de2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de4:	e00a      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de6:	f7fd fab3 	bl	8003350 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e035      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0ee      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e14:	d10d      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e16:	4b17      	ldr	r3, [pc, #92]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2a:	4912      	ldr	r1, [pc, #72]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	608b      	str	r3, [r1, #8]
 8005e30:	e005      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005e32:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	4a0f      	ldr	r2, [pc, #60]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e38:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e3c:	6093      	str	r3, [r2, #8]
 8005e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e4a:	490a      	ldr	r1, [pc, #40]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005e62:	4b06      	ldr	r3, [pc, #24]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005e64:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40007000 	.word	0x40007000
 8005e74:	40023800 	.word	0x40023800
 8005e78:	42470e40 	.word	0x42470e40
 8005e7c:	424711e0 	.word	0x424711e0

08005e80 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e01c      	b.n	8005ecc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	795b      	ldrb	r3, [r3, #5]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fc fcda 	bl	800285c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0204 	orr.w	r2, r2, #4
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	791b      	ldrb	r3, [r3, #4]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_RNG_GenerateRandomNumber+0x1a>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e044      	b.n	8005f78 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	795b      	ldrb	r3, [r3, #5]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d133      	bne.n	8005f66 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f04:	f7fd fa24 	bl	8003350 <HAL_GetTick>
 8005f08:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f0a:	e018      	b.n	8005f3e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005f0c:	f7fd fa20 	bl	8003350 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d911      	bls.n	8005f3e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d00a      	beq.n	8005f3e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e01c      	b.n	8005f78 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d1df      	bne.n	8005f0c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	715a      	strb	r2, [r3, #5]
 8005f64:	e004      	b.n	8005f70 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	711a      	strb	r2, [r3, #4]

  return status;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	330c      	adds	r3, #12
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff ffa0 	bl	8005ed4 <HAL_RNG_GenerateRandomNumber>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	e000      	b.n	8005fa2 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005fa0:	2300      	movs	r3, #0
  }
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e07b      	b.n	80060b4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d108      	bne.n	8005fd6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fcc:	d009      	beq.n	8005fe2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	61da      	str	r2, [r3, #28]
 8005fd4:	e005      	b.n	8005fe2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fc fc4f 	bl	80028a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006018:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006066:	ea42 0103 	orr.w	r1, r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	f003 0104 	and.w	r1, r3, #4
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006088:	f003 0210 	and.w	r2, r3, #16
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69da      	ldr	r2, [r3, #28]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e01a      	b.n	8006104 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2202      	movs	r2, #2
 80060d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fc fc22 	bl	8002930 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	4613      	mov	r3, r2
 800611a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800611c:	f7fd f918 	bl	8003350 <HAL_GetTick>
 8006120:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	d001      	beq.n	8006136 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006132:	2302      	movs	r3, #2
 8006134:	e12a      	b.n	800638c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_SPI_Transmit+0x36>
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e122      	b.n	800638c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_SPI_Transmit+0x48>
 8006150:	2302      	movs	r3, #2
 8006152:	e11b      	b.n	800638c <HAL_SPI_Transmit+0x280>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2203      	movs	r2, #3
 8006160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	88fa      	ldrh	r2, [r7, #6]
 8006174:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	88fa      	ldrh	r2, [r7, #6]
 800617a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061a2:	d10f      	bne.n	80061c4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ce:	2b40      	cmp	r3, #64	@ 0x40
 80061d0:	d007      	beq.n	80061e2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ea:	d152      	bne.n	8006292 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_SPI_Transmit+0xee>
 80061f4:	8b7b      	ldrh	r3, [r7, #26]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d145      	bne.n	8006286 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fe:	881a      	ldrh	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620a:	1c9a      	adds	r2, r3, #2
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800621e:	e032      	b.n	8006286 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b02      	cmp	r3, #2
 800622c:	d112      	bne.n	8006254 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006232:	881a      	ldrh	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	1c9a      	adds	r2, r3, #2
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006252:	e018      	b.n	8006286 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006254:	f7fd f87c 	bl	8003350 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d803      	bhi.n	800626c <HAL_SPI_Transmit+0x160>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d102      	bne.n	8006272 <HAL_SPI_Transmit+0x166>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e082      	b.n	800638c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1c7      	bne.n	8006220 <HAL_SPI_Transmit+0x114>
 8006290:	e053      	b.n	800633a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_SPI_Transmit+0x194>
 800629a:	8b7b      	ldrh	r3, [r7, #26]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d147      	bne.n	8006330 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	7812      	ldrb	r2, [r2, #0]
 80062ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062c6:	e033      	b.n	8006330 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d113      	bne.n	80062fe <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	7812      	ldrb	r2, [r2, #0]
 80062e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062fc:	e018      	b.n	8006330 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062fe:	f7fd f827 	bl	8003350 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d803      	bhi.n	8006316 <HAL_SPI_Transmit+0x20a>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d102      	bne.n	800631c <HAL_SPI_Transmit+0x210>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d109      	bne.n	8006330 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e02d      	b.n	800638c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1c6      	bne.n	80062c8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f8be 	bl	80064c0 <SPI_EndRxTxTransaction>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2220      	movs	r2, #32
 800634e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800638a:	2300      	movs	r3, #0
  }
}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063a2:	b2db      	uxtb	r3, r3
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	603b      	str	r3, [r7, #0]
 80063bc:	4613      	mov	r3, r2
 80063be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063c0:	f7fc ffc6 	bl	8003350 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	1a9b      	subs	r3, r3, r2
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4413      	add	r3, r2
 80063ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063d0:	f7fc ffbe 	bl	8003350 <HAL_GetTick>
 80063d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063d6:	4b39      	ldr	r3, [pc, #228]	@ (80064bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	015b      	lsls	r3, r3, #5
 80063dc:	0d1b      	lsrs	r3, r3, #20
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	fb02 f303 	mul.w	r3, r2, r3
 80063e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063e6:	e054      	b.n	8006492 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ee:	d050      	beq.n	8006492 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063f0:	f7fc ffae 	bl	8003350 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d902      	bls.n	8006406 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d13d      	bne.n	8006482 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800641e:	d111      	bne.n	8006444 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006428:	d004      	beq.n	8006434 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006432:	d107      	bne.n	8006444 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006442:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800644c:	d10f      	bne.n	800646e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800646c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e017      	b.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	3b01      	subs	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4013      	ands	r3, r2
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	429a      	cmp	r2, r3
 80064a0:	bf0c      	ite	eq
 80064a2:	2301      	moveq	r3, #1
 80064a4:	2300      	movne	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d19b      	bne.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3720      	adds	r7, #32
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000080 	.word	0x20000080

080064c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2201      	movs	r2, #1
 80064d4:	2102      	movs	r1, #2
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff ff6a 	bl	80063b0 <SPI_WaitFlagStateUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e6:	f043 0220 	orr.w	r2, r3, #32
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e032      	b.n	8006558 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006560 <SPI_EndRxTxTransaction+0xa0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006564 <SPI_EndRxTxTransaction+0xa4>)
 80064f8:	fba2 2303 	umull	r2, r3, r2, r3
 80064fc:	0d5b      	lsrs	r3, r3, #21
 80064fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006510:	d112      	bne.n	8006538 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2200      	movs	r2, #0
 800651a:	2180      	movs	r1, #128	@ 0x80
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f7ff ff47 	bl	80063b0 <SPI_WaitFlagStateUntilTimeout>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d016      	beq.n	8006556 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652c:	f043 0220 	orr.w	r2, r3, #32
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e00f      	b.n	8006558 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	3b01      	subs	r3, #1
 8006542:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800654e:	2b80      	cmp	r3, #128	@ 0x80
 8006550:	d0f2      	beq.n	8006538 <SPI_EndRxTxTransaction+0x78>
 8006552:	e000      	b.n	8006556 <SPI_EndRxTxTransaction+0x96>
        break;
 8006554:	bf00      	nop
  }

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20000080 	.word	0x20000080
 8006564:	165e9f81 	.word	0x165e9f81

08006568 <std>:
 8006568:	2300      	movs	r3, #0
 800656a:	b510      	push	{r4, lr}
 800656c:	4604      	mov	r4, r0
 800656e:	e9c0 3300 	strd	r3, r3, [r0]
 8006572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006576:	6083      	str	r3, [r0, #8]
 8006578:	8181      	strh	r1, [r0, #12]
 800657a:	6643      	str	r3, [r0, #100]	@ 0x64
 800657c:	81c2      	strh	r2, [r0, #14]
 800657e:	6183      	str	r3, [r0, #24]
 8006580:	4619      	mov	r1, r3
 8006582:	2208      	movs	r2, #8
 8006584:	305c      	adds	r0, #92	@ 0x5c
 8006586:	f000 fa19 	bl	80069bc <memset>
 800658a:	4b0d      	ldr	r3, [pc, #52]	@ (80065c0 <std+0x58>)
 800658c:	6263      	str	r3, [r4, #36]	@ 0x24
 800658e:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <std+0x5c>)
 8006590:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006592:	4b0d      	ldr	r3, [pc, #52]	@ (80065c8 <std+0x60>)
 8006594:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006596:	4b0d      	ldr	r3, [pc, #52]	@ (80065cc <std+0x64>)
 8006598:	6323      	str	r3, [r4, #48]	@ 0x30
 800659a:	4b0d      	ldr	r3, [pc, #52]	@ (80065d0 <std+0x68>)
 800659c:	6224      	str	r4, [r4, #32]
 800659e:	429c      	cmp	r4, r3
 80065a0:	d006      	beq.n	80065b0 <std+0x48>
 80065a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065a6:	4294      	cmp	r4, r2
 80065a8:	d002      	beq.n	80065b0 <std+0x48>
 80065aa:	33d0      	adds	r3, #208	@ 0xd0
 80065ac:	429c      	cmp	r4, r3
 80065ae:	d105      	bne.n	80065bc <std+0x54>
 80065b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b8:	f000 ba78 	b.w	8006aac <__retarget_lock_init_recursive>
 80065bc:	bd10      	pop	{r4, pc}
 80065be:	bf00      	nop
 80065c0:	0800680d 	.word	0x0800680d
 80065c4:	0800682f 	.word	0x0800682f
 80065c8:	08006867 	.word	0x08006867
 80065cc:	0800688b 	.word	0x0800688b
 80065d0:	20025c28 	.word	0x20025c28

080065d4 <stdio_exit_handler>:
 80065d4:	4a02      	ldr	r2, [pc, #8]	@ (80065e0 <stdio_exit_handler+0xc>)
 80065d6:	4903      	ldr	r1, [pc, #12]	@ (80065e4 <stdio_exit_handler+0x10>)
 80065d8:	4803      	ldr	r0, [pc, #12]	@ (80065e8 <stdio_exit_handler+0x14>)
 80065da:	f000 b869 	b.w	80066b0 <_fwalk_sglue>
 80065de:	bf00      	nop
 80065e0:	2000008c 	.word	0x2000008c
 80065e4:	080075fd 	.word	0x080075fd
 80065e8:	2000009c 	.word	0x2000009c

080065ec <cleanup_stdio>:
 80065ec:	6841      	ldr	r1, [r0, #4]
 80065ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006620 <cleanup_stdio+0x34>)
 80065f0:	4299      	cmp	r1, r3
 80065f2:	b510      	push	{r4, lr}
 80065f4:	4604      	mov	r4, r0
 80065f6:	d001      	beq.n	80065fc <cleanup_stdio+0x10>
 80065f8:	f001 f800 	bl	80075fc <_fflush_r>
 80065fc:	68a1      	ldr	r1, [r4, #8]
 80065fe:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <cleanup_stdio+0x38>)
 8006600:	4299      	cmp	r1, r3
 8006602:	d002      	beq.n	800660a <cleanup_stdio+0x1e>
 8006604:	4620      	mov	r0, r4
 8006606:	f000 fff9 	bl	80075fc <_fflush_r>
 800660a:	68e1      	ldr	r1, [r4, #12]
 800660c:	4b06      	ldr	r3, [pc, #24]	@ (8006628 <cleanup_stdio+0x3c>)
 800660e:	4299      	cmp	r1, r3
 8006610:	d004      	beq.n	800661c <cleanup_stdio+0x30>
 8006612:	4620      	mov	r0, r4
 8006614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006618:	f000 bff0 	b.w	80075fc <_fflush_r>
 800661c:	bd10      	pop	{r4, pc}
 800661e:	bf00      	nop
 8006620:	20025c28 	.word	0x20025c28
 8006624:	20025c90 	.word	0x20025c90
 8006628:	20025cf8 	.word	0x20025cf8

0800662c <global_stdio_init.part.0>:
 800662c:	b510      	push	{r4, lr}
 800662e:	4b0b      	ldr	r3, [pc, #44]	@ (800665c <global_stdio_init.part.0+0x30>)
 8006630:	4c0b      	ldr	r4, [pc, #44]	@ (8006660 <global_stdio_init.part.0+0x34>)
 8006632:	4a0c      	ldr	r2, [pc, #48]	@ (8006664 <global_stdio_init.part.0+0x38>)
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	4620      	mov	r0, r4
 8006638:	2200      	movs	r2, #0
 800663a:	2104      	movs	r1, #4
 800663c:	f7ff ff94 	bl	8006568 <std>
 8006640:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006644:	2201      	movs	r2, #1
 8006646:	2109      	movs	r1, #9
 8006648:	f7ff ff8e 	bl	8006568 <std>
 800664c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006650:	2202      	movs	r2, #2
 8006652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006656:	2112      	movs	r1, #18
 8006658:	f7ff bf86 	b.w	8006568 <std>
 800665c:	20025d60 	.word	0x20025d60
 8006660:	20025c28 	.word	0x20025c28
 8006664:	080065d5 	.word	0x080065d5

08006668 <__sfp_lock_acquire>:
 8006668:	4801      	ldr	r0, [pc, #4]	@ (8006670 <__sfp_lock_acquire+0x8>)
 800666a:	f000 ba20 	b.w	8006aae <__retarget_lock_acquire_recursive>
 800666e:	bf00      	nop
 8006670:	20025d69 	.word	0x20025d69

08006674 <__sfp_lock_release>:
 8006674:	4801      	ldr	r0, [pc, #4]	@ (800667c <__sfp_lock_release+0x8>)
 8006676:	f000 ba1b 	b.w	8006ab0 <__retarget_lock_release_recursive>
 800667a:	bf00      	nop
 800667c:	20025d69 	.word	0x20025d69

08006680 <__sinit>:
 8006680:	b510      	push	{r4, lr}
 8006682:	4604      	mov	r4, r0
 8006684:	f7ff fff0 	bl	8006668 <__sfp_lock_acquire>
 8006688:	6a23      	ldr	r3, [r4, #32]
 800668a:	b11b      	cbz	r3, 8006694 <__sinit+0x14>
 800668c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006690:	f7ff bff0 	b.w	8006674 <__sfp_lock_release>
 8006694:	4b04      	ldr	r3, [pc, #16]	@ (80066a8 <__sinit+0x28>)
 8006696:	6223      	str	r3, [r4, #32]
 8006698:	4b04      	ldr	r3, [pc, #16]	@ (80066ac <__sinit+0x2c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f5      	bne.n	800668c <__sinit+0xc>
 80066a0:	f7ff ffc4 	bl	800662c <global_stdio_init.part.0>
 80066a4:	e7f2      	b.n	800668c <__sinit+0xc>
 80066a6:	bf00      	nop
 80066a8:	080065ed 	.word	0x080065ed
 80066ac:	20025d60 	.word	0x20025d60

080066b0 <_fwalk_sglue>:
 80066b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b4:	4607      	mov	r7, r0
 80066b6:	4688      	mov	r8, r1
 80066b8:	4614      	mov	r4, r2
 80066ba:	2600      	movs	r6, #0
 80066bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066c0:	f1b9 0901 	subs.w	r9, r9, #1
 80066c4:	d505      	bpl.n	80066d2 <_fwalk_sglue+0x22>
 80066c6:	6824      	ldr	r4, [r4, #0]
 80066c8:	2c00      	cmp	r4, #0
 80066ca:	d1f7      	bne.n	80066bc <_fwalk_sglue+0xc>
 80066cc:	4630      	mov	r0, r6
 80066ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d2:	89ab      	ldrh	r3, [r5, #12]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d907      	bls.n	80066e8 <_fwalk_sglue+0x38>
 80066d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066dc:	3301      	adds	r3, #1
 80066de:	d003      	beq.n	80066e8 <_fwalk_sglue+0x38>
 80066e0:	4629      	mov	r1, r5
 80066e2:	4638      	mov	r0, r7
 80066e4:	47c0      	blx	r8
 80066e6:	4306      	orrs	r6, r0
 80066e8:	3568      	adds	r5, #104	@ 0x68
 80066ea:	e7e9      	b.n	80066c0 <_fwalk_sglue+0x10>

080066ec <iprintf>:
 80066ec:	b40f      	push	{r0, r1, r2, r3}
 80066ee:	b507      	push	{r0, r1, r2, lr}
 80066f0:	4906      	ldr	r1, [pc, #24]	@ (800670c <iprintf+0x20>)
 80066f2:	ab04      	add	r3, sp, #16
 80066f4:	6808      	ldr	r0, [r1, #0]
 80066f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066fa:	6881      	ldr	r1, [r0, #8]
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	f000 fc53 	bl	8006fa8 <_vfiprintf_r>
 8006702:	b003      	add	sp, #12
 8006704:	f85d eb04 	ldr.w	lr, [sp], #4
 8006708:	b004      	add	sp, #16
 800670a:	4770      	bx	lr
 800670c:	20000098 	.word	0x20000098

08006710 <_puts_r>:
 8006710:	6a03      	ldr	r3, [r0, #32]
 8006712:	b570      	push	{r4, r5, r6, lr}
 8006714:	6884      	ldr	r4, [r0, #8]
 8006716:	4605      	mov	r5, r0
 8006718:	460e      	mov	r6, r1
 800671a:	b90b      	cbnz	r3, 8006720 <_puts_r+0x10>
 800671c:	f7ff ffb0 	bl	8006680 <__sinit>
 8006720:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006722:	07db      	lsls	r3, r3, #31
 8006724:	d405      	bmi.n	8006732 <_puts_r+0x22>
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	0598      	lsls	r0, r3, #22
 800672a:	d402      	bmi.n	8006732 <_puts_r+0x22>
 800672c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800672e:	f000 f9be 	bl	8006aae <__retarget_lock_acquire_recursive>
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	0719      	lsls	r1, r3, #28
 8006736:	d502      	bpl.n	800673e <_puts_r+0x2e>
 8006738:	6923      	ldr	r3, [r4, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d135      	bne.n	80067aa <_puts_r+0x9a>
 800673e:	4621      	mov	r1, r4
 8006740:	4628      	mov	r0, r5
 8006742:	f000 f8e5 	bl	8006910 <__swsetup_r>
 8006746:	b380      	cbz	r0, 80067aa <_puts_r+0x9a>
 8006748:	f04f 35ff 	mov.w	r5, #4294967295
 800674c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800674e:	07da      	lsls	r2, r3, #31
 8006750:	d405      	bmi.n	800675e <_puts_r+0x4e>
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	059b      	lsls	r3, r3, #22
 8006756:	d402      	bmi.n	800675e <_puts_r+0x4e>
 8006758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800675a:	f000 f9a9 	bl	8006ab0 <__retarget_lock_release_recursive>
 800675e:	4628      	mov	r0, r5
 8006760:	bd70      	pop	{r4, r5, r6, pc}
 8006762:	2b00      	cmp	r3, #0
 8006764:	da04      	bge.n	8006770 <_puts_r+0x60>
 8006766:	69a2      	ldr	r2, [r4, #24]
 8006768:	429a      	cmp	r2, r3
 800676a:	dc17      	bgt.n	800679c <_puts_r+0x8c>
 800676c:	290a      	cmp	r1, #10
 800676e:	d015      	beq.n	800679c <_puts_r+0x8c>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	6022      	str	r2, [r4, #0]
 8006776:	7019      	strb	r1, [r3, #0]
 8006778:	68a3      	ldr	r3, [r4, #8]
 800677a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800677e:	3b01      	subs	r3, #1
 8006780:	60a3      	str	r3, [r4, #8]
 8006782:	2900      	cmp	r1, #0
 8006784:	d1ed      	bne.n	8006762 <_puts_r+0x52>
 8006786:	2b00      	cmp	r3, #0
 8006788:	da11      	bge.n	80067ae <_puts_r+0x9e>
 800678a:	4622      	mov	r2, r4
 800678c:	210a      	movs	r1, #10
 800678e:	4628      	mov	r0, r5
 8006790:	f000 f87f 	bl	8006892 <__swbuf_r>
 8006794:	3001      	adds	r0, #1
 8006796:	d0d7      	beq.n	8006748 <_puts_r+0x38>
 8006798:	250a      	movs	r5, #10
 800679a:	e7d7      	b.n	800674c <_puts_r+0x3c>
 800679c:	4622      	mov	r2, r4
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 f877 	bl	8006892 <__swbuf_r>
 80067a4:	3001      	adds	r0, #1
 80067a6:	d1e7      	bne.n	8006778 <_puts_r+0x68>
 80067a8:	e7ce      	b.n	8006748 <_puts_r+0x38>
 80067aa:	3e01      	subs	r6, #1
 80067ac:	e7e4      	b.n	8006778 <_puts_r+0x68>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	6022      	str	r2, [r4, #0]
 80067b4:	220a      	movs	r2, #10
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	e7ee      	b.n	8006798 <_puts_r+0x88>
	...

080067bc <puts>:
 80067bc:	4b02      	ldr	r3, [pc, #8]	@ (80067c8 <puts+0xc>)
 80067be:	4601      	mov	r1, r0
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f7ff bfa5 	b.w	8006710 <_puts_r>
 80067c6:	bf00      	nop
 80067c8:	20000098 	.word	0x20000098

080067cc <siprintf>:
 80067cc:	b40e      	push	{r1, r2, r3}
 80067ce:	b500      	push	{lr}
 80067d0:	b09c      	sub	sp, #112	@ 0x70
 80067d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80067d4:	9002      	str	r0, [sp, #8]
 80067d6:	9006      	str	r0, [sp, #24]
 80067d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067dc:	4809      	ldr	r0, [pc, #36]	@ (8006804 <siprintf+0x38>)
 80067de:	9107      	str	r1, [sp, #28]
 80067e0:	9104      	str	r1, [sp, #16]
 80067e2:	4909      	ldr	r1, [pc, #36]	@ (8006808 <siprintf+0x3c>)
 80067e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e8:	9105      	str	r1, [sp, #20]
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	9301      	str	r3, [sp, #4]
 80067ee:	a902      	add	r1, sp, #8
 80067f0:	f000 fab4 	bl	8006d5c <_svfiprintf_r>
 80067f4:	9b02      	ldr	r3, [sp, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	b01c      	add	sp, #112	@ 0x70
 80067fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006800:	b003      	add	sp, #12
 8006802:	4770      	bx	lr
 8006804:	20000098 	.word	0x20000098
 8006808:	ffff0208 	.word	0xffff0208

0800680c <__sread>:
 800680c:	b510      	push	{r4, lr}
 800680e:	460c      	mov	r4, r1
 8006810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006814:	f000 f8fc 	bl	8006a10 <_read_r>
 8006818:	2800      	cmp	r0, #0
 800681a:	bfab      	itete	ge
 800681c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800681e:	89a3      	ldrhlt	r3, [r4, #12]
 8006820:	181b      	addge	r3, r3, r0
 8006822:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006826:	bfac      	ite	ge
 8006828:	6563      	strge	r3, [r4, #84]	@ 0x54
 800682a:	81a3      	strhlt	r3, [r4, #12]
 800682c:	bd10      	pop	{r4, pc}

0800682e <__swrite>:
 800682e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006832:	461f      	mov	r7, r3
 8006834:	898b      	ldrh	r3, [r1, #12]
 8006836:	05db      	lsls	r3, r3, #23
 8006838:	4605      	mov	r5, r0
 800683a:	460c      	mov	r4, r1
 800683c:	4616      	mov	r6, r2
 800683e:	d505      	bpl.n	800684c <__swrite+0x1e>
 8006840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006844:	2302      	movs	r3, #2
 8006846:	2200      	movs	r2, #0
 8006848:	f000 f8d0 	bl	80069ec <_lseek_r>
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006852:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006856:	81a3      	strh	r3, [r4, #12]
 8006858:	4632      	mov	r2, r6
 800685a:	463b      	mov	r3, r7
 800685c:	4628      	mov	r0, r5
 800685e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006862:	f000 b8e7 	b.w	8006a34 <_write_r>

08006866 <__sseek>:
 8006866:	b510      	push	{r4, lr}
 8006868:	460c      	mov	r4, r1
 800686a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800686e:	f000 f8bd 	bl	80069ec <_lseek_r>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	bf15      	itete	ne
 8006878:	6560      	strne	r0, [r4, #84]	@ 0x54
 800687a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800687e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006882:	81a3      	strheq	r3, [r4, #12]
 8006884:	bf18      	it	ne
 8006886:	81a3      	strhne	r3, [r4, #12]
 8006888:	bd10      	pop	{r4, pc}

0800688a <__sclose>:
 800688a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688e:	f000 b89d 	b.w	80069cc <_close_r>

08006892 <__swbuf_r>:
 8006892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006894:	460e      	mov	r6, r1
 8006896:	4614      	mov	r4, r2
 8006898:	4605      	mov	r5, r0
 800689a:	b118      	cbz	r0, 80068a4 <__swbuf_r+0x12>
 800689c:	6a03      	ldr	r3, [r0, #32]
 800689e:	b90b      	cbnz	r3, 80068a4 <__swbuf_r+0x12>
 80068a0:	f7ff feee 	bl	8006680 <__sinit>
 80068a4:	69a3      	ldr	r3, [r4, #24]
 80068a6:	60a3      	str	r3, [r4, #8]
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	071a      	lsls	r2, r3, #28
 80068ac:	d501      	bpl.n	80068b2 <__swbuf_r+0x20>
 80068ae:	6923      	ldr	r3, [r4, #16]
 80068b0:	b943      	cbnz	r3, 80068c4 <__swbuf_r+0x32>
 80068b2:	4621      	mov	r1, r4
 80068b4:	4628      	mov	r0, r5
 80068b6:	f000 f82b 	bl	8006910 <__swsetup_r>
 80068ba:	b118      	cbz	r0, 80068c4 <__swbuf_r+0x32>
 80068bc:	f04f 37ff 	mov.w	r7, #4294967295
 80068c0:	4638      	mov	r0, r7
 80068c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	6922      	ldr	r2, [r4, #16]
 80068c8:	1a98      	subs	r0, r3, r2
 80068ca:	6963      	ldr	r3, [r4, #20]
 80068cc:	b2f6      	uxtb	r6, r6
 80068ce:	4283      	cmp	r3, r0
 80068d0:	4637      	mov	r7, r6
 80068d2:	dc05      	bgt.n	80068e0 <__swbuf_r+0x4e>
 80068d4:	4621      	mov	r1, r4
 80068d6:	4628      	mov	r0, r5
 80068d8:	f000 fe90 	bl	80075fc <_fflush_r>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d1ed      	bne.n	80068bc <__swbuf_r+0x2a>
 80068e0:	68a3      	ldr	r3, [r4, #8]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	60a3      	str	r3, [r4, #8]
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	6022      	str	r2, [r4, #0]
 80068ec:	701e      	strb	r6, [r3, #0]
 80068ee:	6962      	ldr	r2, [r4, #20]
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d004      	beq.n	8006900 <__swbuf_r+0x6e>
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	07db      	lsls	r3, r3, #31
 80068fa:	d5e1      	bpl.n	80068c0 <__swbuf_r+0x2e>
 80068fc:	2e0a      	cmp	r6, #10
 80068fe:	d1df      	bne.n	80068c0 <__swbuf_r+0x2e>
 8006900:	4621      	mov	r1, r4
 8006902:	4628      	mov	r0, r5
 8006904:	f000 fe7a 	bl	80075fc <_fflush_r>
 8006908:	2800      	cmp	r0, #0
 800690a:	d0d9      	beq.n	80068c0 <__swbuf_r+0x2e>
 800690c:	e7d6      	b.n	80068bc <__swbuf_r+0x2a>
	...

08006910 <__swsetup_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4b29      	ldr	r3, [pc, #164]	@ (80069b8 <__swsetup_r+0xa8>)
 8006914:	4605      	mov	r5, r0
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	460c      	mov	r4, r1
 800691a:	b118      	cbz	r0, 8006924 <__swsetup_r+0x14>
 800691c:	6a03      	ldr	r3, [r0, #32]
 800691e:	b90b      	cbnz	r3, 8006924 <__swsetup_r+0x14>
 8006920:	f7ff feae 	bl	8006680 <__sinit>
 8006924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006928:	0719      	lsls	r1, r3, #28
 800692a:	d422      	bmi.n	8006972 <__swsetup_r+0x62>
 800692c:	06da      	lsls	r2, r3, #27
 800692e:	d407      	bmi.n	8006940 <__swsetup_r+0x30>
 8006930:	2209      	movs	r2, #9
 8006932:	602a      	str	r2, [r5, #0]
 8006934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	f04f 30ff 	mov.w	r0, #4294967295
 800693e:	e033      	b.n	80069a8 <__swsetup_r+0x98>
 8006940:	0758      	lsls	r0, r3, #29
 8006942:	d512      	bpl.n	800696a <__swsetup_r+0x5a>
 8006944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006946:	b141      	cbz	r1, 800695a <__swsetup_r+0x4a>
 8006948:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800694c:	4299      	cmp	r1, r3
 800694e:	d002      	beq.n	8006956 <__swsetup_r+0x46>
 8006950:	4628      	mov	r0, r5
 8006952:	f000 f8af 	bl	8006ab4 <_free_r>
 8006956:	2300      	movs	r3, #0
 8006958:	6363      	str	r3, [r4, #52]	@ 0x34
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006960:	81a3      	strh	r3, [r4, #12]
 8006962:	2300      	movs	r3, #0
 8006964:	6063      	str	r3, [r4, #4]
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	f043 0308 	orr.w	r3, r3, #8
 8006970:	81a3      	strh	r3, [r4, #12]
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	b94b      	cbnz	r3, 800698a <__swsetup_r+0x7a>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800697c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006980:	d003      	beq.n	800698a <__swsetup_r+0x7a>
 8006982:	4621      	mov	r1, r4
 8006984:	4628      	mov	r0, r5
 8006986:	f000 fe87 	bl	8007698 <__smakebuf_r>
 800698a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800698e:	f013 0201 	ands.w	r2, r3, #1
 8006992:	d00a      	beq.n	80069aa <__swsetup_r+0x9a>
 8006994:	2200      	movs	r2, #0
 8006996:	60a2      	str	r2, [r4, #8]
 8006998:	6962      	ldr	r2, [r4, #20]
 800699a:	4252      	negs	r2, r2
 800699c:	61a2      	str	r2, [r4, #24]
 800699e:	6922      	ldr	r2, [r4, #16]
 80069a0:	b942      	cbnz	r2, 80069b4 <__swsetup_r+0xa4>
 80069a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069a6:	d1c5      	bne.n	8006934 <__swsetup_r+0x24>
 80069a8:	bd38      	pop	{r3, r4, r5, pc}
 80069aa:	0799      	lsls	r1, r3, #30
 80069ac:	bf58      	it	pl
 80069ae:	6962      	ldrpl	r2, [r4, #20]
 80069b0:	60a2      	str	r2, [r4, #8]
 80069b2:	e7f4      	b.n	800699e <__swsetup_r+0x8e>
 80069b4:	2000      	movs	r0, #0
 80069b6:	e7f7      	b.n	80069a8 <__swsetup_r+0x98>
 80069b8:	20000098 	.word	0x20000098

080069bc <memset>:
 80069bc:	4402      	add	r2, r0
 80069be:	4603      	mov	r3, r0
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d100      	bne.n	80069c6 <memset+0xa>
 80069c4:	4770      	bx	lr
 80069c6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ca:	e7f9      	b.n	80069c0 <memset+0x4>

080069cc <_close_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4d06      	ldr	r5, [pc, #24]	@ (80069e8 <_close_r+0x1c>)
 80069d0:	2300      	movs	r3, #0
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	f7fc fbae 	bl	8003138 <_close>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_close_r+0x1a>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_close_r+0x1a>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	20025d64 	.word	0x20025d64

080069ec <_lseek_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4d07      	ldr	r5, [pc, #28]	@ (8006a0c <_lseek_r+0x20>)
 80069f0:	4604      	mov	r4, r0
 80069f2:	4608      	mov	r0, r1
 80069f4:	4611      	mov	r1, r2
 80069f6:	2200      	movs	r2, #0
 80069f8:	602a      	str	r2, [r5, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f7fc fbc3 	bl	8003186 <_lseek>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_lseek_r+0x1e>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_lseek_r+0x1e>
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	20025d64 	.word	0x20025d64

08006a10 <_read_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4d07      	ldr	r5, [pc, #28]	@ (8006a30 <_read_r+0x20>)
 8006a14:	4604      	mov	r4, r0
 8006a16:	4608      	mov	r0, r1
 8006a18:	4611      	mov	r1, r2
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	602a      	str	r2, [r5, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f7fc fb51 	bl	80030c6 <_read>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d102      	bne.n	8006a2e <_read_r+0x1e>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	b103      	cbz	r3, 8006a2e <_read_r+0x1e>
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	bd38      	pop	{r3, r4, r5, pc}
 8006a30:	20025d64 	.word	0x20025d64

08006a34 <_write_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d07      	ldr	r5, [pc, #28]	@ (8006a54 <_write_r+0x20>)
 8006a38:	4604      	mov	r4, r0
 8006a3a:	4608      	mov	r0, r1
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	2200      	movs	r2, #0
 8006a40:	602a      	str	r2, [r5, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f7fc fb5c 	bl	8003100 <_write>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_write_r+0x1e>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_write_r+0x1e>
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	20025d64 	.word	0x20025d64

08006a58 <__errno>:
 8006a58:	4b01      	ldr	r3, [pc, #4]	@ (8006a60 <__errno+0x8>)
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	20000098 	.word	0x20000098

08006a64 <__libc_init_array>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	4d0d      	ldr	r5, [pc, #52]	@ (8006a9c <__libc_init_array+0x38>)
 8006a68:	4c0d      	ldr	r4, [pc, #52]	@ (8006aa0 <__libc_init_array+0x3c>)
 8006a6a:	1b64      	subs	r4, r4, r5
 8006a6c:	10a4      	asrs	r4, r4, #2
 8006a6e:	2600      	movs	r6, #0
 8006a70:	42a6      	cmp	r6, r4
 8006a72:	d109      	bne.n	8006a88 <__libc_init_array+0x24>
 8006a74:	4d0b      	ldr	r5, [pc, #44]	@ (8006aa4 <__libc_init_array+0x40>)
 8006a76:	4c0c      	ldr	r4, [pc, #48]	@ (8006aa8 <__libc_init_array+0x44>)
 8006a78:	f000 feda 	bl	8007830 <_init>
 8006a7c:	1b64      	subs	r4, r4, r5
 8006a7e:	10a4      	asrs	r4, r4, #2
 8006a80:	2600      	movs	r6, #0
 8006a82:	42a6      	cmp	r6, r4
 8006a84:	d105      	bne.n	8006a92 <__libc_init_array+0x2e>
 8006a86:	bd70      	pop	{r4, r5, r6, pc}
 8006a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8c:	4798      	blx	r3
 8006a8e:	3601      	adds	r6, #1
 8006a90:	e7ee      	b.n	8006a70 <__libc_init_array+0xc>
 8006a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a96:	4798      	blx	r3
 8006a98:	3601      	adds	r6, #1
 8006a9a:	e7f2      	b.n	8006a82 <__libc_init_array+0x1e>
 8006a9c:	08008ac4 	.word	0x08008ac4
 8006aa0:	08008ac4 	.word	0x08008ac4
 8006aa4:	08008ac4 	.word	0x08008ac4
 8006aa8:	08008ac8 	.word	0x08008ac8

08006aac <__retarget_lock_init_recursive>:
 8006aac:	4770      	bx	lr

08006aae <__retarget_lock_acquire_recursive>:
 8006aae:	4770      	bx	lr

08006ab0 <__retarget_lock_release_recursive>:
 8006ab0:	4770      	bx	lr
	...

08006ab4 <_free_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	d041      	beq.n	8006b40 <_free_r+0x8c>
 8006abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac0:	1f0c      	subs	r4, r1, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bfb8      	it	lt
 8006ac6:	18e4      	addlt	r4, r4, r3
 8006ac8:	f000 f8e0 	bl	8006c8c <__malloc_lock>
 8006acc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b44 <_free_r+0x90>)
 8006ace:	6813      	ldr	r3, [r2, #0]
 8006ad0:	b933      	cbnz	r3, 8006ae0 <_free_r+0x2c>
 8006ad2:	6063      	str	r3, [r4, #4]
 8006ad4:	6014      	str	r4, [r2, #0]
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006adc:	f000 b8dc 	b.w	8006c98 <__malloc_unlock>
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	d908      	bls.n	8006af6 <_free_r+0x42>
 8006ae4:	6820      	ldr	r0, [r4, #0]
 8006ae6:	1821      	adds	r1, r4, r0
 8006ae8:	428b      	cmp	r3, r1
 8006aea:	bf01      	itttt	eq
 8006aec:	6819      	ldreq	r1, [r3, #0]
 8006aee:	685b      	ldreq	r3, [r3, #4]
 8006af0:	1809      	addeq	r1, r1, r0
 8006af2:	6021      	streq	r1, [r4, #0]
 8006af4:	e7ed      	b.n	8006ad2 <_free_r+0x1e>
 8006af6:	461a      	mov	r2, r3
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	b10b      	cbz	r3, 8006b00 <_free_r+0x4c>
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	d9fa      	bls.n	8006af6 <_free_r+0x42>
 8006b00:	6811      	ldr	r1, [r2, #0]
 8006b02:	1850      	adds	r0, r2, r1
 8006b04:	42a0      	cmp	r0, r4
 8006b06:	d10b      	bne.n	8006b20 <_free_r+0x6c>
 8006b08:	6820      	ldr	r0, [r4, #0]
 8006b0a:	4401      	add	r1, r0
 8006b0c:	1850      	adds	r0, r2, r1
 8006b0e:	4283      	cmp	r3, r0
 8006b10:	6011      	str	r1, [r2, #0]
 8006b12:	d1e0      	bne.n	8006ad6 <_free_r+0x22>
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	6053      	str	r3, [r2, #4]
 8006b1a:	4408      	add	r0, r1
 8006b1c:	6010      	str	r0, [r2, #0]
 8006b1e:	e7da      	b.n	8006ad6 <_free_r+0x22>
 8006b20:	d902      	bls.n	8006b28 <_free_r+0x74>
 8006b22:	230c      	movs	r3, #12
 8006b24:	602b      	str	r3, [r5, #0]
 8006b26:	e7d6      	b.n	8006ad6 <_free_r+0x22>
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	1821      	adds	r1, r4, r0
 8006b2c:	428b      	cmp	r3, r1
 8006b2e:	bf04      	itt	eq
 8006b30:	6819      	ldreq	r1, [r3, #0]
 8006b32:	685b      	ldreq	r3, [r3, #4]
 8006b34:	6063      	str	r3, [r4, #4]
 8006b36:	bf04      	itt	eq
 8006b38:	1809      	addeq	r1, r1, r0
 8006b3a:	6021      	streq	r1, [r4, #0]
 8006b3c:	6054      	str	r4, [r2, #4]
 8006b3e:	e7ca      	b.n	8006ad6 <_free_r+0x22>
 8006b40:	bd38      	pop	{r3, r4, r5, pc}
 8006b42:	bf00      	nop
 8006b44:	20025d70 	.word	0x20025d70

08006b48 <sbrk_aligned>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	4e0f      	ldr	r6, [pc, #60]	@ (8006b88 <sbrk_aligned+0x40>)
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	6831      	ldr	r1, [r6, #0]
 8006b50:	4605      	mov	r5, r0
 8006b52:	b911      	cbnz	r1, 8006b5a <sbrk_aligned+0x12>
 8006b54:	f000 fe18 	bl	8007788 <_sbrk_r>
 8006b58:	6030      	str	r0, [r6, #0]
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f000 fe13 	bl	8007788 <_sbrk_r>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	d103      	bne.n	8006b6e <sbrk_aligned+0x26>
 8006b66:	f04f 34ff 	mov.w	r4, #4294967295
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	bd70      	pop	{r4, r5, r6, pc}
 8006b6e:	1cc4      	adds	r4, r0, #3
 8006b70:	f024 0403 	bic.w	r4, r4, #3
 8006b74:	42a0      	cmp	r0, r4
 8006b76:	d0f8      	beq.n	8006b6a <sbrk_aligned+0x22>
 8006b78:	1a21      	subs	r1, r4, r0
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 fe04 	bl	8007788 <_sbrk_r>
 8006b80:	3001      	adds	r0, #1
 8006b82:	d1f2      	bne.n	8006b6a <sbrk_aligned+0x22>
 8006b84:	e7ef      	b.n	8006b66 <sbrk_aligned+0x1e>
 8006b86:	bf00      	nop
 8006b88:	20025d6c 	.word	0x20025d6c

08006b8c <_malloc_r>:
 8006b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b90:	1ccd      	adds	r5, r1, #3
 8006b92:	f025 0503 	bic.w	r5, r5, #3
 8006b96:	3508      	adds	r5, #8
 8006b98:	2d0c      	cmp	r5, #12
 8006b9a:	bf38      	it	cc
 8006b9c:	250c      	movcc	r5, #12
 8006b9e:	2d00      	cmp	r5, #0
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	db01      	blt.n	8006ba8 <_malloc_r+0x1c>
 8006ba4:	42a9      	cmp	r1, r5
 8006ba6:	d904      	bls.n	8006bb2 <_malloc_r+0x26>
 8006ba8:	230c      	movs	r3, #12
 8006baa:	6033      	str	r3, [r6, #0]
 8006bac:	2000      	movs	r0, #0
 8006bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c88 <_malloc_r+0xfc>
 8006bb6:	f000 f869 	bl	8006c8c <__malloc_lock>
 8006bba:	f8d8 3000 	ldr.w	r3, [r8]
 8006bbe:	461c      	mov	r4, r3
 8006bc0:	bb44      	cbnz	r4, 8006c14 <_malloc_r+0x88>
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f7ff ffbf 	bl	8006b48 <sbrk_aligned>
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	4604      	mov	r4, r0
 8006bce:	d158      	bne.n	8006c82 <_malloc_r+0xf6>
 8006bd0:	f8d8 4000 	ldr.w	r4, [r8]
 8006bd4:	4627      	mov	r7, r4
 8006bd6:	2f00      	cmp	r7, #0
 8006bd8:	d143      	bne.n	8006c62 <_malloc_r+0xd6>
 8006bda:	2c00      	cmp	r4, #0
 8006bdc:	d04b      	beq.n	8006c76 <_malloc_r+0xea>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	4639      	mov	r1, r7
 8006be2:	4630      	mov	r0, r6
 8006be4:	eb04 0903 	add.w	r9, r4, r3
 8006be8:	f000 fdce 	bl	8007788 <_sbrk_r>
 8006bec:	4581      	cmp	r9, r0
 8006bee:	d142      	bne.n	8006c76 <_malloc_r+0xea>
 8006bf0:	6821      	ldr	r1, [r4, #0]
 8006bf2:	1a6d      	subs	r5, r5, r1
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f7ff ffa6 	bl	8006b48 <sbrk_aligned>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d03a      	beq.n	8006c76 <_malloc_r+0xea>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	442b      	add	r3, r5
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	f8d8 3000 	ldr.w	r3, [r8]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	bb62      	cbnz	r2, 8006c68 <_malloc_r+0xdc>
 8006c0e:	f8c8 7000 	str.w	r7, [r8]
 8006c12:	e00f      	b.n	8006c34 <_malloc_r+0xa8>
 8006c14:	6822      	ldr	r2, [r4, #0]
 8006c16:	1b52      	subs	r2, r2, r5
 8006c18:	d420      	bmi.n	8006c5c <_malloc_r+0xd0>
 8006c1a:	2a0b      	cmp	r2, #11
 8006c1c:	d917      	bls.n	8006c4e <_malloc_r+0xc2>
 8006c1e:	1961      	adds	r1, r4, r5
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	6025      	str	r5, [r4, #0]
 8006c24:	bf18      	it	ne
 8006c26:	6059      	strne	r1, [r3, #4]
 8006c28:	6863      	ldr	r3, [r4, #4]
 8006c2a:	bf08      	it	eq
 8006c2c:	f8c8 1000 	streq.w	r1, [r8]
 8006c30:	5162      	str	r2, [r4, r5]
 8006c32:	604b      	str	r3, [r1, #4]
 8006c34:	4630      	mov	r0, r6
 8006c36:	f000 f82f 	bl	8006c98 <__malloc_unlock>
 8006c3a:	f104 000b 	add.w	r0, r4, #11
 8006c3e:	1d23      	adds	r3, r4, #4
 8006c40:	f020 0007 	bic.w	r0, r0, #7
 8006c44:	1ac2      	subs	r2, r0, r3
 8006c46:	bf1c      	itt	ne
 8006c48:	1a1b      	subne	r3, r3, r0
 8006c4a:	50a3      	strne	r3, [r4, r2]
 8006c4c:	e7af      	b.n	8006bae <_malloc_r+0x22>
 8006c4e:	6862      	ldr	r2, [r4, #4]
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	bf0c      	ite	eq
 8006c54:	f8c8 2000 	streq.w	r2, [r8]
 8006c58:	605a      	strne	r2, [r3, #4]
 8006c5a:	e7eb      	b.n	8006c34 <_malloc_r+0xa8>
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	6864      	ldr	r4, [r4, #4]
 8006c60:	e7ae      	b.n	8006bc0 <_malloc_r+0x34>
 8006c62:	463c      	mov	r4, r7
 8006c64:	687f      	ldr	r7, [r7, #4]
 8006c66:	e7b6      	b.n	8006bd6 <_malloc_r+0x4a>
 8006c68:	461a      	mov	r2, r3
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	d1fb      	bne.n	8006c68 <_malloc_r+0xdc>
 8006c70:	2300      	movs	r3, #0
 8006c72:	6053      	str	r3, [r2, #4]
 8006c74:	e7de      	b.n	8006c34 <_malloc_r+0xa8>
 8006c76:	230c      	movs	r3, #12
 8006c78:	6033      	str	r3, [r6, #0]
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	f000 f80c 	bl	8006c98 <__malloc_unlock>
 8006c80:	e794      	b.n	8006bac <_malloc_r+0x20>
 8006c82:	6005      	str	r5, [r0, #0]
 8006c84:	e7d6      	b.n	8006c34 <_malloc_r+0xa8>
 8006c86:	bf00      	nop
 8006c88:	20025d70 	.word	0x20025d70

08006c8c <__malloc_lock>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	@ (8006c94 <__malloc_lock+0x8>)
 8006c8e:	f7ff bf0e 	b.w	8006aae <__retarget_lock_acquire_recursive>
 8006c92:	bf00      	nop
 8006c94:	20025d68 	.word	0x20025d68

08006c98 <__malloc_unlock>:
 8006c98:	4801      	ldr	r0, [pc, #4]	@ (8006ca0 <__malloc_unlock+0x8>)
 8006c9a:	f7ff bf09 	b.w	8006ab0 <__retarget_lock_release_recursive>
 8006c9e:	bf00      	nop
 8006ca0:	20025d68 	.word	0x20025d68

08006ca4 <__ssputs_r>:
 8006ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	688e      	ldr	r6, [r1, #8]
 8006caa:	461f      	mov	r7, r3
 8006cac:	42be      	cmp	r6, r7
 8006cae:	680b      	ldr	r3, [r1, #0]
 8006cb0:	4682      	mov	sl, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	4690      	mov	r8, r2
 8006cb6:	d82d      	bhi.n	8006d14 <__ssputs_r+0x70>
 8006cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006cc0:	d026      	beq.n	8006d10 <__ssputs_r+0x6c>
 8006cc2:	6965      	ldr	r5, [r4, #20]
 8006cc4:	6909      	ldr	r1, [r1, #16]
 8006cc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cca:	eba3 0901 	sub.w	r9, r3, r1
 8006cce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cd2:	1c7b      	adds	r3, r7, #1
 8006cd4:	444b      	add	r3, r9
 8006cd6:	106d      	asrs	r5, r5, #1
 8006cd8:	429d      	cmp	r5, r3
 8006cda:	bf38      	it	cc
 8006cdc:	461d      	movcc	r5, r3
 8006cde:	0553      	lsls	r3, r2, #21
 8006ce0:	d527      	bpl.n	8006d32 <__ssputs_r+0x8e>
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	f7ff ff52 	bl	8006b8c <_malloc_r>
 8006ce8:	4606      	mov	r6, r0
 8006cea:	b360      	cbz	r0, 8006d46 <__ssputs_r+0xa2>
 8006cec:	6921      	ldr	r1, [r4, #16]
 8006cee:	464a      	mov	r2, r9
 8006cf0:	f000 fd5a 	bl	80077a8 <memcpy>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	6126      	str	r6, [r4, #16]
 8006d02:	6165      	str	r5, [r4, #20]
 8006d04:	444e      	add	r6, r9
 8006d06:	eba5 0509 	sub.w	r5, r5, r9
 8006d0a:	6026      	str	r6, [r4, #0]
 8006d0c:	60a5      	str	r5, [r4, #8]
 8006d0e:	463e      	mov	r6, r7
 8006d10:	42be      	cmp	r6, r7
 8006d12:	d900      	bls.n	8006d16 <__ssputs_r+0x72>
 8006d14:	463e      	mov	r6, r7
 8006d16:	6820      	ldr	r0, [r4, #0]
 8006d18:	4632      	mov	r2, r6
 8006d1a:	4641      	mov	r1, r8
 8006d1c:	f000 fcf8 	bl	8007710 <memmove>
 8006d20:	68a3      	ldr	r3, [r4, #8]
 8006d22:	1b9b      	subs	r3, r3, r6
 8006d24:	60a3      	str	r3, [r4, #8]
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	4433      	add	r3, r6
 8006d2a:	6023      	str	r3, [r4, #0]
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d32:	462a      	mov	r2, r5
 8006d34:	f000 fd46 	bl	80077c4 <_realloc_r>
 8006d38:	4606      	mov	r6, r0
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d1e0      	bne.n	8006d00 <__ssputs_r+0x5c>
 8006d3e:	6921      	ldr	r1, [r4, #16]
 8006d40:	4650      	mov	r0, sl
 8006d42:	f7ff feb7 	bl	8006ab4 <_free_r>
 8006d46:	230c      	movs	r3, #12
 8006d48:	f8ca 3000 	str.w	r3, [sl]
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d52:	81a3      	strh	r3, [r4, #12]
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295
 8006d58:	e7e9      	b.n	8006d2e <__ssputs_r+0x8a>
	...

08006d5c <_svfiprintf_r>:
 8006d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d60:	4698      	mov	r8, r3
 8006d62:	898b      	ldrh	r3, [r1, #12]
 8006d64:	061b      	lsls	r3, r3, #24
 8006d66:	b09d      	sub	sp, #116	@ 0x74
 8006d68:	4607      	mov	r7, r0
 8006d6a:	460d      	mov	r5, r1
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	d510      	bpl.n	8006d92 <_svfiprintf_r+0x36>
 8006d70:	690b      	ldr	r3, [r1, #16]
 8006d72:	b973      	cbnz	r3, 8006d92 <_svfiprintf_r+0x36>
 8006d74:	2140      	movs	r1, #64	@ 0x40
 8006d76:	f7ff ff09 	bl	8006b8c <_malloc_r>
 8006d7a:	6028      	str	r0, [r5, #0]
 8006d7c:	6128      	str	r0, [r5, #16]
 8006d7e:	b930      	cbnz	r0, 8006d8e <_svfiprintf_r+0x32>
 8006d80:	230c      	movs	r3, #12
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	b01d      	add	sp, #116	@ 0x74
 8006d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8e:	2340      	movs	r3, #64	@ 0x40
 8006d90:	616b      	str	r3, [r5, #20]
 8006d92:	2300      	movs	r3, #0
 8006d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d96:	2320      	movs	r3, #32
 8006d98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006da0:	2330      	movs	r3, #48	@ 0x30
 8006da2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f40 <_svfiprintf_r+0x1e4>
 8006da6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006daa:	f04f 0901 	mov.w	r9, #1
 8006dae:	4623      	mov	r3, r4
 8006db0:	469a      	mov	sl, r3
 8006db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006db6:	b10a      	cbz	r2, 8006dbc <_svfiprintf_r+0x60>
 8006db8:	2a25      	cmp	r2, #37	@ 0x25
 8006dba:	d1f9      	bne.n	8006db0 <_svfiprintf_r+0x54>
 8006dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8006dc0:	d00b      	beq.n	8006dda <_svfiprintf_r+0x7e>
 8006dc2:	465b      	mov	r3, fp
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f7ff ff6b 	bl	8006ca4 <__ssputs_r>
 8006dce:	3001      	adds	r0, #1
 8006dd0:	f000 80a7 	beq.w	8006f22 <_svfiprintf_r+0x1c6>
 8006dd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dd6:	445a      	add	r2, fp
 8006dd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dda:	f89a 3000 	ldrb.w	r3, [sl]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 809f 	beq.w	8006f22 <_svfiprintf_r+0x1c6>
 8006de4:	2300      	movs	r3, #0
 8006de6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dee:	f10a 0a01 	add.w	sl, sl, #1
 8006df2:	9304      	str	r3, [sp, #16]
 8006df4:	9307      	str	r3, [sp, #28]
 8006df6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006dfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dfc:	4654      	mov	r4, sl
 8006dfe:	2205      	movs	r2, #5
 8006e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e04:	484e      	ldr	r0, [pc, #312]	@ (8006f40 <_svfiprintf_r+0x1e4>)
 8006e06:	f7f9 f9f3 	bl	80001f0 <memchr>
 8006e0a:	9a04      	ldr	r2, [sp, #16]
 8006e0c:	b9d8      	cbnz	r0, 8006e46 <_svfiprintf_r+0xea>
 8006e0e:	06d0      	lsls	r0, r2, #27
 8006e10:	bf44      	itt	mi
 8006e12:	2320      	movmi	r3, #32
 8006e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e18:	0711      	lsls	r1, r2, #28
 8006e1a:	bf44      	itt	mi
 8006e1c:	232b      	movmi	r3, #43	@ 0x2b
 8006e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e22:	f89a 3000 	ldrb.w	r3, [sl]
 8006e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e28:	d015      	beq.n	8006e56 <_svfiprintf_r+0xfa>
 8006e2a:	9a07      	ldr	r2, [sp, #28]
 8006e2c:	4654      	mov	r4, sl
 8006e2e:	2000      	movs	r0, #0
 8006e30:	f04f 0c0a 	mov.w	ip, #10
 8006e34:	4621      	mov	r1, r4
 8006e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e3a:	3b30      	subs	r3, #48	@ 0x30
 8006e3c:	2b09      	cmp	r3, #9
 8006e3e:	d94b      	bls.n	8006ed8 <_svfiprintf_r+0x17c>
 8006e40:	b1b0      	cbz	r0, 8006e70 <_svfiprintf_r+0x114>
 8006e42:	9207      	str	r2, [sp, #28]
 8006e44:	e014      	b.n	8006e70 <_svfiprintf_r+0x114>
 8006e46:	eba0 0308 	sub.w	r3, r0, r8
 8006e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	9304      	str	r3, [sp, #16]
 8006e52:	46a2      	mov	sl, r4
 8006e54:	e7d2      	b.n	8006dfc <_svfiprintf_r+0xa0>
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	1d19      	adds	r1, r3, #4
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	9103      	str	r1, [sp, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bfbb      	ittet	lt
 8006e62:	425b      	neglt	r3, r3
 8006e64:	f042 0202 	orrlt.w	r2, r2, #2
 8006e68:	9307      	strge	r3, [sp, #28]
 8006e6a:	9307      	strlt	r3, [sp, #28]
 8006e6c:	bfb8      	it	lt
 8006e6e:	9204      	strlt	r2, [sp, #16]
 8006e70:	7823      	ldrb	r3, [r4, #0]
 8006e72:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e74:	d10a      	bne.n	8006e8c <_svfiprintf_r+0x130>
 8006e76:	7863      	ldrb	r3, [r4, #1]
 8006e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e7a:	d132      	bne.n	8006ee2 <_svfiprintf_r+0x186>
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	1d1a      	adds	r2, r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	9203      	str	r2, [sp, #12]
 8006e84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e88:	3402      	adds	r4, #2
 8006e8a:	9305      	str	r3, [sp, #20]
 8006e8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f50 <_svfiprintf_r+0x1f4>
 8006e90:	7821      	ldrb	r1, [r4, #0]
 8006e92:	2203      	movs	r2, #3
 8006e94:	4650      	mov	r0, sl
 8006e96:	f7f9 f9ab 	bl	80001f0 <memchr>
 8006e9a:	b138      	cbz	r0, 8006eac <_svfiprintf_r+0x150>
 8006e9c:	9b04      	ldr	r3, [sp, #16]
 8006e9e:	eba0 000a 	sub.w	r0, r0, sl
 8006ea2:	2240      	movs	r2, #64	@ 0x40
 8006ea4:	4082      	lsls	r2, r0
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	3401      	adds	r4, #1
 8006eaa:	9304      	str	r3, [sp, #16]
 8006eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb0:	4824      	ldr	r0, [pc, #144]	@ (8006f44 <_svfiprintf_r+0x1e8>)
 8006eb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006eb6:	2206      	movs	r2, #6
 8006eb8:	f7f9 f99a 	bl	80001f0 <memchr>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d036      	beq.n	8006f2e <_svfiprintf_r+0x1d2>
 8006ec0:	4b21      	ldr	r3, [pc, #132]	@ (8006f48 <_svfiprintf_r+0x1ec>)
 8006ec2:	bb1b      	cbnz	r3, 8006f0c <_svfiprintf_r+0x1b0>
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	3307      	adds	r3, #7
 8006ec8:	f023 0307 	bic.w	r3, r3, #7
 8006ecc:	3308      	adds	r3, #8
 8006ece:	9303      	str	r3, [sp, #12]
 8006ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed2:	4433      	add	r3, r6
 8006ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ed6:	e76a      	b.n	8006dae <_svfiprintf_r+0x52>
 8006ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006edc:	460c      	mov	r4, r1
 8006ede:	2001      	movs	r0, #1
 8006ee0:	e7a8      	b.n	8006e34 <_svfiprintf_r+0xd8>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	3401      	adds	r4, #1
 8006ee6:	9305      	str	r3, [sp, #20]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	f04f 0c0a 	mov.w	ip, #10
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ef4:	3a30      	subs	r2, #48	@ 0x30
 8006ef6:	2a09      	cmp	r2, #9
 8006ef8:	d903      	bls.n	8006f02 <_svfiprintf_r+0x1a6>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0c6      	beq.n	8006e8c <_svfiprintf_r+0x130>
 8006efe:	9105      	str	r1, [sp, #20]
 8006f00:	e7c4      	b.n	8006e8c <_svfiprintf_r+0x130>
 8006f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f06:	4604      	mov	r4, r0
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e7f0      	b.n	8006eee <_svfiprintf_r+0x192>
 8006f0c:	ab03      	add	r3, sp, #12
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	462a      	mov	r2, r5
 8006f12:	4b0e      	ldr	r3, [pc, #56]	@ (8006f4c <_svfiprintf_r+0x1f0>)
 8006f14:	a904      	add	r1, sp, #16
 8006f16:	4638      	mov	r0, r7
 8006f18:	f3af 8000 	nop.w
 8006f1c:	1c42      	adds	r2, r0, #1
 8006f1e:	4606      	mov	r6, r0
 8006f20:	d1d6      	bne.n	8006ed0 <_svfiprintf_r+0x174>
 8006f22:	89ab      	ldrh	r3, [r5, #12]
 8006f24:	065b      	lsls	r3, r3, #25
 8006f26:	f53f af2d 	bmi.w	8006d84 <_svfiprintf_r+0x28>
 8006f2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f2c:	e72c      	b.n	8006d88 <_svfiprintf_r+0x2c>
 8006f2e:	ab03      	add	r3, sp, #12
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	462a      	mov	r2, r5
 8006f34:	4b05      	ldr	r3, [pc, #20]	@ (8006f4c <_svfiprintf_r+0x1f0>)
 8006f36:	a904      	add	r1, sp, #16
 8006f38:	4638      	mov	r0, r7
 8006f3a:	f000 f9bb 	bl	80072b4 <_printf_i>
 8006f3e:	e7ed      	b.n	8006f1c <_svfiprintf_r+0x1c0>
 8006f40:	08008a88 	.word	0x08008a88
 8006f44:	08008a92 	.word	0x08008a92
 8006f48:	00000000 	.word	0x00000000
 8006f4c:	08006ca5 	.word	0x08006ca5
 8006f50:	08008a8e 	.word	0x08008a8e

08006f54 <__sfputc_r>:
 8006f54:	6893      	ldr	r3, [r2, #8]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	b410      	push	{r4}
 8006f5c:	6093      	str	r3, [r2, #8]
 8006f5e:	da08      	bge.n	8006f72 <__sfputc_r+0x1e>
 8006f60:	6994      	ldr	r4, [r2, #24]
 8006f62:	42a3      	cmp	r3, r4
 8006f64:	db01      	blt.n	8006f6a <__sfputc_r+0x16>
 8006f66:	290a      	cmp	r1, #10
 8006f68:	d103      	bne.n	8006f72 <__sfputc_r+0x1e>
 8006f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f6e:	f7ff bc90 	b.w	8006892 <__swbuf_r>
 8006f72:	6813      	ldr	r3, [r2, #0]
 8006f74:	1c58      	adds	r0, r3, #1
 8006f76:	6010      	str	r0, [r2, #0]
 8006f78:	7019      	strb	r1, [r3, #0]
 8006f7a:	4608      	mov	r0, r1
 8006f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <__sfputs_r>:
 8006f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f84:	4606      	mov	r6, r0
 8006f86:	460f      	mov	r7, r1
 8006f88:	4614      	mov	r4, r2
 8006f8a:	18d5      	adds	r5, r2, r3
 8006f8c:	42ac      	cmp	r4, r5
 8006f8e:	d101      	bne.n	8006f94 <__sfputs_r+0x12>
 8006f90:	2000      	movs	r0, #0
 8006f92:	e007      	b.n	8006fa4 <__sfputs_r+0x22>
 8006f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f98:	463a      	mov	r2, r7
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f7ff ffda 	bl	8006f54 <__sfputc_r>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d1f3      	bne.n	8006f8c <__sfputs_r+0xa>
 8006fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fa8 <_vfiprintf_r>:
 8006fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	460d      	mov	r5, r1
 8006fae:	b09d      	sub	sp, #116	@ 0x74
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	4698      	mov	r8, r3
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	b118      	cbz	r0, 8006fc0 <_vfiprintf_r+0x18>
 8006fb8:	6a03      	ldr	r3, [r0, #32]
 8006fba:	b90b      	cbnz	r3, 8006fc0 <_vfiprintf_r+0x18>
 8006fbc:	f7ff fb60 	bl	8006680 <__sinit>
 8006fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fc2:	07d9      	lsls	r1, r3, #31
 8006fc4:	d405      	bmi.n	8006fd2 <_vfiprintf_r+0x2a>
 8006fc6:	89ab      	ldrh	r3, [r5, #12]
 8006fc8:	059a      	lsls	r2, r3, #22
 8006fca:	d402      	bmi.n	8006fd2 <_vfiprintf_r+0x2a>
 8006fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fce:	f7ff fd6e 	bl	8006aae <__retarget_lock_acquire_recursive>
 8006fd2:	89ab      	ldrh	r3, [r5, #12]
 8006fd4:	071b      	lsls	r3, r3, #28
 8006fd6:	d501      	bpl.n	8006fdc <_vfiprintf_r+0x34>
 8006fd8:	692b      	ldr	r3, [r5, #16]
 8006fda:	b99b      	cbnz	r3, 8007004 <_vfiprintf_r+0x5c>
 8006fdc:	4629      	mov	r1, r5
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7ff fc96 	bl	8006910 <__swsetup_r>
 8006fe4:	b170      	cbz	r0, 8007004 <_vfiprintf_r+0x5c>
 8006fe6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fe8:	07dc      	lsls	r4, r3, #31
 8006fea:	d504      	bpl.n	8006ff6 <_vfiprintf_r+0x4e>
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff0:	b01d      	add	sp, #116	@ 0x74
 8006ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff6:	89ab      	ldrh	r3, [r5, #12]
 8006ff8:	0598      	lsls	r0, r3, #22
 8006ffa:	d4f7      	bmi.n	8006fec <_vfiprintf_r+0x44>
 8006ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ffe:	f7ff fd57 	bl	8006ab0 <__retarget_lock_release_recursive>
 8007002:	e7f3      	b.n	8006fec <_vfiprintf_r+0x44>
 8007004:	2300      	movs	r3, #0
 8007006:	9309      	str	r3, [sp, #36]	@ 0x24
 8007008:	2320      	movs	r3, #32
 800700a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800700e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007012:	2330      	movs	r3, #48	@ 0x30
 8007014:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80071c4 <_vfiprintf_r+0x21c>
 8007018:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800701c:	f04f 0901 	mov.w	r9, #1
 8007020:	4623      	mov	r3, r4
 8007022:	469a      	mov	sl, r3
 8007024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007028:	b10a      	cbz	r2, 800702e <_vfiprintf_r+0x86>
 800702a:	2a25      	cmp	r2, #37	@ 0x25
 800702c:	d1f9      	bne.n	8007022 <_vfiprintf_r+0x7a>
 800702e:	ebba 0b04 	subs.w	fp, sl, r4
 8007032:	d00b      	beq.n	800704c <_vfiprintf_r+0xa4>
 8007034:	465b      	mov	r3, fp
 8007036:	4622      	mov	r2, r4
 8007038:	4629      	mov	r1, r5
 800703a:	4630      	mov	r0, r6
 800703c:	f7ff ffa1 	bl	8006f82 <__sfputs_r>
 8007040:	3001      	adds	r0, #1
 8007042:	f000 80a7 	beq.w	8007194 <_vfiprintf_r+0x1ec>
 8007046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007048:	445a      	add	r2, fp
 800704a:	9209      	str	r2, [sp, #36]	@ 0x24
 800704c:	f89a 3000 	ldrb.w	r3, [sl]
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 809f 	beq.w	8007194 <_vfiprintf_r+0x1ec>
 8007056:	2300      	movs	r3, #0
 8007058:	f04f 32ff 	mov.w	r2, #4294967295
 800705c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007060:	f10a 0a01 	add.w	sl, sl, #1
 8007064:	9304      	str	r3, [sp, #16]
 8007066:	9307      	str	r3, [sp, #28]
 8007068:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800706c:	931a      	str	r3, [sp, #104]	@ 0x68
 800706e:	4654      	mov	r4, sl
 8007070:	2205      	movs	r2, #5
 8007072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007076:	4853      	ldr	r0, [pc, #332]	@ (80071c4 <_vfiprintf_r+0x21c>)
 8007078:	f7f9 f8ba 	bl	80001f0 <memchr>
 800707c:	9a04      	ldr	r2, [sp, #16]
 800707e:	b9d8      	cbnz	r0, 80070b8 <_vfiprintf_r+0x110>
 8007080:	06d1      	lsls	r1, r2, #27
 8007082:	bf44      	itt	mi
 8007084:	2320      	movmi	r3, #32
 8007086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800708a:	0713      	lsls	r3, r2, #28
 800708c:	bf44      	itt	mi
 800708e:	232b      	movmi	r3, #43	@ 0x2b
 8007090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007094:	f89a 3000 	ldrb.w	r3, [sl]
 8007098:	2b2a      	cmp	r3, #42	@ 0x2a
 800709a:	d015      	beq.n	80070c8 <_vfiprintf_r+0x120>
 800709c:	9a07      	ldr	r2, [sp, #28]
 800709e:	4654      	mov	r4, sl
 80070a0:	2000      	movs	r0, #0
 80070a2:	f04f 0c0a 	mov.w	ip, #10
 80070a6:	4621      	mov	r1, r4
 80070a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ac:	3b30      	subs	r3, #48	@ 0x30
 80070ae:	2b09      	cmp	r3, #9
 80070b0:	d94b      	bls.n	800714a <_vfiprintf_r+0x1a2>
 80070b2:	b1b0      	cbz	r0, 80070e2 <_vfiprintf_r+0x13a>
 80070b4:	9207      	str	r2, [sp, #28]
 80070b6:	e014      	b.n	80070e2 <_vfiprintf_r+0x13a>
 80070b8:	eba0 0308 	sub.w	r3, r0, r8
 80070bc:	fa09 f303 	lsl.w	r3, r9, r3
 80070c0:	4313      	orrs	r3, r2
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	46a2      	mov	sl, r4
 80070c6:	e7d2      	b.n	800706e <_vfiprintf_r+0xc6>
 80070c8:	9b03      	ldr	r3, [sp, #12]
 80070ca:	1d19      	adds	r1, r3, #4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	9103      	str	r1, [sp, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bfbb      	ittet	lt
 80070d4:	425b      	neglt	r3, r3
 80070d6:	f042 0202 	orrlt.w	r2, r2, #2
 80070da:	9307      	strge	r3, [sp, #28]
 80070dc:	9307      	strlt	r3, [sp, #28]
 80070de:	bfb8      	it	lt
 80070e0:	9204      	strlt	r2, [sp, #16]
 80070e2:	7823      	ldrb	r3, [r4, #0]
 80070e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80070e6:	d10a      	bne.n	80070fe <_vfiprintf_r+0x156>
 80070e8:	7863      	ldrb	r3, [r4, #1]
 80070ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80070ec:	d132      	bne.n	8007154 <_vfiprintf_r+0x1ac>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	1d1a      	adds	r2, r3, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	9203      	str	r2, [sp, #12]
 80070f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070fa:	3402      	adds	r4, #2
 80070fc:	9305      	str	r3, [sp, #20]
 80070fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80071d4 <_vfiprintf_r+0x22c>
 8007102:	7821      	ldrb	r1, [r4, #0]
 8007104:	2203      	movs	r2, #3
 8007106:	4650      	mov	r0, sl
 8007108:	f7f9 f872 	bl	80001f0 <memchr>
 800710c:	b138      	cbz	r0, 800711e <_vfiprintf_r+0x176>
 800710e:	9b04      	ldr	r3, [sp, #16]
 8007110:	eba0 000a 	sub.w	r0, r0, sl
 8007114:	2240      	movs	r2, #64	@ 0x40
 8007116:	4082      	lsls	r2, r0
 8007118:	4313      	orrs	r3, r2
 800711a:	3401      	adds	r4, #1
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007122:	4829      	ldr	r0, [pc, #164]	@ (80071c8 <_vfiprintf_r+0x220>)
 8007124:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007128:	2206      	movs	r2, #6
 800712a:	f7f9 f861 	bl	80001f0 <memchr>
 800712e:	2800      	cmp	r0, #0
 8007130:	d03f      	beq.n	80071b2 <_vfiprintf_r+0x20a>
 8007132:	4b26      	ldr	r3, [pc, #152]	@ (80071cc <_vfiprintf_r+0x224>)
 8007134:	bb1b      	cbnz	r3, 800717e <_vfiprintf_r+0x1d6>
 8007136:	9b03      	ldr	r3, [sp, #12]
 8007138:	3307      	adds	r3, #7
 800713a:	f023 0307 	bic.w	r3, r3, #7
 800713e:	3308      	adds	r3, #8
 8007140:	9303      	str	r3, [sp, #12]
 8007142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007144:	443b      	add	r3, r7
 8007146:	9309      	str	r3, [sp, #36]	@ 0x24
 8007148:	e76a      	b.n	8007020 <_vfiprintf_r+0x78>
 800714a:	fb0c 3202 	mla	r2, ip, r2, r3
 800714e:	460c      	mov	r4, r1
 8007150:	2001      	movs	r0, #1
 8007152:	e7a8      	b.n	80070a6 <_vfiprintf_r+0xfe>
 8007154:	2300      	movs	r3, #0
 8007156:	3401      	adds	r4, #1
 8007158:	9305      	str	r3, [sp, #20]
 800715a:	4619      	mov	r1, r3
 800715c:	f04f 0c0a 	mov.w	ip, #10
 8007160:	4620      	mov	r0, r4
 8007162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007166:	3a30      	subs	r2, #48	@ 0x30
 8007168:	2a09      	cmp	r2, #9
 800716a:	d903      	bls.n	8007174 <_vfiprintf_r+0x1cc>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0c6      	beq.n	80070fe <_vfiprintf_r+0x156>
 8007170:	9105      	str	r1, [sp, #20]
 8007172:	e7c4      	b.n	80070fe <_vfiprintf_r+0x156>
 8007174:	fb0c 2101 	mla	r1, ip, r1, r2
 8007178:	4604      	mov	r4, r0
 800717a:	2301      	movs	r3, #1
 800717c:	e7f0      	b.n	8007160 <_vfiprintf_r+0x1b8>
 800717e:	ab03      	add	r3, sp, #12
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	462a      	mov	r2, r5
 8007184:	4b12      	ldr	r3, [pc, #72]	@ (80071d0 <_vfiprintf_r+0x228>)
 8007186:	a904      	add	r1, sp, #16
 8007188:	4630      	mov	r0, r6
 800718a:	f3af 8000 	nop.w
 800718e:	4607      	mov	r7, r0
 8007190:	1c78      	adds	r0, r7, #1
 8007192:	d1d6      	bne.n	8007142 <_vfiprintf_r+0x19a>
 8007194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007196:	07d9      	lsls	r1, r3, #31
 8007198:	d405      	bmi.n	80071a6 <_vfiprintf_r+0x1fe>
 800719a:	89ab      	ldrh	r3, [r5, #12]
 800719c:	059a      	lsls	r2, r3, #22
 800719e:	d402      	bmi.n	80071a6 <_vfiprintf_r+0x1fe>
 80071a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071a2:	f7ff fc85 	bl	8006ab0 <__retarget_lock_release_recursive>
 80071a6:	89ab      	ldrh	r3, [r5, #12]
 80071a8:	065b      	lsls	r3, r3, #25
 80071aa:	f53f af1f 	bmi.w	8006fec <_vfiprintf_r+0x44>
 80071ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071b0:	e71e      	b.n	8006ff0 <_vfiprintf_r+0x48>
 80071b2:	ab03      	add	r3, sp, #12
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	462a      	mov	r2, r5
 80071b8:	4b05      	ldr	r3, [pc, #20]	@ (80071d0 <_vfiprintf_r+0x228>)
 80071ba:	a904      	add	r1, sp, #16
 80071bc:	4630      	mov	r0, r6
 80071be:	f000 f879 	bl	80072b4 <_printf_i>
 80071c2:	e7e4      	b.n	800718e <_vfiprintf_r+0x1e6>
 80071c4:	08008a88 	.word	0x08008a88
 80071c8:	08008a92 	.word	0x08008a92
 80071cc:	00000000 	.word	0x00000000
 80071d0:	08006f83 	.word	0x08006f83
 80071d4:	08008a8e 	.word	0x08008a8e

080071d8 <_printf_common>:
 80071d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071dc:	4616      	mov	r6, r2
 80071de:	4698      	mov	r8, r3
 80071e0:	688a      	ldr	r2, [r1, #8]
 80071e2:	690b      	ldr	r3, [r1, #16]
 80071e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071e8:	4293      	cmp	r3, r2
 80071ea:	bfb8      	it	lt
 80071ec:	4613      	movlt	r3, r2
 80071ee:	6033      	str	r3, [r6, #0]
 80071f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071f4:	4607      	mov	r7, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	b10a      	cbz	r2, 80071fe <_printf_common+0x26>
 80071fa:	3301      	adds	r3, #1
 80071fc:	6033      	str	r3, [r6, #0]
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	0699      	lsls	r1, r3, #26
 8007202:	bf42      	ittt	mi
 8007204:	6833      	ldrmi	r3, [r6, #0]
 8007206:	3302      	addmi	r3, #2
 8007208:	6033      	strmi	r3, [r6, #0]
 800720a:	6825      	ldr	r5, [r4, #0]
 800720c:	f015 0506 	ands.w	r5, r5, #6
 8007210:	d106      	bne.n	8007220 <_printf_common+0x48>
 8007212:	f104 0a19 	add.w	sl, r4, #25
 8007216:	68e3      	ldr	r3, [r4, #12]
 8007218:	6832      	ldr	r2, [r6, #0]
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	42ab      	cmp	r3, r5
 800721e:	dc26      	bgt.n	800726e <_printf_common+0x96>
 8007220:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007224:	6822      	ldr	r2, [r4, #0]
 8007226:	3b00      	subs	r3, #0
 8007228:	bf18      	it	ne
 800722a:	2301      	movne	r3, #1
 800722c:	0692      	lsls	r2, r2, #26
 800722e:	d42b      	bmi.n	8007288 <_printf_common+0xb0>
 8007230:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007234:	4641      	mov	r1, r8
 8007236:	4638      	mov	r0, r7
 8007238:	47c8      	blx	r9
 800723a:	3001      	adds	r0, #1
 800723c:	d01e      	beq.n	800727c <_printf_common+0xa4>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	6922      	ldr	r2, [r4, #16]
 8007242:	f003 0306 	and.w	r3, r3, #6
 8007246:	2b04      	cmp	r3, #4
 8007248:	bf02      	ittt	eq
 800724a:	68e5      	ldreq	r5, [r4, #12]
 800724c:	6833      	ldreq	r3, [r6, #0]
 800724e:	1aed      	subeq	r5, r5, r3
 8007250:	68a3      	ldr	r3, [r4, #8]
 8007252:	bf0c      	ite	eq
 8007254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007258:	2500      	movne	r5, #0
 800725a:	4293      	cmp	r3, r2
 800725c:	bfc4      	itt	gt
 800725e:	1a9b      	subgt	r3, r3, r2
 8007260:	18ed      	addgt	r5, r5, r3
 8007262:	2600      	movs	r6, #0
 8007264:	341a      	adds	r4, #26
 8007266:	42b5      	cmp	r5, r6
 8007268:	d11a      	bne.n	80072a0 <_printf_common+0xc8>
 800726a:	2000      	movs	r0, #0
 800726c:	e008      	b.n	8007280 <_printf_common+0xa8>
 800726e:	2301      	movs	r3, #1
 8007270:	4652      	mov	r2, sl
 8007272:	4641      	mov	r1, r8
 8007274:	4638      	mov	r0, r7
 8007276:	47c8      	blx	r9
 8007278:	3001      	adds	r0, #1
 800727a:	d103      	bne.n	8007284 <_printf_common+0xac>
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007284:	3501      	adds	r5, #1
 8007286:	e7c6      	b.n	8007216 <_printf_common+0x3e>
 8007288:	18e1      	adds	r1, r4, r3
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	2030      	movs	r0, #48	@ 0x30
 800728e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007292:	4422      	add	r2, r4
 8007294:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007298:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800729c:	3302      	adds	r3, #2
 800729e:	e7c7      	b.n	8007230 <_printf_common+0x58>
 80072a0:	2301      	movs	r3, #1
 80072a2:	4622      	mov	r2, r4
 80072a4:	4641      	mov	r1, r8
 80072a6:	4638      	mov	r0, r7
 80072a8:	47c8      	blx	r9
 80072aa:	3001      	adds	r0, #1
 80072ac:	d0e6      	beq.n	800727c <_printf_common+0xa4>
 80072ae:	3601      	adds	r6, #1
 80072b0:	e7d9      	b.n	8007266 <_printf_common+0x8e>
	...

080072b4 <_printf_i>:
 80072b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072b8:	7e0f      	ldrb	r7, [r1, #24]
 80072ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072bc:	2f78      	cmp	r7, #120	@ 0x78
 80072be:	4691      	mov	r9, r2
 80072c0:	4680      	mov	r8, r0
 80072c2:	460c      	mov	r4, r1
 80072c4:	469a      	mov	sl, r3
 80072c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072ca:	d807      	bhi.n	80072dc <_printf_i+0x28>
 80072cc:	2f62      	cmp	r7, #98	@ 0x62
 80072ce:	d80a      	bhi.n	80072e6 <_printf_i+0x32>
 80072d0:	2f00      	cmp	r7, #0
 80072d2:	f000 80d2 	beq.w	800747a <_printf_i+0x1c6>
 80072d6:	2f58      	cmp	r7, #88	@ 0x58
 80072d8:	f000 80b9 	beq.w	800744e <_printf_i+0x19a>
 80072dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072e4:	e03a      	b.n	800735c <_printf_i+0xa8>
 80072e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072ea:	2b15      	cmp	r3, #21
 80072ec:	d8f6      	bhi.n	80072dc <_printf_i+0x28>
 80072ee:	a101      	add	r1, pc, #4	@ (adr r1, 80072f4 <_printf_i+0x40>)
 80072f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072f4:	0800734d 	.word	0x0800734d
 80072f8:	08007361 	.word	0x08007361
 80072fc:	080072dd 	.word	0x080072dd
 8007300:	080072dd 	.word	0x080072dd
 8007304:	080072dd 	.word	0x080072dd
 8007308:	080072dd 	.word	0x080072dd
 800730c:	08007361 	.word	0x08007361
 8007310:	080072dd 	.word	0x080072dd
 8007314:	080072dd 	.word	0x080072dd
 8007318:	080072dd 	.word	0x080072dd
 800731c:	080072dd 	.word	0x080072dd
 8007320:	08007461 	.word	0x08007461
 8007324:	0800738b 	.word	0x0800738b
 8007328:	0800741b 	.word	0x0800741b
 800732c:	080072dd 	.word	0x080072dd
 8007330:	080072dd 	.word	0x080072dd
 8007334:	08007483 	.word	0x08007483
 8007338:	080072dd 	.word	0x080072dd
 800733c:	0800738b 	.word	0x0800738b
 8007340:	080072dd 	.word	0x080072dd
 8007344:	080072dd 	.word	0x080072dd
 8007348:	08007423 	.word	0x08007423
 800734c:	6833      	ldr	r3, [r6, #0]
 800734e:	1d1a      	adds	r2, r3, #4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6032      	str	r2, [r6, #0]
 8007354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007358:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800735c:	2301      	movs	r3, #1
 800735e:	e09d      	b.n	800749c <_printf_i+0x1e8>
 8007360:	6833      	ldr	r3, [r6, #0]
 8007362:	6820      	ldr	r0, [r4, #0]
 8007364:	1d19      	adds	r1, r3, #4
 8007366:	6031      	str	r1, [r6, #0]
 8007368:	0606      	lsls	r6, r0, #24
 800736a:	d501      	bpl.n	8007370 <_printf_i+0xbc>
 800736c:	681d      	ldr	r5, [r3, #0]
 800736e:	e003      	b.n	8007378 <_printf_i+0xc4>
 8007370:	0645      	lsls	r5, r0, #25
 8007372:	d5fb      	bpl.n	800736c <_printf_i+0xb8>
 8007374:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007378:	2d00      	cmp	r5, #0
 800737a:	da03      	bge.n	8007384 <_printf_i+0xd0>
 800737c:	232d      	movs	r3, #45	@ 0x2d
 800737e:	426d      	negs	r5, r5
 8007380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007384:	4859      	ldr	r0, [pc, #356]	@ (80074ec <_printf_i+0x238>)
 8007386:	230a      	movs	r3, #10
 8007388:	e011      	b.n	80073ae <_printf_i+0xfa>
 800738a:	6821      	ldr	r1, [r4, #0]
 800738c:	6833      	ldr	r3, [r6, #0]
 800738e:	0608      	lsls	r0, r1, #24
 8007390:	f853 5b04 	ldr.w	r5, [r3], #4
 8007394:	d402      	bmi.n	800739c <_printf_i+0xe8>
 8007396:	0649      	lsls	r1, r1, #25
 8007398:	bf48      	it	mi
 800739a:	b2ad      	uxthmi	r5, r5
 800739c:	2f6f      	cmp	r7, #111	@ 0x6f
 800739e:	4853      	ldr	r0, [pc, #332]	@ (80074ec <_printf_i+0x238>)
 80073a0:	6033      	str	r3, [r6, #0]
 80073a2:	bf14      	ite	ne
 80073a4:	230a      	movne	r3, #10
 80073a6:	2308      	moveq	r3, #8
 80073a8:	2100      	movs	r1, #0
 80073aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073ae:	6866      	ldr	r6, [r4, #4]
 80073b0:	60a6      	str	r6, [r4, #8]
 80073b2:	2e00      	cmp	r6, #0
 80073b4:	bfa2      	ittt	ge
 80073b6:	6821      	ldrge	r1, [r4, #0]
 80073b8:	f021 0104 	bicge.w	r1, r1, #4
 80073bc:	6021      	strge	r1, [r4, #0]
 80073be:	b90d      	cbnz	r5, 80073c4 <_printf_i+0x110>
 80073c0:	2e00      	cmp	r6, #0
 80073c2:	d04b      	beq.n	800745c <_printf_i+0x1a8>
 80073c4:	4616      	mov	r6, r2
 80073c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80073ca:	fb03 5711 	mls	r7, r3, r1, r5
 80073ce:	5dc7      	ldrb	r7, [r0, r7]
 80073d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073d4:	462f      	mov	r7, r5
 80073d6:	42bb      	cmp	r3, r7
 80073d8:	460d      	mov	r5, r1
 80073da:	d9f4      	bls.n	80073c6 <_printf_i+0x112>
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d10b      	bne.n	80073f8 <_printf_i+0x144>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	07df      	lsls	r7, r3, #31
 80073e4:	d508      	bpl.n	80073f8 <_printf_i+0x144>
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	6861      	ldr	r1, [r4, #4]
 80073ea:	4299      	cmp	r1, r3
 80073ec:	bfde      	ittt	le
 80073ee:	2330      	movle	r3, #48	@ 0x30
 80073f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073f8:	1b92      	subs	r2, r2, r6
 80073fa:	6122      	str	r2, [r4, #16]
 80073fc:	f8cd a000 	str.w	sl, [sp]
 8007400:	464b      	mov	r3, r9
 8007402:	aa03      	add	r2, sp, #12
 8007404:	4621      	mov	r1, r4
 8007406:	4640      	mov	r0, r8
 8007408:	f7ff fee6 	bl	80071d8 <_printf_common>
 800740c:	3001      	adds	r0, #1
 800740e:	d14a      	bne.n	80074a6 <_printf_i+0x1f2>
 8007410:	f04f 30ff 	mov.w	r0, #4294967295
 8007414:	b004      	add	sp, #16
 8007416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	f043 0320 	orr.w	r3, r3, #32
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	4833      	ldr	r0, [pc, #204]	@ (80074f0 <_printf_i+0x23c>)
 8007424:	2778      	movs	r7, #120	@ 0x78
 8007426:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	6831      	ldr	r1, [r6, #0]
 800742e:	061f      	lsls	r7, r3, #24
 8007430:	f851 5b04 	ldr.w	r5, [r1], #4
 8007434:	d402      	bmi.n	800743c <_printf_i+0x188>
 8007436:	065f      	lsls	r7, r3, #25
 8007438:	bf48      	it	mi
 800743a:	b2ad      	uxthmi	r5, r5
 800743c:	6031      	str	r1, [r6, #0]
 800743e:	07d9      	lsls	r1, r3, #31
 8007440:	bf44      	itt	mi
 8007442:	f043 0320 	orrmi.w	r3, r3, #32
 8007446:	6023      	strmi	r3, [r4, #0]
 8007448:	b11d      	cbz	r5, 8007452 <_printf_i+0x19e>
 800744a:	2310      	movs	r3, #16
 800744c:	e7ac      	b.n	80073a8 <_printf_i+0xf4>
 800744e:	4827      	ldr	r0, [pc, #156]	@ (80074ec <_printf_i+0x238>)
 8007450:	e7e9      	b.n	8007426 <_printf_i+0x172>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	f023 0320 	bic.w	r3, r3, #32
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	e7f6      	b.n	800744a <_printf_i+0x196>
 800745c:	4616      	mov	r6, r2
 800745e:	e7bd      	b.n	80073dc <_printf_i+0x128>
 8007460:	6833      	ldr	r3, [r6, #0]
 8007462:	6825      	ldr	r5, [r4, #0]
 8007464:	6961      	ldr	r1, [r4, #20]
 8007466:	1d18      	adds	r0, r3, #4
 8007468:	6030      	str	r0, [r6, #0]
 800746a:	062e      	lsls	r6, r5, #24
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	d501      	bpl.n	8007474 <_printf_i+0x1c0>
 8007470:	6019      	str	r1, [r3, #0]
 8007472:	e002      	b.n	800747a <_printf_i+0x1c6>
 8007474:	0668      	lsls	r0, r5, #25
 8007476:	d5fb      	bpl.n	8007470 <_printf_i+0x1bc>
 8007478:	8019      	strh	r1, [r3, #0]
 800747a:	2300      	movs	r3, #0
 800747c:	6123      	str	r3, [r4, #16]
 800747e:	4616      	mov	r6, r2
 8007480:	e7bc      	b.n	80073fc <_printf_i+0x148>
 8007482:	6833      	ldr	r3, [r6, #0]
 8007484:	1d1a      	adds	r2, r3, #4
 8007486:	6032      	str	r2, [r6, #0]
 8007488:	681e      	ldr	r6, [r3, #0]
 800748a:	6862      	ldr	r2, [r4, #4]
 800748c:	2100      	movs	r1, #0
 800748e:	4630      	mov	r0, r6
 8007490:	f7f8 feae 	bl	80001f0 <memchr>
 8007494:	b108      	cbz	r0, 800749a <_printf_i+0x1e6>
 8007496:	1b80      	subs	r0, r0, r6
 8007498:	6060      	str	r0, [r4, #4]
 800749a:	6863      	ldr	r3, [r4, #4]
 800749c:	6123      	str	r3, [r4, #16]
 800749e:	2300      	movs	r3, #0
 80074a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074a4:	e7aa      	b.n	80073fc <_printf_i+0x148>
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	4632      	mov	r2, r6
 80074aa:	4649      	mov	r1, r9
 80074ac:	4640      	mov	r0, r8
 80074ae:	47d0      	blx	sl
 80074b0:	3001      	adds	r0, #1
 80074b2:	d0ad      	beq.n	8007410 <_printf_i+0x15c>
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	079b      	lsls	r3, r3, #30
 80074b8:	d413      	bmi.n	80074e2 <_printf_i+0x22e>
 80074ba:	68e0      	ldr	r0, [r4, #12]
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	4298      	cmp	r0, r3
 80074c0:	bfb8      	it	lt
 80074c2:	4618      	movlt	r0, r3
 80074c4:	e7a6      	b.n	8007414 <_printf_i+0x160>
 80074c6:	2301      	movs	r3, #1
 80074c8:	4632      	mov	r2, r6
 80074ca:	4649      	mov	r1, r9
 80074cc:	4640      	mov	r0, r8
 80074ce:	47d0      	blx	sl
 80074d0:	3001      	adds	r0, #1
 80074d2:	d09d      	beq.n	8007410 <_printf_i+0x15c>
 80074d4:	3501      	adds	r5, #1
 80074d6:	68e3      	ldr	r3, [r4, #12]
 80074d8:	9903      	ldr	r1, [sp, #12]
 80074da:	1a5b      	subs	r3, r3, r1
 80074dc:	42ab      	cmp	r3, r5
 80074de:	dcf2      	bgt.n	80074c6 <_printf_i+0x212>
 80074e0:	e7eb      	b.n	80074ba <_printf_i+0x206>
 80074e2:	2500      	movs	r5, #0
 80074e4:	f104 0619 	add.w	r6, r4, #25
 80074e8:	e7f5      	b.n	80074d6 <_printf_i+0x222>
 80074ea:	bf00      	nop
 80074ec:	08008a99 	.word	0x08008a99
 80074f0:	08008aaa 	.word	0x08008aaa

080074f4 <__sflush_r>:
 80074f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074fc:	0716      	lsls	r6, r2, #28
 80074fe:	4605      	mov	r5, r0
 8007500:	460c      	mov	r4, r1
 8007502:	d454      	bmi.n	80075ae <__sflush_r+0xba>
 8007504:	684b      	ldr	r3, [r1, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	dc02      	bgt.n	8007510 <__sflush_r+0x1c>
 800750a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800750c:	2b00      	cmp	r3, #0
 800750e:	dd48      	ble.n	80075a2 <__sflush_r+0xae>
 8007510:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007512:	2e00      	cmp	r6, #0
 8007514:	d045      	beq.n	80075a2 <__sflush_r+0xae>
 8007516:	2300      	movs	r3, #0
 8007518:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800751c:	682f      	ldr	r7, [r5, #0]
 800751e:	6a21      	ldr	r1, [r4, #32]
 8007520:	602b      	str	r3, [r5, #0]
 8007522:	d030      	beq.n	8007586 <__sflush_r+0x92>
 8007524:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	0759      	lsls	r1, r3, #29
 800752a:	d505      	bpl.n	8007538 <__sflush_r+0x44>
 800752c:	6863      	ldr	r3, [r4, #4]
 800752e:	1ad2      	subs	r2, r2, r3
 8007530:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007532:	b10b      	cbz	r3, 8007538 <__sflush_r+0x44>
 8007534:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007536:	1ad2      	subs	r2, r2, r3
 8007538:	2300      	movs	r3, #0
 800753a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800753c:	6a21      	ldr	r1, [r4, #32]
 800753e:	4628      	mov	r0, r5
 8007540:	47b0      	blx	r6
 8007542:	1c43      	adds	r3, r0, #1
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	d106      	bne.n	8007556 <__sflush_r+0x62>
 8007548:	6829      	ldr	r1, [r5, #0]
 800754a:	291d      	cmp	r1, #29
 800754c:	d82b      	bhi.n	80075a6 <__sflush_r+0xb2>
 800754e:	4a2a      	ldr	r2, [pc, #168]	@ (80075f8 <__sflush_r+0x104>)
 8007550:	410a      	asrs	r2, r1
 8007552:	07d6      	lsls	r6, r2, #31
 8007554:	d427      	bmi.n	80075a6 <__sflush_r+0xb2>
 8007556:	2200      	movs	r2, #0
 8007558:	6062      	str	r2, [r4, #4]
 800755a:	04d9      	lsls	r1, r3, #19
 800755c:	6922      	ldr	r2, [r4, #16]
 800755e:	6022      	str	r2, [r4, #0]
 8007560:	d504      	bpl.n	800756c <__sflush_r+0x78>
 8007562:	1c42      	adds	r2, r0, #1
 8007564:	d101      	bne.n	800756a <__sflush_r+0x76>
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	b903      	cbnz	r3, 800756c <__sflush_r+0x78>
 800756a:	6560      	str	r0, [r4, #84]	@ 0x54
 800756c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800756e:	602f      	str	r7, [r5, #0]
 8007570:	b1b9      	cbz	r1, 80075a2 <__sflush_r+0xae>
 8007572:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007576:	4299      	cmp	r1, r3
 8007578:	d002      	beq.n	8007580 <__sflush_r+0x8c>
 800757a:	4628      	mov	r0, r5
 800757c:	f7ff fa9a 	bl	8006ab4 <_free_r>
 8007580:	2300      	movs	r3, #0
 8007582:	6363      	str	r3, [r4, #52]	@ 0x34
 8007584:	e00d      	b.n	80075a2 <__sflush_r+0xae>
 8007586:	2301      	movs	r3, #1
 8007588:	4628      	mov	r0, r5
 800758a:	47b0      	blx	r6
 800758c:	4602      	mov	r2, r0
 800758e:	1c50      	adds	r0, r2, #1
 8007590:	d1c9      	bne.n	8007526 <__sflush_r+0x32>
 8007592:	682b      	ldr	r3, [r5, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0c6      	beq.n	8007526 <__sflush_r+0x32>
 8007598:	2b1d      	cmp	r3, #29
 800759a:	d001      	beq.n	80075a0 <__sflush_r+0xac>
 800759c:	2b16      	cmp	r3, #22
 800759e:	d11e      	bne.n	80075de <__sflush_r+0xea>
 80075a0:	602f      	str	r7, [r5, #0]
 80075a2:	2000      	movs	r0, #0
 80075a4:	e022      	b.n	80075ec <__sflush_r+0xf8>
 80075a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075aa:	b21b      	sxth	r3, r3
 80075ac:	e01b      	b.n	80075e6 <__sflush_r+0xf2>
 80075ae:	690f      	ldr	r7, [r1, #16]
 80075b0:	2f00      	cmp	r7, #0
 80075b2:	d0f6      	beq.n	80075a2 <__sflush_r+0xae>
 80075b4:	0793      	lsls	r3, r2, #30
 80075b6:	680e      	ldr	r6, [r1, #0]
 80075b8:	bf08      	it	eq
 80075ba:	694b      	ldreq	r3, [r1, #20]
 80075bc:	600f      	str	r7, [r1, #0]
 80075be:	bf18      	it	ne
 80075c0:	2300      	movne	r3, #0
 80075c2:	eba6 0807 	sub.w	r8, r6, r7
 80075c6:	608b      	str	r3, [r1, #8]
 80075c8:	f1b8 0f00 	cmp.w	r8, #0
 80075cc:	dde9      	ble.n	80075a2 <__sflush_r+0xae>
 80075ce:	6a21      	ldr	r1, [r4, #32]
 80075d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80075d2:	4643      	mov	r3, r8
 80075d4:	463a      	mov	r2, r7
 80075d6:	4628      	mov	r0, r5
 80075d8:	47b0      	blx	r6
 80075da:	2800      	cmp	r0, #0
 80075dc:	dc08      	bgt.n	80075f0 <__sflush_r+0xfc>
 80075de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075e6:	81a3      	strh	r3, [r4, #12]
 80075e8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f0:	4407      	add	r7, r0
 80075f2:	eba8 0800 	sub.w	r8, r8, r0
 80075f6:	e7e7      	b.n	80075c8 <__sflush_r+0xd4>
 80075f8:	dfbffffe 	.word	0xdfbffffe

080075fc <_fflush_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	690b      	ldr	r3, [r1, #16]
 8007600:	4605      	mov	r5, r0
 8007602:	460c      	mov	r4, r1
 8007604:	b913      	cbnz	r3, 800760c <_fflush_r+0x10>
 8007606:	2500      	movs	r5, #0
 8007608:	4628      	mov	r0, r5
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	b118      	cbz	r0, 8007616 <_fflush_r+0x1a>
 800760e:	6a03      	ldr	r3, [r0, #32]
 8007610:	b90b      	cbnz	r3, 8007616 <_fflush_r+0x1a>
 8007612:	f7ff f835 	bl	8006680 <__sinit>
 8007616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f3      	beq.n	8007606 <_fflush_r+0xa>
 800761e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007620:	07d0      	lsls	r0, r2, #31
 8007622:	d404      	bmi.n	800762e <_fflush_r+0x32>
 8007624:	0599      	lsls	r1, r3, #22
 8007626:	d402      	bmi.n	800762e <_fflush_r+0x32>
 8007628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800762a:	f7ff fa40 	bl	8006aae <__retarget_lock_acquire_recursive>
 800762e:	4628      	mov	r0, r5
 8007630:	4621      	mov	r1, r4
 8007632:	f7ff ff5f 	bl	80074f4 <__sflush_r>
 8007636:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007638:	07da      	lsls	r2, r3, #31
 800763a:	4605      	mov	r5, r0
 800763c:	d4e4      	bmi.n	8007608 <_fflush_r+0xc>
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	059b      	lsls	r3, r3, #22
 8007642:	d4e1      	bmi.n	8007608 <_fflush_r+0xc>
 8007644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007646:	f7ff fa33 	bl	8006ab0 <__retarget_lock_release_recursive>
 800764a:	e7dd      	b.n	8007608 <_fflush_r+0xc>

0800764c <__swhatbuf_r>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	460c      	mov	r4, r1
 8007650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007654:	2900      	cmp	r1, #0
 8007656:	b096      	sub	sp, #88	@ 0x58
 8007658:	4615      	mov	r5, r2
 800765a:	461e      	mov	r6, r3
 800765c:	da0d      	bge.n	800767a <__swhatbuf_r+0x2e>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007664:	f04f 0100 	mov.w	r1, #0
 8007668:	bf14      	ite	ne
 800766a:	2340      	movne	r3, #64	@ 0x40
 800766c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007670:	2000      	movs	r0, #0
 8007672:	6031      	str	r1, [r6, #0]
 8007674:	602b      	str	r3, [r5, #0]
 8007676:	b016      	add	sp, #88	@ 0x58
 8007678:	bd70      	pop	{r4, r5, r6, pc}
 800767a:	466a      	mov	r2, sp
 800767c:	f000 f862 	bl	8007744 <_fstat_r>
 8007680:	2800      	cmp	r0, #0
 8007682:	dbec      	blt.n	800765e <__swhatbuf_r+0x12>
 8007684:	9901      	ldr	r1, [sp, #4]
 8007686:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800768a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800768e:	4259      	negs	r1, r3
 8007690:	4159      	adcs	r1, r3
 8007692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007696:	e7eb      	b.n	8007670 <__swhatbuf_r+0x24>

08007698 <__smakebuf_r>:
 8007698:	898b      	ldrh	r3, [r1, #12]
 800769a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800769c:	079d      	lsls	r5, r3, #30
 800769e:	4606      	mov	r6, r0
 80076a0:	460c      	mov	r4, r1
 80076a2:	d507      	bpl.n	80076b4 <__smakebuf_r+0x1c>
 80076a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	6123      	str	r3, [r4, #16]
 80076ac:	2301      	movs	r3, #1
 80076ae:	6163      	str	r3, [r4, #20]
 80076b0:	b003      	add	sp, #12
 80076b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b4:	ab01      	add	r3, sp, #4
 80076b6:	466a      	mov	r2, sp
 80076b8:	f7ff ffc8 	bl	800764c <__swhatbuf_r>
 80076bc:	9f00      	ldr	r7, [sp, #0]
 80076be:	4605      	mov	r5, r0
 80076c0:	4639      	mov	r1, r7
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7ff fa62 	bl	8006b8c <_malloc_r>
 80076c8:	b948      	cbnz	r0, 80076de <__smakebuf_r+0x46>
 80076ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ce:	059a      	lsls	r2, r3, #22
 80076d0:	d4ee      	bmi.n	80076b0 <__smakebuf_r+0x18>
 80076d2:	f023 0303 	bic.w	r3, r3, #3
 80076d6:	f043 0302 	orr.w	r3, r3, #2
 80076da:	81a3      	strh	r3, [r4, #12]
 80076dc:	e7e2      	b.n	80076a4 <__smakebuf_r+0xc>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	6020      	str	r0, [r4, #0]
 80076e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	9b01      	ldr	r3, [sp, #4]
 80076ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076ee:	b15b      	cbz	r3, 8007708 <__smakebuf_r+0x70>
 80076f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076f4:	4630      	mov	r0, r6
 80076f6:	f000 f837 	bl	8007768 <_isatty_r>
 80076fa:	b128      	cbz	r0, 8007708 <__smakebuf_r+0x70>
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	f043 0301 	orr.w	r3, r3, #1
 8007706:	81a3      	strh	r3, [r4, #12]
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	431d      	orrs	r5, r3
 800770c:	81a5      	strh	r5, [r4, #12]
 800770e:	e7cf      	b.n	80076b0 <__smakebuf_r+0x18>

08007710 <memmove>:
 8007710:	4288      	cmp	r0, r1
 8007712:	b510      	push	{r4, lr}
 8007714:	eb01 0402 	add.w	r4, r1, r2
 8007718:	d902      	bls.n	8007720 <memmove+0x10>
 800771a:	4284      	cmp	r4, r0
 800771c:	4623      	mov	r3, r4
 800771e:	d807      	bhi.n	8007730 <memmove+0x20>
 8007720:	1e43      	subs	r3, r0, #1
 8007722:	42a1      	cmp	r1, r4
 8007724:	d008      	beq.n	8007738 <memmove+0x28>
 8007726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800772a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800772e:	e7f8      	b.n	8007722 <memmove+0x12>
 8007730:	4402      	add	r2, r0
 8007732:	4601      	mov	r1, r0
 8007734:	428a      	cmp	r2, r1
 8007736:	d100      	bne.n	800773a <memmove+0x2a>
 8007738:	bd10      	pop	{r4, pc}
 800773a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800773e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007742:	e7f7      	b.n	8007734 <memmove+0x24>

08007744 <_fstat_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	4d07      	ldr	r5, [pc, #28]	@ (8007764 <_fstat_r+0x20>)
 8007748:	2300      	movs	r3, #0
 800774a:	4604      	mov	r4, r0
 800774c:	4608      	mov	r0, r1
 800774e:	4611      	mov	r1, r2
 8007750:	602b      	str	r3, [r5, #0]
 8007752:	f7fb fcfd 	bl	8003150 <_fstat>
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	d102      	bne.n	8007760 <_fstat_r+0x1c>
 800775a:	682b      	ldr	r3, [r5, #0]
 800775c:	b103      	cbz	r3, 8007760 <_fstat_r+0x1c>
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	bd38      	pop	{r3, r4, r5, pc}
 8007762:	bf00      	nop
 8007764:	20025d64 	.word	0x20025d64

08007768 <_isatty_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4d06      	ldr	r5, [pc, #24]	@ (8007784 <_isatty_r+0x1c>)
 800776c:	2300      	movs	r3, #0
 800776e:	4604      	mov	r4, r0
 8007770:	4608      	mov	r0, r1
 8007772:	602b      	str	r3, [r5, #0]
 8007774:	f7fb fcfc 	bl	8003170 <_isatty>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d102      	bne.n	8007782 <_isatty_r+0x1a>
 800777c:	682b      	ldr	r3, [r5, #0]
 800777e:	b103      	cbz	r3, 8007782 <_isatty_r+0x1a>
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	20025d64 	.word	0x20025d64

08007788 <_sbrk_r>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	4d06      	ldr	r5, [pc, #24]	@ (80077a4 <_sbrk_r+0x1c>)
 800778c:	2300      	movs	r3, #0
 800778e:	4604      	mov	r4, r0
 8007790:	4608      	mov	r0, r1
 8007792:	602b      	str	r3, [r5, #0]
 8007794:	f7fb fd04 	bl	80031a0 <_sbrk>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_sbrk_r+0x1a>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_sbrk_r+0x1a>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	20025d64 	.word	0x20025d64

080077a8 <memcpy>:
 80077a8:	440a      	add	r2, r1
 80077aa:	4291      	cmp	r1, r2
 80077ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80077b0:	d100      	bne.n	80077b4 <memcpy+0xc>
 80077b2:	4770      	bx	lr
 80077b4:	b510      	push	{r4, lr}
 80077b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077be:	4291      	cmp	r1, r2
 80077c0:	d1f9      	bne.n	80077b6 <memcpy+0xe>
 80077c2:	bd10      	pop	{r4, pc}

080077c4 <_realloc_r>:
 80077c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c8:	4680      	mov	r8, r0
 80077ca:	4615      	mov	r5, r2
 80077cc:	460c      	mov	r4, r1
 80077ce:	b921      	cbnz	r1, 80077da <_realloc_r+0x16>
 80077d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077d4:	4611      	mov	r1, r2
 80077d6:	f7ff b9d9 	b.w	8006b8c <_malloc_r>
 80077da:	b92a      	cbnz	r2, 80077e8 <_realloc_r+0x24>
 80077dc:	f7ff f96a 	bl	8006ab4 <_free_r>
 80077e0:	2400      	movs	r4, #0
 80077e2:	4620      	mov	r0, r4
 80077e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e8:	f000 f81a 	bl	8007820 <_malloc_usable_size_r>
 80077ec:	4285      	cmp	r5, r0
 80077ee:	4606      	mov	r6, r0
 80077f0:	d802      	bhi.n	80077f8 <_realloc_r+0x34>
 80077f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80077f6:	d8f4      	bhi.n	80077e2 <_realloc_r+0x1e>
 80077f8:	4629      	mov	r1, r5
 80077fa:	4640      	mov	r0, r8
 80077fc:	f7ff f9c6 	bl	8006b8c <_malloc_r>
 8007800:	4607      	mov	r7, r0
 8007802:	2800      	cmp	r0, #0
 8007804:	d0ec      	beq.n	80077e0 <_realloc_r+0x1c>
 8007806:	42b5      	cmp	r5, r6
 8007808:	462a      	mov	r2, r5
 800780a:	4621      	mov	r1, r4
 800780c:	bf28      	it	cs
 800780e:	4632      	movcs	r2, r6
 8007810:	f7ff ffca 	bl	80077a8 <memcpy>
 8007814:	4621      	mov	r1, r4
 8007816:	4640      	mov	r0, r8
 8007818:	f7ff f94c 	bl	8006ab4 <_free_r>
 800781c:	463c      	mov	r4, r7
 800781e:	e7e0      	b.n	80077e2 <_realloc_r+0x1e>

08007820 <_malloc_usable_size_r>:
 8007820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007824:	1f18      	subs	r0, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	bfbc      	itt	lt
 800782a:	580b      	ldrlt	r3, [r1, r0]
 800782c:	18c0      	addlt	r0, r0, r3
 800782e:	4770      	bx	lr

08007830 <_init>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	bf00      	nop
 8007834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007836:	bc08      	pop	{r3}
 8007838:	469e      	mov	lr, r3
 800783a:	4770      	bx	lr

0800783c <_fini>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	bf00      	nop
 8007840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007842:	bc08      	pop	{r3}
 8007844:	469e      	mov	lr, r3
 8007846:	4770      	bx	lr
